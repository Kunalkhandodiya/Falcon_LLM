User,Prompt
"Create a function to calculate the sum of a sequence of integers.  [1, 2, 3, 4, 5]","# Python code
def sum_sequence(sequence):
  sum = 0
  for num in sequence:
    sum += num
  return sum"
"Generate a Python code for crawling a website for a specific type of data.  website: www.example.com 
data to crawl: phone numbers","import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))"
"Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].  ","[x*x for x in [1, 2, 3, 5, 8, 13]]"
"Generate a python script to perform this action.  Given a string, remove all the consecutive duplicates from the string.

Input: ""AAABBCCCD""","def remove_duplicates(string): 
    result = """" 
    prev = '' 

    for char in string:
        if char != prev: 
            result += char
            prev = char
    return result

result = remove_duplicates(""AAABBCCCD"")
print(result)"
Write a python script to generates random numbers between 0 and 9 that are divisible by 3.  ,"def generate_random_divisible_number():
    import random
    while True:
        # Generate a random number
        process = random.randint(0, 9)
        # Check if the number is divisible by 3
        if process % 3 == 0:
            # If it is divisible, return it
            return process"
"Write a Python code to get the third largest element in a given row.  [12, 13, 13, 45, 22, 99]","def third_largest(lst):
    if len(lst) < 3:
        return
    distinct = []
    for i in lst:
        if i not in distinct:
            distinct.append(i)
    distinct.sort(reverse=True)
    return distinct[2]"
"Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.  Not applicable","from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class Record(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 name = db.Column(db.String(120), unique=True)

db.create_all()

@app.route('/records', methods=['GET'])
def get_records():
 records = Record.query.all()
 return {'records':[record.name for record in records]}

@app.route('/records', methods=['POST'])
def create_record():
 record = Record(name=request.json['name'])
 db.session.add(record)
 db.session.commit()
 return {'id': record.id}

@app.route('/records/int:id', methods=['PUT'])
def update_record(id):
 record = Record.query.get(id)
 record.name = request.json['name']
 db.session.commit()
 return {'message': 'Record updated'}

@app.route('/records/int:id', methods=['DELETE'])
def delete_record(id):
 Record.query.filter_by(id=id).delete()
 db.session.commit()
 return {'message': 'Record deleted'}

if name == 'main':
 app.run(debug=True)"
"Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.  'This is a test', ['test', 'this', 'is']","def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True"
"What should this Python program do?  def is_palindrome(s):
    '''Write your code here.'''","def is_palindrome(s):
    '''This function returns True if the string s is a palindrome and False if it isn't.''' 
    return s == s[::-1]  # Checks if s is the same as its reverse."
"Create a Python program to sort and print out the elements of an array of integers.  [17, 41, 5, 22, 54, 6, 29, 3, 13]","arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]

arr.sort()

print(arr)

# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]"
Generate a Python program that adds two then doubles the result.  ,"def double_add(num1, num2): 
    return (num1 + num2) * 2"
Write a python program to extract the non-vowel words in a sentence.  This machine learning project is challenging.,"def extract_words(sentence):
    non_vowel_words = []
    words = sentence.split()
    vowels = ['a','e','i','o','u','A','E','I','O','U']
    for word in words:
        if not any(char in vowels for char in word):
            non_vowel_words.append(word) 
    return non_vowel_words"
"Write a Python program to calculate the average of a list of positive integers and output the result.  List of positive integers: [1, 5, 6, 7, 8]","list_of_positive_integers = [1, 5, 6, 7, 8]
total = sum(list_of_positive_integers)

avg = total/len(list_of_positive_integers)

print(""The average of the list of positive integers is {}"".format(avg))"
Develop a function in Python that prints out the Pascal's triangle for a given number of rows.  ,"def pascal_triangle(n): 
    trow = [1] 
    y = [0] 
    for x in range(max(n, 0)): 
        print(trow) 
        trow=[l+r for l,r in zip(trow + y, y + trow)] 
    return n>=1

pascal_triangle(5)"
Implement a decision-making algorithm for a rock-paper-scissors game using Python.  ,"# Rock, paper, scissors game!

def play_game(player1, player2):
    #  Define the winning rules
    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}
    if player1 == player2:
        return 'It is a draw!'
    elif rules[player1] == player2:
        return 'Player 1 wins!'
    elif rules[player2] == player1:
        return 'Player 2 wins!'

# Get user input
player1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()
player2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()

# Start the game and get the result
result = play_game(player1, player2)
print(result)"
Collate a machine learning model in Python that distinguishes between cats and dogs.  A dataset of 800 images of cats and dogs,"import numpy as np
import keras
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator

# Create the neural network model
model = Sequential()

# Input layer
model.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

# Hidden layers
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))

# Output layer
model.add(Flatten())
model.add(Dense(units = 128, activation = 'relu'))
model.add(Dense(units = 1, activation = 'sigmoid'))

# Compile the model
model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

# Create data generator
datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)

# Fit the model
train_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)
model.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)"
"Write a Python program to find all the numbers divisible by a certain number within a certain range.  int m=36, int n=74, int divisor=6","def find_numbers_divisible_by(m, n, divisor):
    divisible_numbers = []
    for i in range(m, n+1):
        if i % divisor == 0:
            divisible_numbers.append(i)
    return divisible_numbers"
"Implement a Python function that will take two strings and return true if the first string contains the second.  query = ""catering""
word = ""cat""","def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)"
Write an algorithm in Python 3 that calculates the factorial of a number.  Not applicable,"def factorial(n):
 if n == 0:
  return 1
 else:
  return n * factorial(n-1)"
"Develop a Python function to predict the class labels of a given set of data.  The dataset contains 4 features: Length, Width, Height and Weight.","# Load the dataset
import pandas as pd
csv_url = 'http://test.test/test.csv'
df = pd.read_csv(csv_url)

# Split the dataset into features and label
X = df.iloc[:, 0:4].values
y = df.iloc[:, 4].values

# Import the ML model
from sklearn.tree import DecisionTreeClassifier

# Create and fit the model
model = DecisionTreeClassifier()
model.fit(X, y)

# Predict the label
def predict(data):
    predicted_label = model.predict([data])
    return predicted_label"
Develop a Python program to generate random passwords that consist of 8 characters.  Not applicable,"import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(8))

password = generate_password()
print(password)"
Generate a list using a while loop in Python and appends the current number to the list.  ,"my_list = []

num = 0

while num < 10:
    my_list.append(num)
    num += 1

print(my_list)"
Write a Python program to query Twitter to get the most recent tweets from a user.  username: @elonmusk,"import tweepy

# Authenticate to Twitter
auth = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")
auth.set_access_token(""ACCESS_TOKEN"", ""ACCESS_TOKEN_SECRET"")
# Create API object
api = tweepy.API(auth)

# Get the most recent tweets from the given user
tweets = api.user_timeline(screen_name=""@elonmusk"")

for tweet in tweets:
 print(tweet.text)"
"Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.  [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]","import numpy as np
import tensorflow as tf

def create_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),
        tf.keras.layers.Dense(1)
    ])

    model.compile(loss='mean_squared_error', 
                  optimizer='adam',
                  metrics=['accuracy'])

    return model
    
if __name__ == ""__main__"":
    model = create_model()

    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])
    predictions = model.predict(input_data)

    print(f""Predicted stock price for the next day is: {predictions[0][0]}"")"
"Create a way to encrypt a message using a key in Python.  message = ""Hello world!""
key = ""secret""","import hashlib

def encrypt(message, key):
    encrypted_msg = """"
    for char in message:
        encrypted_msg += chr(ord(char) + ord(key[0]))
    return encrypted_msg

encrypted_msg = encrypt(message, key)
print(encrypted_msg)"
"Create a function in Python that takes two parameters and prints out the larger of them.  parameter_1 = 7
parameter_2 = 9","def printMax(parameter_1, parameter_2):
    if parameter_1 > parameter_2:
        print(parameter_1)
    else:
      print(parameter_2)"
"Rewrite the following Python code by introducing list comprehensions.  even_numbers = []
for i in range(1,21):
    if i % 2 == 0:
        even_numbers.append(i)","even_numbers = [i for i in range(1, 21) if i % 2 == 0]"
Develop an algorithm in Python to print Fibonacci series up to a given number.  ,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
      
n = int(input(""Enter a number: ""))
print(fibonacci(n))"
"Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle  board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]","def solve_sudoku(board): 
  
    # Utility function to find vacant cells 
    # Returns a boolean     
    def find_vacant_cell(board, l): 
        for row in range(9): 
            for col in range(9): 
                if board[row][col] == 0: 
                    l[0] = row 
                    l[1] = col 
                    return True
        return False
  
    # Utility function to check if a number  
    # is not currently placed in a particular  
    # row, column and block 
    def is_safe(board, row, col, num): 
  
        # Check if 'num' is not already placed  
        # in current row, current column  
        # and current 3x3 box 
        for i in range(9): 
  
            # Check the rows
            if(board[row][i] == num): 
                return False
  
            # Check the columns 
            if(board[i][col] == num): 
                return False
  
            # Check the 3x3 boxes 
            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): 
                return False
  
        return True
  
    # Solve the sudoku 
    def solve(board): 
        # 'l' is a list variable that keeps 
        # the record of row and col in 
        # find_vacant_cell function 
        l = [0, 0] 
  
        # If there is no unassigned location, 
        # we are done 
        if (not find_vacant_cell(board, l)): 
            return True
  
        # Assigning the list values
        row = l[0] 
        col = l[1] 
  
        # consider digits 1 to 9 
        for num in range(1, 10): 
  
            # if it is a safe position
            if (is_safe(board, row, col, num)): 
  
                # make tentative assignment 
                board[row][col] = num 
  
                # return if succcess
                if (solve(board)): 
                    return True
  
                # failure, unmake and try again 
                board[row][col] = 0
  
        # trigger backtracking 
        return False
  
    #Driver Program 
    if (solve(board)): 
        for row in board: 
            print(row) 
    else: 
        print(""No solution"")"
Write a function in Python to calculate the sum of the digits in a given number.  ,"def sum_digits(num):
    total = 0
    while num > 0:
        digit = num % 10
        total += digit
        num = num // 10
    return total"
"Take the list of people below and create a Python dictionary with the names as keys and the ages as values.  John (20), Jane (40), Alex (18), Peter (45)","people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}"
Develop a Python program to clearly understand the concept of recursion.  ,"# This program is to understand recursion in Python.

# Define a recursive function to calculate the factorial of a number
def factorial(n):
   if n == 1:
      return 1
   else:
      return n * factorial(n - 1)

# Calculate factorial of number 5
result = factorial(5)
print(""Factorial of 5 is "", result) 

# Output: Factorial of 5 is 120"
Generate a random 6-digits number in Python.  ,"import random

number = random.randint(100000, 999999)
print(number)"
"Create a sorting algorithm in Python to sort strings by their length.  [""cat"", ""dog"", ""apple"", ""banana""]","def sort_by_length(strings):
    for i in range(len(strings) - 1):
        for j in range(i + 1, len(strings)):
            if len(strings[i]) > len(strings[j]):
                strings[i], strings[j] = strings[j], strings[i]
    return strings

unsorted_list = [""cat"", ""dog"", ""apple"", ""banana""]

sorted_list = sort_by_length(unsorted_list)

print(sorted_list)"
Write a Python function to get the maximum and minimum values in a given list.  Not applicable,"def get_max_min(lst):
 min_value = lst[0]
 max_value = lst[0]
 
 for i in range(1, len(lst)):
  if lst[i] > max_value:
   max_value = lst[i]
  if lst[i] < min_value:
   min_value = lst[i]
 
 return (min_value, max_value)"
"Create a for loop in Python to iterate over a list of numbers and print only the even numbers.  my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","for num in my_list:
    if num % 2 == 0:
        print(num)"
Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?  ,"myArray = [float(i) for i in range(0,11)]"
Construct a neural network model in Python to classify the MNIST data set correctly.  ,"import keras

# Input layer
input_layer = keras.layers.Input(shape=(784,))

# Hidden layer
hidden_layer = keras.layers.Dense(128, 
                activation='relu')(input_layer)

# Output layer
output_layer = keras.layers.Dense(10, 
                activation='softmax')(hidden_layer)

# Model
model = keras.Model(inputs=input_layer, outputs=output_layer)

# Compile model
model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])"
Create a machine learning classifier in Python for categorizing user input.  ,"from sklearn.naive_bayes import MultinomialNB 

# Assuming an input string is passed to the function as a parameter

def classify_string(input_string):

  # Feature extraction and transformation from string to numeric
  features = . . .

  # Create an instance of the classifier 
  model = MultinomialNB()

  # Train the classifier on the data
  model.fit(data, target)

  # Make a prediction based on the input
  prediction = model.predict([features])

  # Return the prediction
  return prediction"
"Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.  A = [3, 6, 8, 10, 11]
B = [2, 5, 7, 12]","def merge_sort(A, B):
 result = [] 
 i, j = 0, 0

# Compare elements and add lower one to result
while i < len(A) and j < len(B):
 if A[i] < B[j]:
 result.append(A[i])
 i += 1
 else:
 result.append(B[j])
 j += 1

# Add remaining elements
result += A[i:]
result += B[j:]

return result

#Test the algorithm
A = [3, 6, 8, 10, 11]
B = [2, 5, 7, 12]

print(merge_sort(A, B))
# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]"
"Develop a program in Python for finding the longest common subsequence between two strings.  ""ABCDF"", ""ABECD""","def longest_common_subsequence(string1, string2):
    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]

    for i, x in enumerate(string1):
        for j, y in enumerate(string2):
            if x == y:
                table[i+1][j+1] = table[i][j]+1
            else:
                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])

    result = """"
    x, y = len(string1), len(string2)
    while x != 0 and y != 0:
        if table[x][y] == table[x-1][y]:
            x -= 1
        elif table[x][y] == table[x][y-1]:
            y -= 1
        else:
            result = string1[x-1] + result
            x -= 1
            y -= 1
    return result

result = longest_common_subsequence(""ABCDF"", ""ABECD"")
print(result)"
"Convert a given Python program to a C# program.  def power(x, y):
    if y == 0:
        return 1
    else:
        return x * power(x, y - 1)","public int Power(int x, int y)
{
    if (y == 0)
    {
        return 1;
    }
    else
    {
        return x * Power(x, y - 1);
    }
}"
"Rewrite the following code in a different programming language.  // JavaScript code
let arr = [1, 2, 3, 4, 5];

arr.forEach(item => {
 console.log(item * 2);
});","# Python code
arr = [1, 2, 3, 4, 5]

for item in arr:
 print(item * 2)"
Create a TicTacToe game in Python.  ,"class TicTacToe:

def __init__(self):
    self.board = [['_' for _ in range(3)] 
                   for _ in range(3)]
    self.turn = 'x'
    
def display(self):
    for row in self.board:
        print(' '.join(row))

def check_win(self):
    board = self.board

    # check if the player with the current turn has a row of three
    for row in self.board:
        if row.count(self.turn) == 3:
            return True
        
    # check if the player with the current turn has a column of three
    for col in range(3):
        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:
            return True
        
    # check for the two diagonals
    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:
        return True
    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:
        return True
    return False"
"Create a Python program to store the strings ""Hello"" and ""World"" and print them in the same line.  ","string1 = ""Hello""
string2 = ""World""

print(string1 + "" "" + string2)"
"Use the inputs provided, write Python code to check if two integers are equal.  First Integer: 10
Second Integer: 10","if int(10) == int(10):
    print(""The two integers are equal"")
else:
    print(""The two integers are not equal"")"
"Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.  Not applicable","import nltk
from nltk.tokenize import sent_tokenize
from nltk.classify import NaiveBayesClassifier

def analyze_sentiment(text):
    sents = sent_tokenize(text)
    neg = 0
    pos = 0
    for sentence in sents:
        sentiment_analysis = NaiveBayesClassifier.classify(sentence)
        if sentiment_analysis == 'neg':
            neg += 1
        if sentiment_analysis == 'pos':
            pos += 1
    
    if neg > pos:
        sentiment = 'negative'
    elif pos > neg:
        sentiment = 'positive'
    else:
        sentiment = 'neutral'
    
    return sentiment

# End analyze sentiment definition"
Create a Python program to calculate the average of five numbers entered by a user.  ,"nums = []
for i in range(5):
    nums.append(int(input(""Please enter number: "")))

#Calculate average
average = sum(nums) / len(nums)

#Print average
print(""The average is "", average)"
"Write a Python program to generate a Markov chain given a text input.  Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'","import random

def generateMarkov(text):
  words = text.split(' ')
  markovChain = {}

  for i in range(len(words) - 2):
    current = words[i]
    next = words[i + 1]
    if current in markovChain:
      if next in markovChain[current]:
        markovChain[current][next] += 1
      else:
        markovChain[current][next] = 1
    else:
      markovChain[current] = {next: 1}

  generatedText = """"
  current = random.choice(list(markovChain))
  generatedText += current

  for i in range(100):
    choices = markovChain[current]
    choices = [
      key for key, value in choices.items()
      for i in range(value)
    ]
    try:
      current = random.choice(choices)
      generatedText += "" "" + current
    except:
      break

  return generatedText

text = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'

print(generateMarkov(text))"
Write a Python program to determine if a number provided by the user is prime or not.  17,"# Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
 break

# Output result
if is_prime:
 print(f'{num} is a prime number.')
else:
 print(f'{num} is not a prime number.')"
"Write a Python program to calculate the difference between the lowest and highest value for an array of integers.  [12, 24, 3, 8, -1]","def diffHighestLowest(arr):
    lowest = min(arr)
    highest = max(arr)
    return highest - lowest

arr = [12, 24, 3, 8, -1]
difference = diffHighestLowest(arr)
print(difference)  # 25"
Rewrite the following code snippet to find prime numbers using Python.  Not applicable,"def is_prime(num):
    # Iterate from 2 to the square root of the number
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

# Iterate from 2 to n
for n in range(2, n+1):
    # Check if the number is prime
    if is_prime(n):
        print(n)"
Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.  ,"d = {}

for i in range(1, 16):
    d[i] = i**2

print(d)"
Write a Python program to calculate the sum of all even numbers less than or equal to n.  ,"def sum_of_even_numbers(n):
 result = 0
 for i in range(2, n+1, 2):
 result += i
 return result"
Create a Python script to calculate the Fibonacci numbers up to a given number.  ,"def Fibonacci(n): 
	if n==0: 
		return 0
	if n==1: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2)"
"Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.  [ 
 {""name"": ""widget"", ""price"": 10, ""quantity"": 5 },
 {""name"": ""thingy"", ""price"": 7, ""quantity"": 3 },
 {""name"": ""doodad"", ""price"": 5, ""quantity"": 2 },
]
Shipping cost: 7.50
Tax rate: 9.5%","items = [
 {""name"": ""widget"", ""price"": 10, ""quantity"": 5 },
 {""name"": ""thingy"", ""price"": 7, ""quantity"": 3 },
 {""name"": ""doodad"", ""price"": 5, ""quantity"": 2 },
]

taxRate = 0.095
shippingCost = 7.50

totalCost = 0

for item in items:
 totalCost += item['price'] * item['quantity']

totalCost += totalCost * taxRate
totalCost += shippingCost

print('Total cost:', totalCost)"
"In Python, create a function to find the maximum value within a nested dictionary.  sample_dict = {
    ""key1"": {
        ""value1"": 10,
        ""value2"": 20
    },
    ""key2"": {
        ""value3"": 40
    },
}","def findMaxValue(dict):
    max_val = None
    for key, value in dict.items():
        if isinstance(value, dict):
            max_val = max(findMaxValue(value), max_val)
        else:
            max_val = max(value, max_val)
    return max_val

print(findMaxValue(sample_dict))"
Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.  ,"from datetime import datetime

def get_date_time():
    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)
    return dt

date_time = get_date_time()
print(date_time) # will output 2021-03-07 17:30:00"
Generate a Python program to perform matrix multiplication on two given matrices.  ,"def matrix_multiplication(A, B):  
    rows_A = len(A)  
    cols_A = len(A[0])  
    rows_B = len(B)  
    cols_B = len(B[0])  
    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  
    for i in range(rows_A): 
        for j in range(cols_B): 
            for k in range(cols_A): 
                result[i][j] += A[i][k] * B[k][j] 
    return result"
"Write a Python script to read an array from the user and then determine the mean and median of the array.  arr = [10, 15, 20, 25, 30, 35]","def mean_median(arr): 
      arr_sum = 0 
      for i in range(len(arr)): 
            arr_sum += arr[i] 
      
      mean = arr_sum/len(arr) 
    
      arr = sorted(arr) 
      if len(arr) % 2 != 0: 
            median = arr[floor(len(arr)/2)] 
      else: 
            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2
      
      return mean, median

mean, median = mean_median(arr) 
print(""Mean ="", mean) 
print(""Median ="", median)"
"Create an algorithm in Python to check whether an array has even or odd number of elements.  [1, 2, 3, 4]","def is_array_even(arr): 
  if len(arr)%2 == 0:
    return True
  else:
    return False"
"Implement a Python function to calculate the Gini coefficient of a given dataset.  [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]","def gini(x):
    """"""Calculate Gini Coefficient of a given dataset.""""""
    # calculate the frequency of each item in x
    x_value_counts = x.value_counts().sort_index() 

    # calculate the cumulative sum of x_value_counts
    x_cum_sum = x_value_counts.cumsum()

    # calculate the Lorenz values
    n = len(x)
    lorenz = x_cum_sum / n
    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array

    # calculate the Gini Coefficient
    width = lorenz[:-1] - lorenz[1:]
    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))

    return gini_coef

if __name__ == '__main__':
    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])
    gini_coef = gini(x)
    print(gini_coef) # should print 0.605"
Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.  Not applicable,"import tensorflow as tf

# Import MNIST data
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets(""/tmp/data"", one_hot=True)

# Parameters
learning_rate = 0.001
training_epochs = 15
batch_size = 100
display_step = 1

# Network Parameters
n_hidden_1 = 256 # 1st layer number of neurons
n_hidden_2 = 256 # 2nd layer number of neurons
n_input = 784 # MNIST data input (img shape: 28*28)
n_classes = 10 # MNIST total classes (0-9 digits)

# tf Graph input
X = tf.placeholder(""float"", [None, n_input])
Y = tf.placeholder(""float"", [None, n_classes])

# Store layers weight & bias
weights = {
    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),
    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))
}
biases = {
    'b1': tf.Variable(tf.random_normal([n_hidden_1])),
    'b2': tf.Variable(tf.random_normal([n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_classes]))
}


# Create model
def multilayer_perceptron(x):
    # Hidden fully connected layer with 256 neurons
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    # Hidden fully connected layer with 256 neurons
    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    # Output fully connected layer with a neuron for each class
    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
    return out_layer

# Construct model
logits = multilayer_perceptron(X)

# Define loss and optimizer
loss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
    logits=logits, labels=Y))
optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)
train_op = optimizer.minimize(loss_op)

# Initializing the variables
init = tf.global_variables_initializer()

# Train model
model = tf.Session()
model.run(init)

# Training cycle
for epoch in range(training_epochs):
    avg_cost = 0.
    total_batch = int(mnist.train.num_examples/batch_size)
    # Loop over all batches
    for i in range(total_batch):
        batch_x, batch_y = mnist.train.next_batch(batch_size)
        # Run optimization op (backprop) and cost op (to get loss value)
        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,
                                                        Y: batch_y})
        # Compute average loss
        avg_cost += c / total_batch
    # Display logs per epoch step
    if epoch % display_step == 0:
        print(""Epoch:"", '%04d' % (epoch+1), ""cost="", \
            ""{:.9f}"".format(avg_cost))
print(""Optimization Finished!"")

# Test model
pred = tf.nn.softmax(logits)  # Apply softmax to logits
correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))
# Calculate accuracy
accuracy = tf.reduce_mean(tf.cast(correct_prediction, ""float""))
print(""Accuracy:"", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))"
Write a function to generate a prime number sequence using Python.  ,"def generate_prime_numbers(n): 
        primes = [True for i in range(n+ 1)] 
        p = 2
        while (p * p <= n): 
            if (primes[p] == True): 
                for i in range(p * p, n + 1, p): 
                    primes[i] = False
            p += 1
        primes[0] = False
        primes[1] = False
        for p in range(n + 1): 
            if primes[p]: 
                print(p)"
"Write a Python program that removes duplicates from a list.  Input List: [1, 2, 3, 4, 3, 2, 1]","def remove_duplicates(my_list):
 return list(dict.fromkeys(my_list))

my_list = [1, 2, 3, 4, 3, 2, 1]

print(remove_duplicates(my_list)) # output [1, 2, 3, 4]"
"Generate a Python script to sort the given list of words.  ['bubble', 'selection', 'quicksort', 'insertion']","# function to sort the given list of words
def sort_words(words):
    # sort the list of words in alphabetical order
    words.sort()

    # print the sorted list of words
    print(words)

# driver code
words = ['bubble', 'selection', 'quicksort', 'insertion']
sort_words(words)

# output
['bubble', 'insertion', 'quicksort', 'selection']"
Generate a function for calculating the average of a list of numbers in Python.  Not applicable,"def avg_list(lst):
 sum = 0
 count = 0
 for i in lst:
  sum += i
  count += 1
 avg = sum / count
 return avg"
Generate a Python program that compares two binary trees to check if they are similar.  ,"class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def are_similar(root1, root2):
    if root1 is None and root2 is None:
        return True
    if (root1 and root2) is None or (root1 or root2) is None:
        return False
    if root1.val != root2.val:
        return False
    else:
        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)"
Create a program for solving a quadratic equation in Python.  Equation: x2 + 3x - 4 = 0,"import math
  
def solveQuadratic(a, b, c): 
    discriminant = (b**2) - (4*a*c);
    
    # If discriminant is negative there are no real roots.
    if (discriminant < 0): 
        return {
            ""status"": false,
            ""roots"": []
        }
    # If discriminant is zero, there is only one real roots.
    elif (discriminant == 0):
        x = -b/(2*a)
        return {
            ""status"": true,
            ""roots"": [x]
        }
    # Otherwise there are 2 real roots 
    else:
        x1 = (-b + math.sqrt(discriminant)) / (2*a); 
        x2 = (-b - math.sqrt(discriminant)) / (2*a); 
        return {
            ""status"": true,
            ""roots"": [x1, x2]
        }

a = 1
b = 3
c = -4

print(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}"
Construct a Python code for adding two matrices.  ,"def add_matrix(matrix1, matrix2):
    if len(matrix1) != len(matrix2):
        return 'Matrices not compatible'
    if len(matrix1[0]) != len(matrix2[0]):
        return 'Matrices not compatible'
    
    rows = len(matrix1)
    cols = len(matrix1[0])
    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]
    
    return result"
Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.  ,"def substring_in_order(string): 
    result = [] 
    n = len(string) 
    for l in range(n, 0, -1): 
        for i in range(n-l + 1): 
            result.append(string[i:i+l]) 
    return result 

string = input(""Enter the string: "") 
print (""All substrings in order from longest to shortest:"") 
print (substring_in_order(string))"
"Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.  arr = [2, 5, 9, 15], x = 5","def find_index(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

print(find_index(arr, x))"
"Develop a Python program to find the common elements in two lists.  List 1: [3, 9, 15, 21, 27]
List 2: [21, 7, 13, 29, 31]","common_elements = [] 
  
# using loop 
for i in [3, 9, 15, 21, 27]:  
    for j in [21, 7, 13, 29, 31]:  
        if i == j: 
            common_elements.append(i) 
  
# printing common elements 
print(common_elements) 
# Output: [21]"
"Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.  s1 = ""abcd"", s2 = ""bae""","def num_common_substrings(s1, s2):
    count = 0
    for i in range(len(s1)):
        for j in range(len(s2)):
            if s1[i] == s2[j]:
                count += 1
    return count

result = num_common_substrings(""abcd"", ""bae"")
print(result)"
Generate a Python program to convert a string to its lowercase version.  ,"def str_to_lower(string):
    new_string = """"

    for char in string:
        new_string += char.lower()

    return new_string"
Can you generate a function in Python that shuffles a given list?  ,"import random

def shuffle_list(list): 
    # Initialize the random number generator
    random.seed()

    # Shuffle the list
    random.shuffle(list) 

    # Return the list
    return list"
"Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.  mail_list = [""example.user@gmail.com"", ""bad@example""]","def validate_mail_list(mail_list):
    for mail in mail_list:
        if not re.match(""[^@]+@[^@]+\.[^@]+"", mail):
            return False
    return True"
"Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.  int1 = 10
int2 = 5","int1 = 10
int2 = 5

addition = int1 + int2
print('Addition:', addition)

subtraction = int1 - int2
print('Subtraction:', subtraction)

multiplication = int1 * int2
print('Multiplication:', multiplication)

division = int1 / int2
print('Division:', division)

modulo = int1 % int2
print('Modulo:', modulo)"
Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.  Not applicable,"import numpy as np
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer 
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Read in the data
data = pd.read_csv('reviews.csv')

# Tokenise the texts
data['tokenised'] = data['review'].apply(word_tokenize)

# Remove stopwords
stop_words = set(stopwords.words('english'))
data['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])

# Normalize words
wordnet_lemmatizer = WordNetLemmatizer()
data['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])

# Generate features using CountVectorizer
cv = CountVectorizer()
data['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()

# Split into training and test sets
X = data['features']
y = data['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = MultinomialNB(alpha=0.1)
model.fit(X_train, y_train)

# Predict using the test set
predictions = model.predict(X_test)

# Generate a classification report
report = classification_report(y_test, predictions)
print(report)"
"Write a python program to clean up a list of emails and put them into a new list.  The original list of emails:
['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']","original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']

clean_list = []

for email in original_list:
 email_without_plus = email.split('+')[0]
 email_without_dot_uk = email_without_plus.split('.uk')[0]
 clean_list.append(email_without_dot_uk)

print(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']"
"Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.  Not applicable","from faker import Faker

fake = Faker()
for _ in range(10):
 print(fake.name(), fake.email(), fake.random_int(min=18, max=60))"
Create a Python algorithm to classify positive and negative sentiment in tweets.  ,"def sentiment_analysis(tweets):
    # Initialize a list to store the result 
    results = [] 

    # Iterate through each tweet
    for tweet in tweets:
        # Clean the tweet 
        tweet = preprocessing(tweet)

        # Vectorize the tweet and obtain the prediction 
        tweet_vector = vectorize(tweet)
        prediction = predict_sentiment(tweet_vector)

        # Append the prediction to the result list
        if prediction == 1:
            results.append(""Positive"")
        elif preduction == 0:
            results.append(""Negative"")

    return results"
"Parse the given URL and print out the protocol, domain name, and path using Python.  https://www.example.com/path/to/file","import urllib.parse

url = 'https://www.example.com/path/to/file'
parsed_url = urllib.parse.urlparse(url)

# Get the protocol
protocol = parsed_url.scheme

# Get the domain name
domain_name = parsed_url.netloc

# Get the path
path = parsed_url.path

# Print the results
print('Protocol:', protocol)
print('Domain name:', domain_name)
print('Path:', path)

# Output:
# Protocol: https
# Domain name: www.example.com
# Path: /path/to/file"
Write a recursive Python function to generate Fibonacci numbers.  ,"def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
 
print(fibonacci(10))"
Create a Kubernetes pod setup that publishes a tweet every 5 minutes.  Not applicable,"apiVersion: v1
kind: Pod
metadata:
  name: tweet-publisher
spec:
  containers:
    - name: tweet-publisher
      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>
      command:
        - sh
        - -c
        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo ""*/5 * * * * python publish-tweet.py""; } | crontab -; sleep 31622400; done'
      volumeMounts:
        - mountPath: /crontab/crontab
          subPath: crontab
          name: cronmount
  volumes:
    - name: cronmount
      configMap:
        name: tweet-cron
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tweet-cron
data:
  crontab: ""* * * * * python publish-tweet.py"""
"Write a code to generate a two-dimensional array with zeros shapes in Python  Row = 3, Column = 3","""""""
Write a code to generate a two-dimensional array with zeros shapes in Python
""""""

def generate_zeros_array(row,col):
    return [[0] * col for _ in range(row)]

# Example
row = 3
col = 3

array = generate_zeros_array(row, col)
print(array)
# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
"Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.  numbers = [1, 2, 3, 4, 5]","numbers = [1, 2, 3, 4, 5] 

dict_numbers = {num: num**2 for num in numbers}
print(dict_numbers)"
"Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print ""Fizz"" instead of the number, for multiples of 5 print ""Buzz"" instead of the number and for multiples of both 3 and 5 print ""FizzBuzz"".  Not applicable","for i in range(1, 51):
    if i % 3 == 0 and i % 5 == 0:
        print(""FizzBuzz"")
    elif i % 3 == 0:
        print(""Fizz"")
    elif i % 5 == 0:
        print(""Buzz"")
    else:
        print(i)"
Create a Python program to calculate the square root of a user-defined positive number.  n = 100,"import math

n = 100

#Calculate the square root of a number
square_root = math.sqrt(n)

print(f'Square root of {n} is {square_root}')"
Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.  ,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width"
Create a data visualization dashboard in Python using Matplotlib.  ,"import matplotlib
import matplotlib.pyplot as plt

# Generate the data for the dashboard
x = [1,2,3,4,5]
y = [10,25,30,50,80]

# Create the figure and set the size
fig = plt.figure(figsize=(10,6))

# Configure the plot
plt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)
plt.title(""My Data Visualization Dashboard"")
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Show the plot
plt.show()"
Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.  ,"# Calculate area of a circle

Pi = 3.14

# Get radius from user
radius = float(input(""Please enter the radius of the circle: ""))

# Calculate the circle area
area = Pi*radius**2

# Print the area
print(""The area of the circle is:"", area)"
Create a Python algorithm to identify the longest word in a sentence.  “The rain in Spain stays mainly in the plain.”,"def find_longest_word(sentence):
    words = sentence.split()
    # initialise longest_word variable with 0
    longest_word = 0
    for word in words:
        if len(word) > longest_word:
            longest_word = len(word)
            longest_word_str = word
    return longest_word_str"
Write a Python script that can convert degrees Fahrenheit to degrees Celsius.  ,"def FahrenheitToCelsius(temp_fahrenheit):
    temp_celsius = (temp_fahrenheit - 32) * 5/9
    return temp_celsius"
Generate a Python function that checks if a given number is an Armstrong number.  ,"def is_armstrong_number(num):   
    n = len(str(num)) 
    # initialize sum  
    temp = num  
    sum_of_digits = 0
  
    # find sum of nth power of individual digits  
    while temp > 0:  
        digit = temp % 10  
        sum_of_digits += digit ** n  
        temp //= 10  
  
    # if num is equal to sum_of_digits then the number is an Armstrong number  
    if num == sum_of_digits:  
        return True 
  
    else: 
        return False"
Write a code in Python to print the following pattern:  ,"for i in range(5):
    for j in range(i+1):
        print(""*"", end="""")
    print("""")

for i in range(5, 0, -1):
    for j in range(i):
        print(""*"", end="""")
    print("""")"
"Program a web scraper in Python to extract the latest stock prices from specific websites.  [""AAPL stocks"", ""MSFT stocks"", ""FB stocks"", ""GOOG stocks""]","import requests
from bs4 import BeautifulSoup

# input
stocks = [""AAPL stocks"", ""MSFT stocks"", ""FB stocks"", ""GOOG stocks""]

# process
def get_stock_price(stock):
    url = f""https://finance.yahoo.com/quote/{stock}""
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text
    return price

# output
for stock in stocks:
    price = get_stock_price(stock)
    print(f'The price of {stock} is {price}.')"
"The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.  ","""""""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
Original C++ source file: libsvm_ops.cc
""""""

import collections as _collections
import six as _six

from tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow
from tensorflow.python.eager import context as _context
from tensorflow.python.eager import core as _core
from tensorflow.python.eager import execute as _execute
from tensorflow.python.framework import dtypes as _dtypes
from tensorflow.python.framework import errors as _errors
from tensorflow.python.framework import tensor_shape as _tensor_shape

from tensorflow.core.framework import op_def_pb2 as _op_def_pb2
# Needed to trigger the call to _set_call_cpp_shape_fn.
from tensorflow.python.framework import common_shapes as _common_shapes
from tensorflow.python.framework import op_def_registry as _op_def_registry
from tensorflow.python.framework import ops as _ops
from tensorflow.python.framework import op_def_library as _op_def_library
from tensorflow.python.util.tf_export import tf_export


_decode_libsvm_outputs = [""label"", ""feature_indices"", ""feature_values"",
                         ""feature_shape""]
_DecodeLibsvmOutput = _collections.namedtuple(
    ""DecodeLibsvm"", _decode_libsvm_outputs)


@tf_export('decode_libsvm')
def decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):
  r""""""Convert LibSVM input to tensors. The output consists of

  a label and a feature tensor. The shape of the label tensor
  is the same as input and the shape of the feature tensor is
  `[input_shape, num_features]`.

  Args:
    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.
    num_features: An `int` that is `>= 1`. The number of features.
    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.
    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).

    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.
    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].
    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].
    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].
  """"""
  _ctx = _context._context
  if _ctx is None or not _ctx._eager_context.is_eager:
    num_features = _execute.make_int(num_features, ""num_features"")
    if dtype is None:
      dtype = _dtypes.float32
    dtype = _execute.make_type(dtype, ""dtype"")
    if label_dtype is None:
      label_dtype = _dtypes.int64
    label_dtype = _execute.make_type(label_dtype, ""label_dtype"")
    _, _, _op = _op_def_lib._apply_op_helper(
        ""DecodeLibsvm"", input=input, num_features=num_features, dtype=dtype,
        label_dtype=label_dtype, name=name)
    _result = _op.outputs[:]
    _inputs_flat = _op.inputs
    _attrs = (""dtype"", _op.get_attr(""dtype""), ""label_dtype"",
              _op.get_attr(""label_dtype""), ""num_features"",
              _op.get_attr(""num_features""))
    _execute.record_gradient(
      ""DecodeLibsvm"", _inputs_flat, _attrs, _result, name)
    _result = _DecodeLibsvmOutput._make(_result)
    return _result

  else:
    try:
      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(
        _ctx._context_handle, _ctx._eager_context.device_name, ""DecodeLibsvm"",
        name, _ctx._post_execution_callbacks, input, ""dtype"", dtype,
        ""label_dtype"", label_dtype, ""num_features"", num_features)
      _result = _DecodeLibsvmOutput._make(_result)
      return _result
    except _core._FallbackException:
      return decode_libsvm_eager_fallback(
          input, dtype=dtype, label_dtype=label_dtype,
          num_features=num_features, name=name, ctx=_ctx)
    except _core._NotOkStatusException as e:
      if name is not None:
        message = e.message + "" name: "" + name
      else:
        message = e.message
      _six.raise_from(_core._status_to_exception(e.code, message), None)


def decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):
  r""""""This is the slowpath function for Eager mode.
  This is for function decode_libsvm
  """"""
  _ctx = ctx if ctx else _context.context()
  num_features = _execute.make_int(num_features, ""num_features"")
  if dtype is None:
    dtype = _dtypes.float32
  dtype = _execute.make_type(dtype, ""dtype"")
  if label_dtype is None:
    label_dtype = _dtypes.int64
  label_dtype = _execute.make_type(label_dtype, ""label_dtype"")
  input = _ops.convert_to_tensor(input, _dtypes.string)
  _inputs_flat = [input]
  _attrs = (""dtype"", dtype, ""label_dtype"", label_dtype, ""num_features"",
  num_features)
  _result = _execute.execute(b""DecodeLibsvm"", 4, inputs=_inputs_flat,
                             attrs=_attrs, ctx=_ctx, name=name)
  _execute.record_gradient(
      ""DecodeLibsvm"", _inputs_flat, _attrs, _result, name)
  _result = _DecodeLibsvmOutput._make(_result)
  return _result

_ops.RegisterShape(""DecodeLibsvm"")(None)

def _InitOpDefLibrary(op_list_proto_bytes):
  op_list = _op_def_pb2.OpList()
  op_list.ParseFromString(op_list_proto_bytes)
  _op_def_registry.register_op_list(op_list)
  op_def_lib = _op_def_library.OpDefLibrary()
  op_def_lib.add_op_list(op_list)
  return op_def_lib
# op {
#   name: ""DecodeLibsvm""
#   input_arg {
#     name: ""input""
#     type: DT_STRING
#   }
#   output_arg {
#     name: ""label""
#     type_attr: ""label_dtype""
#   }
#   output_arg {
#     name: ""feature_indices""
#     type: DT_INT64
#   }
#   output_arg {
#     name: ""feature_values""
#     type_attr: ""dtype""
#   }
#   output_arg {
#     name: ""feature_shape""
#     type: DT_INT64
#   }
#   attr {
#     name: ""dtype""
#     type: ""type""
#     default_value {
#       type: DT_FLOAT
#     }
#     allowed_values {
#       list {
#         type: DT_FLOAT
#         type: DT_DOUBLE
#         type: DT_INT32
#         type: DT_INT64
#       }
#     }
#   }
#   attr {
#     name: ""label_dtype""
#     type: ""type""
#     default_value {
#       type: DT_INT64
#     }
#     allowed_values {
#       list {
#         type: DT_FLOAT
#         type: DT_DOUBLE
#         type: DT_INT32
#         type: DT_INT64
#       }
#     }
#   }
#   attr {
#     name: ""num_features""
#     type: ""int""
#     has_minimum: true
#     minimum: 1
#   }
# }
_op_def_lib = _InitOpDefLibrary(b""\n\311\001\n\014DecodeLibsvm\022\t\n\005input\030\007\032\024\n\005label\""\013label_dtype\032\023\n\017feature_indices\030\t\032\027\n\016feature_values\""\005dtype\032\021\n\rfeature_shape\030\t\""\033\n\005dtype\022\004type\032\0020\001:\010\n\0062\004\001\002\003\t\""!\n\013label_dtype\022\004type\032\0020\t:\010\n\0062\004\001\002\003\t\""\027\n\014num_features\022\003int(\0010\001"")
"
"Write a Python program to compute the sum of the values of a given dictionary  dictionary = {'A':5, 'B':6, 'C':10}","def dict_sum(dict):
    sum = 0
    for key, value in dict.items():
        sum += value
    return sum"
Create a REST API in Python that can be used to delete an item from a list.  Not applicable,"from flask import Flask, request
import json

app = Flask(__name__)
items = [""Apple"", ""Banana"", ""Orange""]

@app.route('/items', methods=[""GET""])
def get_items():
 return json.dumps(items)

@app.route('/items/<item>', methods=[""DELETE""])
def delete_item(item):
 if item in items:
  items.remove(item)
  message = ""Item successfully deleted.""
 else:
  message = ""Item not found.""
 return json.dumps({""message"": message})"
"Read a given list of strings and create a new list of all strings that are longer than 5 characters long.  ['Python', 'is', 'Fun']","def filter_long_strings(string_list):
 long_strings = []
 for string in string_list:
 if len(string) > 5:
 long_strings.append(string)
 return long_strings

string_list = ['Python', 'is', 'Fun']

long_strings = filter_long_strings(string_list)
print(long_strings)"
"Craft an algorithm in Python to move all zeroes in a list to the end of the list.  [3, 0, 1, 0, 5, 0, 2]","def move_zeroes(lst):
    # Count the number of non-zero elements
    num_non_zeroes = 0
    for num in lst:
        if num != 0:
            num_non_zeroes += 1
  
    # Initialize the new list
    new_lst = []
  
    # Move all non-zeroes to the beginning of the new list
    for i in range(num_non_zeroes):
        new_lst.append(lst[i])
  
    # Append 0's to the end
    for _ in range(len(lst)-num_non_zeroes):
        new_lst.append(0)
  
    # Return the new list
    return new_lst

lst = [3, 0, 1, 0, 5, 0, 2]
result = move_zeroes(lst)
print(result)"
Create a Python program to implement the Fibonacci sequence.  ,"def fibonacci_seq(n): 
    if n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return fibonacci_seq(n-1)+fibonacci_seq(n-2)"
Write a function in Python to print out an array backwards.  ,"def print_reverse_array(arr):
 for i in range(len(arr)-1, -1, -1): 
  print(arr[i])"
Create a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm.  ,"def sieve_eratosthenes(n): 
    prime_list = [True] * (n+1) 
    prime_list[0] = False
    prime_list[1] = False
    primes = [] 
      
    for i in range(2, n+1): 
        if prime_list[i] == True: 
            primes.append(i) 
            for j in range(i*i, n+1, i): 
                prime_list[j] = False
    return primes 
  
n = 100
print(""The Prime numbers from 1 to 100 are:"")
print(sieve_eratosthenes(n))"
"Create a Python function named ""Transpile"" that takes in four arguments: ""src_dir"", ""dst_dir"", ""model_filename"", and ""params_filename"". Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the ""src_dir"", ""exe"", ""model_filename"", and ""params_filename"" arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to ""dst_dir"" using fluid.io.save_persistables() and the ""inference_transpiler_program"" and ""params_filename"" arguments. If ""dst_dir"" does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the ""Transpile"" function with the parsed arguments.  ","import os
import sys
import argparse
import paddle.fluid as fluid


def Transpile(src_dir, dst_dir, model_filename, params_filename):
    place = fluid.CPUPlace()
    exe = fluid.Executor(place)

    inference_scope = fluid.core.Scope()
    with fluid.scope_guard(inference_scope):
        print ""Loading inference_program from "", src_dir
        [inference_program, feed_target_names,
         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)

        inference_transpiler_program = inference_program.clone()
        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.
        t = fluid.InferenceTranspiler()
        # Under the with statement, inference_scope is the global scope.
        t.transpile(inference_transpiler_program, place)

        #print inference_transpiler_program

        print ""Saving the optimized inference_program to "", dst_dir
        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.
        if not os.path.isdir(dst_dir):
            os.makedirs(dst_dir)
        model_path = os.path.join(dst_dir, model_filename)
        with open(model_path, ""wb"") as f:
            f.write(inference_transpiler_program.desc.serialize_to_string())
        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--src_dir', help='Source directory of inference model')
    parser.add_argument('--dst_dir', help='Dstination directory of inference model')
    parser.add_argument('--model_filename', default=None, help='The name of model file')
    parser.add_argument('--params_filename', default=None, help='The name of params file')
    args = parser.parse_args()
    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)


if __name__ == '__main__':
    main()
"
"Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.  marks = [87, 56, 99, 54]
mark = 4","def add_marks(marks, mark):
 return [m + mark for m in marks]"
"Design a positive feedback loop for the following python program.  for i in range(10):
    print(""hello"")","for i in range(10):
    print(""hello"")
    i += 1
    if i == 10:
        print(""You've got it!"")"
Implement a function that prints out the numbers from 1 to 50 in python  ,"def print_numbers():
    for i in range(1, 51):
        print(i)

print_numbers()"
"Write a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address.  recipient_emails = [""email1@example.com"",""email2@example.com""]","import smtplib

sender_email = 'example@gmail.com'
password = 'example_password'

for email in recipient_emails:
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.ehlo()
        server.starttls()
        server.login(sender_email, password)

        subject = 'Automated Email from Program'
        message = 'Message body'
 
        server.sendmail(sender_email, email, 'Subject: ' + subject + '\n\n' + message)
        server.quit()
        print('Email sent successfully.')"
Create a Python class which represents a 3D Vector  ,"class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def __str__(self):
        return ""("" + str(self.x) + "", "" + str(self.y) + "", "" + str(self.z) + "")"""
"Given two strings, write a Python program to find the total number of common characters present in both strings  ","def num_common_chars(str1, str2):
    common = 0
    for c in str1:
        if c in str2:
            common += 1
    return common"
"Modify the following Python code to handle errors.  def read_data_from_json(filename):
    with open(filename, 'r') as f:
        data = json.load(f)
    return data","def read_data_from_json(filename):
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        print(""The file specified does not exist."")
    except json.decoder.JSONDecodeError:
        print(""The file specified is not in a valid JSON format."")"
Analyze a given Python code and write a function that checks if a given number is prime.  def primeCheck(num):,"def primeCheck(num):
 if num > 1:
 for i in range(2, num):
  if (num % i) == 0:
   return False
 else:
  return False
 return True"
"Create a python program to filter out all the even numbers from a given list.  [3, 4, 5, 6, 7]","def filter_even_numbers(numbers):
    even_numbers = []
    for i in numbers:
        if i % 2 == 0:
            even_numbers.append(i)
    return even_numbers
    
    
filtered = filter_even_numbers([3, 4, 5, 6, 7])
print(filtered)"
"Implement a function in Python that takes a Huffman tree and drop all its leaf nodes.  (1)
      /      \
    (2)      (3)
    / \      / \
  (4) (5)  (6) (7)","def dropLeafNodes(head): 
    
    # If node is not None and doesn't have any children 
    if head and not head.left and not head.right: 
        return None
  
    # Don't change anything if head is None 
    if not head: 
        return None
  
    # Recursively call dropLeafNodes on left and right subtrees
    head.left = dropLeafNodes(head.left) 
    head.right = dropLeafNodes(head.right) 
  
    # Return head of the modified tree
    return head"
Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content.  Not applicable,"import requests
from bs4 import BeautifulSoup
import re

def crawl(url):
 visited = set()
 queue = [url] 
 
 while queue:
 curr = queue.pop(0)
 visited.add(curr) 
 response = requests.get(curr)
 
 if response.ok:
 soup = BeautifulSoup(response.text, 'html.parser')

# scrape the page here 

# find all the links
 links = soup.find_all('a', href=re.compile('^http')) 
 
 for link in links:
 if link['href'] not in visited:
 queue.append(link['href'])"
"Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.  ","def get_stats_for_string(string):
    num_elements = len(string)
    max_element = max(string)
    min_element = min(string)
    mean_element = sum(string) / num_elements
    return (max_element, min_element, mean_element)

string = ""abcdef""
stats_for_string = get_stats_for_string(string)
print(""Max: {0}, Min: {1}, Mean: {2}"".format(*stats_for_string))"
"Write a Python program to calculate the compound interest.  investment_amount = 1000, time = 5, rate_of_interest = 5","def compoundInterest(investment_amount, rate_of_interest, time):
    compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time))
    return compound_interest

ci = compoundInterest(1000, 5, 5)
print(ci)"
Create a command-line application in Python that stores customer data and allows customer to query by customer name  ,"import sys 
  
def print_customer_data(name): 
    # Code for searching customer data by customer name and 
    # printing results 
    ...

# Main function for the customer search application
if __name__==""__main__"": 
    # Get command line arguments 
    args = sys.argv 
    
    if len(args) == 2: 
        name = args[1]
        print_customer_data(name) 
    else: 
        print(""Invalid arguments, please specify a customer name."")"
Develop a program in Python to calculate the Fibonacci sequence.  ,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Code 
print(fibonacci(9))"
"Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.  set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}","def intersection(set1, set2): 
   return set1 & set2

result = intersection(set1, set2) 
print(result)"
"Design an algorithm in Python to find the smallest number in a given list.  [4, 5, 6, 7, 8]","def smallestNumber(nums):
    smallest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] < smallest:
            smallest = nums[i]
    return smallest

nums = [4, 5, 6, 7, 8]
smallestNum = smallestNumber(nums)
print('The smallest number is', smallestNum)"
Generate a python program for printing a Pascal triangle.  Number of rows= 5,"def PascalTriangle(n) : 
      
    # An auxiliary array to store 
    # generated pscal triangle values 
    arr = [0 for i in range(n)] 
      
    # Iterate through every line and 
    # print integer(s) in it 
    for line in range(0, n) : 
          
        # Every line has number of  
        # integers equal to line  
        # number 
        for i in range (0, line + 1) : 
              
            # First and last values  
            # in every row are 1 
            if (i == 0 or i == line) : 
                arr[i] = 1
                  
            # Other values are sum of  
            # values just above and  
            # left of above 
            else : 
                arr[i] = arr[i] + arr[i - 1]  
              
        # Printing array in 
        # mantainence of order          
        for i in range (0, line + 1) : 
            print(arr[i], end ="" "")  
        print()   
  
# Driver Code 
n = 5
PascalTriangle(n)"
"Create a python script that filters out all negative numbers from the given matrix  [[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]]","import numpy as np

def filter_out_negative(matrix):
  # Convert matrix to numpy array
  matrix = np.array(matrix)
  # Find all negative numbers and set them to 0
  matrix[matrix < 0] = 0
  return matrix

result = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])
print(result)"
Create a basic REST API using Python and Flask to list all the countries in the world.  Not applicable,"import flask
from flask import Flask, request, jsonify
import json

app = Flask(name)

@app.route('/countries', methods=['GET'])
def get_countries():
with open('data.json', 'r') as f:
 countries = json.load(f)
 return jsonify(countries)

if name == 'main':
 app.run()"
Create a web scraper in Python that can extract hotel reviews from TripAdvisor.  Not applicable,"import requests
from bs4 import BeautifulSoup

# Define the URL and the headers
url = '<url>'
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'}

# Make a request and get HTML in response
response = requests.get(url, headers=headers)

# Parse HTML
soup = BeautifulSoup(response.text, 'html.parser')

# Find all reviews
reviews = soup.find_all('div', {'class': 'review-container'})

# Go through every review and extract the data
for review in reviews:
    # Get the title
    title = review.find('span', {'class': 'noQuotes'}).text

    # Get the text
    text = review.find('p', {'class': 'partial_entry'}).text

    # Print for demo
    print(title)
    print(text)
    print('-' * 50)"
Develop a machine learning model in Python to identify the author of a given article.  ,"from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import GaussianNB
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split

# load data
samples = [
  ""sample 1 from AuthorA"",
  ""sample 2 from AuthorA"",
  ""sample 1 from AuthorB"",
  ""sample 2 from AuthorB""
]
labels = [
  ""AuthorA"",
  ""AuthorA"",
  ""AuthorB"",
  ""AuthorB""
]

# build the model
model = Pipeline([
  ('tfidf', TfidfVectorizer()),
  ('clf', GaussianNB())
])

# train the model
X_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)
model.fit(X_train, y_train)

# evalulate the model
score = model.score(X_test, y_test)
print(f'model score: {score}')"
"Write a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum.  [2, 3, 4, 5, 6, 7]","def divide_in_two_equal_parts(lst):
    target = sum(lst) // 2
    part1 = []
    part2 = []
    left_sum = 0
    right_sum = 0
    
    for num in lst:
        if left_sum <= right_sum:
            left_sum += num
            part1.append(num)
        else:
            right_sum += num
            part2.append(num)
         
    return part1, part2

part1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7])

print(""Part 1:"", part1)
print(""Part 2:"", part2)"
"Develop an algorithm to detect and fix Python syntax errors in a given code snippet.  def test ():
    x = 5
    y = 3 
    z","def test():
    x = 5
    y = 3
    try:
        z
    except NameError:
        print(""NameError: Name 'z' is not defined"")"
Design a data structure in Python to store integer values.  ,"class IntList:
    def __init__(self):
        self.values = []
   
    def add_value(self, value):
        self.values.append(value)
    
    def find_min(self):
        return min(self.values)"
"Create an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.  Array: [5, 3, 7, 2]
Search value: 7","def linearSearch(arr, value):
  for i in range(len(arr)):
    if arr[i] == value:
      return i  # value found, return index
  return -1  # value not found

arr = [5, 3, 7, 2]
searchValue = 7

result = linearSearch(arr, searchValue)

if result == -1:
  print(""Element not found"")
else:
  print(""Element present at index"", result)"
"Given a list of strings, write a Python function to remove all the whitespaces from each string.  ['Hello  World  ', 'Hi  there', 'Good  Morning']","def remove_whitespace(word_list):
    return [word.strip() for word in word_list]

stripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])
print(stripped_list)"
Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm.  ,"def randomized_list(num_list):
    for i in range(len(num_list)-1,0,-1):
        j = random.randint(0,i)
        num_list[i],num_list[j] = num_list[j],num_list[i]
    return num_list"
"Create a system in Python for generating natural language responses.  A sample utterance ""What time is it?""","from tensorflow.keras.layers import Input, Dense, Embedding, GRU
from tensorflow.keras.models import Model
from tensorflow.keras.utils import plot_model

# Create inputs
inputs1 = Input(shape=(20,))
x1 = Embedding(1000, 64)(inputs1)
x1 = GRU(128)(x1)

# Create outputs
y1 = Dense(1000, activation='softmax')(x1)

# Create model
model = Model(inputs=[inputs1], outputs=[y1])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit([inputs], [outputs],  epochs=10, batch_size=32)

# Generate the response to the sample utterance
query = ""What time is it?""
prediction = model.predict(query)

print(prediction)"
Create a web scraper using Python that collects the title and content from the homepage of a given website.  https://www.example.com as the target website.,"import requests
import bs4

url = 'https://www.example.com'
r = requests.get(url)
html = bs4.BeautifulSoup(r.text,""html.parser"")

# Find title
title = html.find('title')
print(title.text)

# Find content
content = html.find('div', {'class': 'content'})
print(content.text)"
"Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.  2, 3, 4","def find_total_surfacearea(length, breadth, height):
   return (2*(length*breadth + breadth*height + height*length))

print(find_total_surfacearea(2, 3, 4))

Output: 52"
"Generate a Python program to clean a string of HTML tags.  Example Input: ""<p>This is a <b>test</b> string</p>"".","import re

# Clean a string of HTML tags 
def clean_html_tags(str):
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string"
"Generate a Python function that takes an integer array as input and returns the number of unique elements in the array.  [1, 2, 3, 2, 1, 4, 7, 8, 9, 8]","def num_unique_elements(arr):
    unique_arr = set(arr)
    return len(unique_arr)

print(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))"
Create a Python program to scrape an online news website to get the headlines.  ,"import requests
from bs4 import BeautifulSoup 

# url of the website you want to scrape 
url = ""https://www.news.com/"" 

# get the response in the form of html
r = requests.get(url) 

# create a beautifulsoup object to parse contents 
soup = BeautifulSoup(r.content, 'html5lib') 

# find headlines from the parsed page  
headlines = soup.find_all('h2') 

# Print the headlines 
for headline in headlines: 
    print(headline.text)"
"Edit the given Python program to print 'Happy Holidays' 10 times.  for i in range(10):
    print('Hello World')","for i in range(10):
    print('Happy Holidays')"
"Combine 2 strings and reverse the result in Python.  words = ""Hello ""
words2 = ""world!""","words = ""Hello ""
words2 = ""world!""

combined = words + words2
result = combined[::-1]

print(result)"
Create a class to represent a bank account in Python.  ,"class BankAccount:
    
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance
        
    def deposit(self, amount):
        self.balance += amount
    
    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            return True
        else:
            return False
        
    def get_balance(self):
        return self.balance"
"Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.  unsorted_list = [2, 6, 3, 8, 4]","def sort_list(unsorted_list):
    sorted_list = []
    while unsorted_list:
        min_elem = min(unsorted_list)
        unsorted_list.remove(min_elem)
        sorted_list.append(min_elem)
    return sorted_list"
"Design a Python program to perform linear regression for predicting the numbers in a given dataset.  X = [1,2,3,4,5]
Y = [3,5,7,9,13]","import numpy as np
from sklearn.linear_model import LinearRegression

X = np.array([1,2,3,4,5]).reshape(-1,1)
Y = np.array([3,5,7,9,13])

model = LinearRegression()
model.fit(X, Y)

# Predicts the value of y
print(model.predict([[7]]))"
"Create a Python object that contains two attributes, ""Name"" and ""Age"".  ","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person(""John"", 25)"
"Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.  [{""name"": ""Alice"", ""age"": 20}, {""name"": ""Bob"", ""age"": 21}]","def sort_by_attr(objects, attr):
 return sorted(objects, key=lambda item: item[attr])
 
sort_by_attr([{""name"": ""Alice"", ""age"": 20}, {""name"": ""Bob"", ""age"": 21}], ""age"")"
"Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.  Table name: Books
Table columns: id (int), title (string), author (string), genre (string), sales (int)","import sqlite3

# connect to the database
conn = sqlite3.connect('books.db')
c = conn.cursor()

# retrieve the data
c.execute('''SELECT title, author, genre, sales
FROM Books
WHERE genre='Fantasy'
ORDER BY sales DESC
LIMIT 10''')

# save the results
results = c.fetchall()

# generate the HTML code
html = '<table>'
html += '<tr><th>Title</th><th>Author</th><th>Genre</th><th>Sales</th></tr>'

for result in results:
 title = result[0]
 author = result[1]
 genre = result[2]
 sales = result[3]

 html += f'<tr><td>{title}</td><td>{author}</td><td>{genre}</td><td>{sales}</td></tr>'

html += '</table>'

# display the results
print(html)"
Create a Python script to filter out all the vowels from a string.  ,"def filter_vowels(string):
     vowels = ('a', 'e', 'i', 'o', 'u')
     return ''.join(c for c in string if c not in vowels)"
"In Python, write a script to sort the list items in descending order.  list_items = [3, 7, 5, 8, 10]","list_items = [3, 7, 5, 8, 10]

list_items.sort(reverse=True)

print(list_items) # Output: [10, 8, 7, 5, 3]"
Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.  A quick brown fox jumps over the lazy dog,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)"
Create an object-oriented structure to solve a maze by using python.  ,"import collections

class Maze:
    def __init__(self, n, m):
        self._n, self._m = n, m
        self._grid = [[None] * m for _ in range(n)]

    def solve_maze(self):
        result, found = [], False
        start, end = (0, 0), (self._n-1, self._m-1)

        for i in range(self._n):
            for j in range(self._m):
                if self._grid[i][j] == 1:
                    value = 0
                    self._find_omega(i, j, value, result, start, end,
                                     found)
                    return result

    def _find_omega(self, i, j, value,
                    result, start, end, found):
        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]

        if (i, j) == end:
            found = True
            result.append(value)
            return

        if found == True:
            return

        self._grid[i][j] = 0
        for k in range(4):
            if self._on_board(i + rowNbr[k], j + colNbr[k]):
                self._find_omega(i + rowNbr[k], j + colNbr[k],
                                 value + 1, result,
                                 start, end, found)

    def _on_board(self, i, j):
        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1"
"Compose a piece of code to print the length of a given string.  ""Python""","string = ""Python""
print(""Length of the given string is:"", len(string))"
"Compose a Python program to calculate the maximum possible revenue from the items with given weights and values.  weights = [2, 1, 3], values = [4, 2, 3]","""""""
Calculate the maximum possible revenue from the items with given weights and values
""""""

# given  weights and values 
weights = [2, 1, 3] 
values = [4, 2, 3] 

# number of items 
n = len(weights) 
  
# function to calculate the maximum revenue 
def knapsack(weights, values, n): 
  
    # total capacity of knapsack 
    W = 5
  
    # matrix to store solution matrix 
    K = [[0 for x in range(W+1)] for x in range(n+1)] 
  
    # build the solution matrix in bottom up manner 
    for i in range(n+1): 
        for w in range(W+1): 
            if i==0 or w==0: 
                K[i][w] = 0
            elif weights[i-1] <= w: 
                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w]) 
            else: 
                K[i][w] = K[i-1][w] 
  
    return K[n][W] 
  
print (knapsack(weights, values, n))"
"Write a Python program to read in a tweet and remove all punctuation, special characters and stopwords.  ""I'm so excited to be going to the #MuseumTour! #BigDay #travel""","import re
import string
from nltk.corpus import stopwords

tweet = ""I'm so excited to be going to the #MuseumTour! #BigDay #travel""
tweet_clean = re.sub(r'[^\w\s]','',tweet) #remove punctuation
tokens = tweet_clean.split() #split string into individual words 
stop_words = set(stopwords.words(""english"")) #get list of stopwords
filtered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords
print(filtered_tokens)"
Implement a web scraper in Python to extract the top ten trending YouTube videos.  ,"import requests
from bs4 import BeautifulSoup

# make a request to get the page content
page = requests.get(""https://www.youtube.com/feed/trending"")

# parse the page content
soup = BeautifulSoup(page.content, 'html.parser')

# extract the list of trending videos
trending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')

# print the top ten trending videos
for video in trending_videos[:10]:
    print(video.find(class_='yt-uix-tile-link').get('title'))"
"Make a code in Python to find the mode of the given set of values.  1, 2, 3, 2, 4, 2","def find_mode(list):
  max_count = 0
  mode = list[0]
  count = {}
  for item in list:
    if (item in count):
      count[item] += 1
    else:
      count[item] = 1
    if (count[item] > max_count):
      max_count = count[item]
      mode = item
  return mode"
Create a web API with Python and Flask to give the current date and time.  Not applicable,"from flask import Flask
import datetime

app = Flask(__name__)

@app.route('/datetime')
def get_datetime():
    return datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")

if __name__ == '__main__':
    app.run()"
"Create a Python function that takes a list containing fruit names and returns the most common fruit name.  ['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']","def most_common_fruit(fruit_list):
 
    # Dictionary to get count of each fruit
    freq_dict = {}
 
    # Count frequency of each fruit
    for fruit in fruit_list:
        if fruit in freq_dict:
            freq_dict[fruit] += 1
        else:
            freq_dict[fruit] = 1
 
    # Get maximum frequency 
    max_freq = 0
    for freq in freq_dict.values():
        if freq > max_freq:
            max_freq = freq
 
    # Get the most common fruit
    most_common_fruit = None
    for fruit, freq in freq_dict.items():
        if freq == max_freq:
            most_common_fruit = fruit
            break
 
    return most_common_fruit"
"Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.  phrases = [""A bird in the hand"", ""is worth two in the bush""]","result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)"
"Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.  li = [4, 6, 17, 24, 5, 9]","def divisibleBy3(li):
 total = 0
 for num in li:
  if num % 3 == 0:
   total += num
 return total
# Output: 24"
Create a program in Python that takes a number from the user and prints all the divisors of the number.  ,"divisors = []

num = int(input('Enter a number: '))
 
for i in range(1, num + 1):
    if num % i == 0:
        divisors.append(i)

print('The divisors of',num ,'are:')
print(*divisors, sep=', ')"
"Write a Python program to generate an HTML page containing a table with some employee data.  Employee Data:
Name: John Doe
Job Title: Senior Developer
Department: IT
Salary: $120,000

Name: Jane Doe
Job Title: Manager
Department: Finance
Salary: $95,000

Name: Tim Smith
Job Title: Junior Developer
Department: IT
Salary: $55,000","<html>
  <head>
    <title>Employee Data</title>
  </head>
  <body>
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Job Title</th>
          <th>Department</th>
          <th>Salary</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>John Doe</td>
          <td>Senior Developer</td>
          <td>IT</td>
          <td>$120,000</td>
        </tr>
        <tr>
          <td>Jane Doe</td>
          <td>Manager</td>
          <td>Finance</td>
          <td>$95,000</td>
        </tr>
        <tr>
          <td>Tim Smith</td>
          <td>Junior Developer</td>
          <td>IT</td>
          <td>$55,000</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>"
Create a Python function to select all rows from a table where the 'status' is 'approved'  ,"def select_approved_rows():
   sql = ""SELECT * FROM table WHERE status = 'approved'""
   cur.execute(sql)
   return cur.fetchall()"
"Create a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number.  ","from random import choice
import string

def generate_password():
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    password = ''.join(choice(chars) for i in range(8))
    if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):
        return password
    else: 
        return generate_password()

if __name__ == '__main__':
    print(generate_password())"
Generate a solution to translate a text from English to French using Python.  ,"# install the module 
# in command prompt
pip install googletrans

# import module
from googletrans import Translator

# create an object
translator = Translator()

# define text
text = ""Hello, this is a sample text to translate.""

# call the function and pass the text
translation = translator.translate(text, dest='fr') 

# print the translation 
print(translation.text)"
Create a function to generate a unique 6 digit number.  ,"# Python program to generate 
# a unique 6 digit number 
import random 
def generate_number(): 
      
    # Choose a random number 
    # between 10000 and 99999 
    random_number = random.randint(10000, 99999) 
  
    # Return the random number 
    return random_number 
  
# Driver Code 
if __name__ == ""__main__"": 
    print(generate_number())"
Write a Python program to generate 10 random numbers and put them in a list.  ,"import random

random_list = []
for i in range(10):
 number = random.randint(1, 100)
 random_list.append(number)"
"Write a Python program to replace all occurrences of a given string with an alternate string.  ""Hello World!"", ""World"", ""Python""","def replace_string(input_string, target_string, replacement_string):
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))"
"Generate a Python class for an online store item that includes fields for ID, name, price, and description.  Not applicable","class StoreItem:
    def __init__(self, item_id, name, price, description):
        self.item_id = item_id
        self.name = name
        self.price = price
        self.description = description

    def __str__(self):
        return f'{self.name}, ${self.price}'

    def to_dict(self):
        return {
            'item_id': self.item_id,
            'name': self.name,
            'price': self.price,
            'description': self.description
        }"
Create a virtual assistant using Python and Dialogflow to answer a basic set of questions.  Not applicable,"import dialogflow_v2 as dialogflow
import requests

project_id = 'project-id'
session_client = dialogflow.SessionsClient()
session = session_client.session_path(project_id, 'session-id')

while True:
 text = input('User: ')
 text_input = dialogflow.types.TextInput(text=text, language_code='en-US')
 query_input = dialogflow.types.QueryInput(text=text_input)
 response = session_client.detect_intent(session=session, query_input=query_input)

 print('Assistant:', response.query_result.fulfillment_text)"
"Create an algorithm in Python to solve ""Tower of Hanoi"" game of a 4 disk problem.  ","def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): 
    if num_disks == 1: 
        print(""Move disk 1 from rod"", start_rod, ""to rod"", end_rod) 
        return
    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) 
    print(""Move disk"", num_disks, ""from rod"", start_rod, ""to rod"", end_rod) 
    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) 
  
  
# Driver code 
num_disks = 4
solveTowerOfHanoi(num_disks)"
"Generate an api response in Python for the provided data.  Data = {
""name"" : ""John"",
""age"" : 28
}","response = {
  ""status"": 200,
  ""data"": {""name"": ""John"",""age"":28},
  ""message"": ""Success""
}"
Create a webscraper using Python’s Selenium that retrieves data from an online store.  Not applicable,"from selenium import webdriver

# create a new Firefox session
driver = webdriver.Firefox()
driver.implicitly_wait(30)
driver.maximize_window()

# navigate to the application home page
driver.get(""https://www.example.com/"")

# get the search textbox
search_field = driver.find_element_by_name(""q"")
search_field.clear()

# enter search keyword and submit
search_field.send_keys(""shoes"")
search_field.submit()

# get the list of elements which are displayed after the search
# currently on result page using find_elements_by_class_name
product_list = driver.find_elements_by_class_name(""product"")

# iterate through each element and print the text that is
# name of the product
for product in product_list:
    print(product.text)

# close the browser window
driver.quit()"
Develop a web scraper with Python BeautifulSoup to scrape data from an online web store.  Not applicable,"import requests
from bs4 import BeautifulSoup
 
# Make a GET request to fetch the raw HTML content
html_content = requests.get('http://web-store.com').text
 
# Parse the html content
soup = BeautifulSoup(html_content, ""lxml"")
 
# Get the product data
products = soup.find_all('div', attrs={""itemprop"": ""product""})
for product in products:
    name = product.find(""span"", attrs={""itemprop"": ""name""}).text
    price = product.find(""span"", attrs={""itemprop"": ""price""}).text
    description = product.find(""span"", attrs={""itemprop"": ""description""}).text
    print(name, price, description)"
Implement a basic algorithm in Python to calculate the nth Fibonacci number.  6,"def fibonacci(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)
 
print(fibonacci(6)) // 8"
"Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.  Not applicable","class StringComparator:

def __init__(self, string1, string2):
 self.string1 = string1
 self.string2 = string2

def is_equal(self):
 return self.string1 == self.string2

def is_different(self):
 return self.string1 != self.string2

def is_similar(self, threshold=0.5):
 distance = edit_distance(self.string1, self.string2)
 max_length = max(len(self.string1), len(self.string2))

 return distance / max_length < threshold"
"Generate a program in Python to evaluate the accuracy of a machine-learning model.  from sklearn.svm import SVC
clf = SVC(kernel='poly', degree=2, gamma=0.05)","import numpy as np
from sklearn.metrics import accuracy_score

clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Calculating the accuracy
accuracy = accuracy_score(y_test, y_pred)

print(""Accuracy: "" + str(accuracy))"
"Write a Python program to replace all occurrences of a character in a string with the provided replacement character.  str = ""Hello World!""

replacement = ‘X'","def replace_all_occurrences(str, char, replacement):
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))"
Create a python program to find the largest prime factor of a number.  Number: 331,"import math

def largest_prime_factor(n):

# Separate the list of larger factors of the number into prime and composite numbers 
    factors = []
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            factors.append(i)
            factors.append(int(n/i))
# Find the largest prime factor in the list
    prime_factors = []
    for potential_factor in factors:
        is_prime = True
        for j in range(2,int(math.sqrt(potential_factor))+1):
            if potential_factor % j == 0 and potential_factor != j: 
                is_prime = False
        if is_prime:
            prime_factors.append(potential_factor)

# Return the largest prime factor
    return max(prime_factors)

print(largest_prime_factor(331))"
Write a Python program to check if an element exists within a given list of integers.  ,"def element_exists(elem, list_int):
  return elem in list_int"
Create a Python program that takes a sentence and converts it to Morse code.  Not applicable,"MORSE_CODE = {
 'A': '.-', 'B': '-...',
 'C': '-.-.', 'D': '-..',
 'E': '.', 'F': '..-.',
 'G': '--.', 'H': '....',
 'I': '..', 'J': '.---',
 'K': '-.-', 'L': '.-..',
 'M': '--', 'N': '-.',
 'O': '---', 'P': '.--.',
 'Q': '--.-', 'R': '.-.',
 'S': '...', 'T': '-',
 'U': '..-', 'V': '...-',
 'W': '.--', 'X': '-..-',
 'Y': '-.--', 'Z': '--..',
 '0': '-----', '1': '.----',
 '2': '..---', '3': '...--',
 '4': '....-', '5': '.....',
 '6': '-....', '7': '--...',
 '8': '---..', '9': '----.',
 ' ': ' ', '.': '.-.-.-',
 ',': '--..--', '?': '..--..',
 '/': '-..-.', '-': '-....-',
 '(': '-.--.-', ')': '-.--.-'
}

def encode(message):
 code = ''
 for letter in message:
  code += MORSE_CODE[letter.upper()] + ' '
 
 return code

print(encode(""Hello world""))
# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -.."
"Generate a python program to sort a list of numbers  array = [4, 2, 6, 7, 1]","def sort_list(array): 
    n = len(array) 
  
    for i in range(n): 
  
        min_idx = i 
        for j in range(i+1, n): 
            if array[min_idx] > array[j]: 
                min_idx = j 
        array[i], array[min_idx] = array[min_idx], array[i]

if __name__ == ""__main__"":
    array = [4, 2, 6, 7, 1]
    sort_list(array)
    print(array)"
"Create a program in Python to remove all the occurrences of an item from a list.  List: [1, 2, 3, 4, 2, 5, 2]
Item to Remove: 2","def removeItem(list, item):
    # loop through the list
    for i in list:
        # check if the element is the item to remove
        if i == item:
            # remove the item
            list.remove(i)
    # return the list
    return list

#example
list = [1, 2, 3, 4, 2, 5, 2]
result = removeItem(list, 2)

print(result)
# Output: [1, 3, 4, 5]"
Could you build a web scraper in Python that collects all the links from a website?  ,"# Python program to scrape a webpage
import requests as req 
from bs4 import BeautifulSoup 
  
URL = ""http://www.example.com/""
  
# GET request 
r = req.get(URL) 
  
# parse the downloaded homepage and grab all text
soup = BeautifulSoup(r.text, ""html.parser"") 
  
# find and print all links 
links = soup.find_all('a') 
for link in links: 
    print(link.get('href'))"
"Generate a Python program to delete a given key from a dictionary.  dictionary = {'foo': 1, 'bar': 2, 'baz': 3}
key = 'baz'","dictionary = {'foo': 1, 'bar': 2, 'baz': 3}
key = 'baz'

def delete_key(dic, k):
  if k in dic:
    del dic[k]

delete_key(dictionary, key)

print(dictionary)"
"Analyze the following Python function to detect any potential errors.  def expand_list(list):
    for item in list:
        list *= 2","The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: 

def expand_list(list):
    list_copy = list[:]   # make a copy of the list
    for item in list_copy:
        list *= 2"
Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same.  ,"def reverse_words(string):
  words = string.split("" "")
  reversed_words = []
  for word in words:
    reversed_words.insert(0, word)
  return ' '.join(reversed_words)

string = 'This is a sentence.'
reverse_words = reverse_words(string)
print(reverse_words)"
"Port a Java code snippet to Python 3.  public class Foo {
  public int foo( int a, int b ) {
    return a + b;
  }
}","def foo(a, b):
 return a + b"
"Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.  ['cat', 'dog', 'apple', 'banana']","strings = ['cat', 'dog', 'apple', 'banana']

strings.sort()

for string in strings:
    print(string)"
"Build a Python program that extracts all email addresses from a given string.  ""This is an example with two emails: john@example.com, and jane@example.com""","import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)"
Create a Python code to generate a random string of length 8 made of uppercase letters and numbers.  ,"import string
import random

length = 8
chars = string.ascii_uppercase + string.digits
password = ''.join(random.choice(chars) for i in range(length))

print (password)"
"This code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command ""./rRNA_MT_count.py --gtf /path/to/GTF/file --htseq /path/to/HTseq_counts/file"". The script will extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store them in two arrays. Then, it will count reads matching the rRNA identifiers and write the output files. The summary output file will be named ""HTseq_counts_file_rRNAmtRNACounts.txt"".  ","#!/usr/bin/python

# Malwina Prater, mn367@cam.ac.uk,  2017, Copyright
# Centre for Trophoblast Research, University of Cambridge
#
# Script version: v01.
#
# Script to calculate the percent of transcripts mapping to rRNA
#
#  INPUTS :
# 1. HTseq_counts file
# 2. Original reference transcriptome alignned to
#
#  USAGE :    
#  For producing table(s) with rRNA and MT counts for each sample use commands like that:
#
#    ./rRNA_MT_count.py --gtf /Users/malwina/Documents/CTR-Data/genomes/Mus_musculus/mm10/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt
#


# import modules: 
import os,sys
from optparse import OptionParser
import re

# parse in the user options:

parser = OptionParser(usage=""%prog [-x Excel [-i imagefile] [-s squares]"",
                      version=""%prog 0.1"")

parser.add_option(""--htseq"", dest=""FileName"", type=""string"", action=""store"")
parser.add_option(""--gtf"", dest=""GTF"", type=""string"", action=""store"")

(options, args) = parser.parse_args()


#files = sys.argv[]
HTSEQ_COUNTS = options.FileName
GTF = options.GTF


# check if files supplied exist:
try:
    handle = open(GTF, ""rU"")
    handle.close()
except:
    print ""\nError->\tGTF File: %s does not exist\n"" % GTF
    sys.exit()

try:
    handle = open(HTSEQ_COUNTS, ""rU"")
    handle.close()
except:
    print ""\nError->\tFile: %s does not exist\n"" % HTSEQ_COUNTS
    sys.exit()


#
# First job is to extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store in 2 arrays
#

rRNA_identifiers = {}
MT_identifiers = {}


with open(GTF, ""rU"") as handle:
    #line = handle.readline()
    for line in handle:
    	line.rstrip('\n')
    	if 'gene_biotype ""rRNA""' in line:
            identifier = line
            identifier = re.sub('.*gene_id ""', '', identifier)
            identifier = re.sub('""; gene_version.*\n', '', identifier)
            rRNA_identifiers[identifier] = 1
        if 'MT' in line:
            identifier = line
            identifier = re.sub('.*gene_id ""', '', identifier)
            identifier = re.sub('""; gene_version.*\n', '', identifier)
            MT_identifiers[identifier] = 1    
handle.close()    

#print(""rRNA:"")
#print(rRNA_identifiers.keys())
#print(""MT:"")
#print(MT_identifiers.keys())


#
# Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers
#
Cummulative_rRNA_Count = 0
rRNA_genes = 0
ReadCount = 0
line_number = 0
MT_genes = 0;
Cummulative_MT_Count = 0;

with open(HTSEQ_COUNTS, ""rU"") as handle:
    for line in handle:
    	line.rstrip('\n')            

        split_line = line.split(""\t"")
        if line_number > 0:
       	    if split_line[0] in rRNA_identifiers.keys():  # if rRNA_identifiers[gene_id]
                rRNA_genes += 1
                Cummulative_rRNA_Count += int(split_line[1])
            if split_line[0] in MT_identifiers.keys():
                MT_genes += 1
                Cummulative_MT_Count += int(split_line[1])
            ReadCount += int(split_line[1])
        line_number += 1
handle.close()    
#print(Cummulative_MT_Count)
#print(Cummulative_rRNA_Count)


#
# wiritng the output files:
#              
out = HTSEQ_COUNTS + '_rRNAmtRNACounts.txt'; 
out = re.sub('.txt_', '_', out)

print ""Summary output file:		"", out, ""\n""

OUT = open(out, ""w"")
OUT.write('HT-SEQ file name: \t' + HTSEQ_COUNTS + '\n\n')
OUT.write('GTF file name: \t\t' + GTF + '\n\n\n')
OUT.write('---------------------------------------------------------------------------------' + '\n')
OUT.write('  rRNA and MT identifiers\n')
OUT.write('---------------------------------------------------------------------------------' + '\n')
OUT.write('No. of rRNA identifiers: ' + str(len(rRNA_identifiers.keys())) + '\n') # PRINT size of this hash
OUT.write('No. of MT identifiers: ' + str(len(MT_identifiers.keys())) + '\n') # PRINT size of this hash
OUT.write('\n\n')
OUT.write('---------------------------------------------------------------------------------' + '\n')
OUT.write('  HTSEQ mapping summary\n')
OUT.write('---------------------------------------------------------------------------------' + '\n')
OUT.write('ReadCount: ' + str(ReadCount) + '\n\n')
#OUT.write('  Number of rRNA genes: ' + str(rRNA_genes) + '\n')
OUT.write('Total no. of rRNA transcripts: ' + str(Cummulative_rRNA_Count) + '\n')
perc_rRNA = 100*float(Cummulative_rRNA_Count)/float(ReadCount)
perc_rRNA = str(round(perc_rRNA, 3))
OUT.write('Percent rRNA mapped reads: ' + str(Cummulative_rRNA_Count) + ' / ' + str(ReadCount) + ' * 100 = ' + perc_rRNA + '%\n\n')
#OUT.write('\n  Number of MT genes: ' + str(MT_genes) + '\n')
OUT.write('Total no. of MT transcripts: ' + str(Cummulative_MT_Count) + '\n')
perc_MT = 100*float(Cummulative_MT_Count)/float(ReadCount)
perc_MT = str(round(perc_MT, 3))
OUT.write('Percent MT mapped reads: ' + str(Cummulative_MT_Count) + ' / ' + str(ReadCount) + ' * 100 = ' + perc_MT + '%\n\n')
OUT.close()


"
"Modify the following Python code to raise an exception if the input value is not an integer  def square_root(x):
    return x**0.5","def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    return x**0.5"
Create a program in Python that extracts titles of all YouTube videos from a URL.  https://www.youtube.com/user/Thexvid/videos,"import requests
import re

url = ""https://www.youtube.com/user/Thexvid/videos""

r = requests.get(url)
titles = re.findall('<a href=""/watch\?v=([^""]+)"">(.+?)<\/a>',r.content.decode('utf-8'))

for title in titles:
 print(title[1])"
Write Python code to list the contents of a directory.  ,"# get the list of contents
import os
directory_contents = os.listdir()

# print the contents
for content in directory_contents:
    print(content)"
"Create an AI-powered Python script to optimize any given code.  Example code:
function getResult(a, b, c) {
 return a + b + c;
}","# Import the required libraries
from dataclasses import dataclass

@dataclass
class Params:
 a: int
 b: int
 c: int

def get_result(params: Params) -> int:
 """"""Returns the sum of the three given numbers""""""
 return params.a + params.b + params.c

# Optimize the code
def optimize(fn, params):
 best_score = 0
 best_params = None
 for a in range(params.a - 10, params.a + 10):
 for b in range(params.b - 10, params.b + 10):
 for c in range(params.c - 10, params.c + 10):
 score = fn(Params(a, b , c))
 if score > best_score:
 best_score = score
 best_params = {
 'a': a,
 'b': b,
 'c': c
 }
 return best_params

if __name__ == '__main__':
 # Initialize the parameters
 params = Params(a=1, b=2, c=3)
 # Get the optimized params
 best_params = optimize(get_result, params)
 # Print the optimized result
 print(""Optimized result: %d"" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))"
"Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.  String 1: abc
String 2: qaxbcy","def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)"
Create a neural network class in Python to model a linear regression function.  ,"import numpy as np
class LinearRegressionModel:
    def __init__(self, input_dim, output_dim):
        ''' Initialises the weights and bias of the linear regression model
        Arguments:
            input_dim {int} -- Number of input features
            output_dim {int} -- Number of outputs
        '''
        self.weights = np.zeros((input_dim, output_dim))
        self.bias = np.zeros((1, output_dim))

    def forward(self, x):
        ''' Calculates the forward pass of the linear regression model
        Arguments:
            x {numpy array} -- Input data of size (N, input_dim)
        Returns:
            out {numpy array} -- Output of the linear regression model of size (N, output_dim)
        '''
        out = np.dot(x, self.weights) + self.bias
        return out"
Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.  Not applicable,"import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier

# Load data
data = pd.read_csv('data.csv')

# Select features
features = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',
                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',
                 'home_team_red_cards', 'away_team_red_cards']]

# Select target
target = data['winner']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train the model
gbm = GradientBoostingClassifier()
gbm.fit(X_train, y_train)

# Make predictions
y_pred = gbm.predict(X_test)

# Evaluate the model
score = gbm.score(X_test, y_test)
print(f'Model score: {score}')"
"Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.  ""2 3 + 4 5 * *""","def evaluate(expression): 
  
    # split expression into list  
    expression = expression.split() 
  
    # stack to store integer values. 
    stack = []  
  
    # do for every element of expression. 
    for element in expression: 
  
        # If element is an operand push 
        # into stack it's a number only 
        if element.isdigit(): 
            stack.append(element) 
  
        # if element is an operator, 
        # pop two elements from stack 
        # perform respective operations 
        else:  
            val1 = stack.pop() 
            val2 = stack.pop() 
            stack.append(str(eval(val2 + element + val1))) 
  
    # return the value  
    return (int(stack[0])) 
  
# Driver Code  
expression = ""2 3 + 4 5 * *""
  
print(evaluate(expression)) 

Output: 46"
Write a Python script to identify the words that contain more than one vowel in a given sentence.  Sentence: The quick brown fox jumped over the lazy dog.,"import re

sentence = ""The quick brown fox jumped over the lazy dog.""
pattern = r""\b(\w*[aeiou]\w*){2,}\b""

match = re.findall(pattern, sentence)
print(match)

# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']"
"This code provides a Python API for KB SRU. To use it, you can create an instance of the ""sru"" class and call its ""search"" method, passing in a query string and optionally a collection name, start record number, maximum number of records to return, and record schema. The method will return a ""response"" object containing the results of the search. You can then use the various properties of the ""response"" object to extract specific information from the search results, such as titles, creators, and subjects.  ","#! /usr/bin/env python
""""""
Python API for KB SRU
""""""

import sys
import urllib
import requests
from lxml import etree

SRU_BASEURL = 'http://jsru.kb.nl/sru/sru'
SRU_BASEURL += '?version=1.2&maximumRecords=%i'
SRU_BASEURL += '&operation=searchRetrieve'
SRU_BASEURL += '&startRecord=%i'
SRU_BASEURL += '&recordSchema=%s'
SRU_BASEURL += '&x-collection=%s&query=%s'

SETS = {'ANP': {'collection': 'ANP',
                'description_en': 'Radio Bulletins ANP Press Agency',
                'description_nl': 'ANP Radiobulletins Digitaal',
                'metadataPrefix': 'didl',
                'recordschema': 'dcx',
                'setname': 'anp',
                'time_period': [1937, 1989]},
        'DPO': {'collection': 'DPO_boekdeel',
                'description_en': 'Early Dutch Books Online',
                'description_nl': 'Early Dutch Books Online',
                'metadataPrefix': 'didl',
                'recordschema': 'ddd',
                'setname': 'DPO',
                'time_period': [1781, 1800]},
        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',
                    'description_nl': 'Middeleeuwse Verluchte Handschriften',
                    'metadataPrefix': 'dcx',
                    'setname': 'BYVANCK',
                    'time_period': [500, 1500]},
        'SGD': {'description_en': 'States General Digital',
                'description_nl': 'Staten-Generaal Digitaal',
                'metadataPrefix': 'dcx',
                'setname': 'sgd:register',
                'time_period': [1962, 1994]},
        'GGC': {'collection': 'GGC',
                'description_en': 'General Catalogue KB',
                'description_nl': 'Algemene Catalogus KB',
                'metadataPrefix': 'dcx',
                'recordschema': 'dcx',
                'setname': 'ggc',
                'time_period': [1937, 2021]}}  # No idea what to use here?

# Name spaces in GGC records

srw_ns = 'http://www.loc.gov/zing/srw/'
tel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'
xsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'
dc_ns = 'http://purl.org/dc/elements/1.1/'
dcterms_ns = 'http://purl.org/dc/terms/'
dcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'

NSMAPGGC = {""srw"": srw_ns,
            ""tel"": tel_ns,
            ""xsi"": xsi_ns,
            ""dc"":  dc_ns,
            ""dcterms"": dcterms_ns,
            ""dcx"": dcx_ns}


class response():
    def __init__(self, record_data, sru):
        self.record_data = record_data
        self.sru = sru

    def getElementText(self, tagName, attributeName, attributeValue):
        # Returns text content of all elements for which tag matches tagName,
        # and attribute value equals attributeValue. Set attributeName to empty
        # string to get all tagName matches.
        textFields = []
        for r in self.record_data.iter():
            if r.tag == tagName:
                if attributeName != '':
                    try:
                        if r.attrib[attributeName] == attributeValue:
                            textFields.append(r.text)
                    except KeyError:
                        pass
                else:
                    textFields.append(r.text)
        return textFields

    @property
    def records(self):
        if self.sru.nr_of_records == 0:
            record_data = ""<xml></xml>""
        else:
            ns = {'zs': 'http://www.loc.gov/zing/srw/'}
            record_data = self.record_data.xpath(""zs:records/zs:record"",
                                                 namespaces=ns)[0]
        return record(record_data, self.sru)

    # Below property functions all return a list with all instances that satisfy
    # criteria

    @property
    def typesDutch(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'nl'))

    @property
    def typesDCMI(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'DCMIType'))

    @property
    def identifiersISBN(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:ISBN'))

    @property
    def identifiersBrinkman(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:Brinkman'))

    @property
    def identifiersURI(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:URI'))

    @property
    def identifiersOCLC(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'OCLC'))

    @property
    def languagesDutch(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'nl'))

    @property
    def languagesEnglish(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'en'))

    @property
    def languagesFrench(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'fr'))

    @property
    def languagesISO639(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:ISO639-2'))

    @property
    def dates(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}date',
                                   '',
                                   ''))

    @property
    def extents(self):
        return(self.getElementText('{http://purl.org/dc/terms/}extent',
                                   '',
                                   ''))

    @property
    def creators(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}creator',
                                   '',
                                   ''))

    @property
    def contributors(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}contributor',
                                   '',
                                   ''))

    @property
    def titles(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '',
                                   ''))

    @property
    def titlesMain(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:maintitle'))

    @property
    def titlesIntermediate(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:intermediatetitle'))

    @property
    def publishers(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}publisher',
                                   '',
                                   ''))

    @property
    def countries(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}country',
                                   '',
                                   ''))

    @property
    def subjectsBrinkman(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:Brinkman'))

    @property
    def subjectsISO9707(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'ISO_9707_[Brinkman]'))

    @property
    def subjectsUNESCO(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'UNESCO'))

    @property
    def collectionIdentifiers(self):
        return(self.getElementText('{http://purl.org/dc/terms/}isPartOf',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:collectionIdentifier'))

    @property
    def recordIdentifiersURI(self):
        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}recordIdentifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:URI'))

    @property
    def annotations(self):
        # Note that annotations sometimes contain language or itenID attibutes;
        # ignored for now (collect everything).
        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}annotation',
                                   '',
                                   ''))


class record():
    def __init__(self, record_data, sru):
        self.record_data = record_data
        self.sru = sru

    def __iter__(self):
        return self

    # This works under Python 2.7
    def next(self):
        if self.sru.nr_of_records == 0:
            raise StopIteration
        if self.sru.startrecord < self.sru.nr_of_records + 1:
            record_data = self.sru.run_query()
            self.sru.startrecord += 1
            return response(record_data, self.sru)
        else:
            raise StopIteration

    # This works under Python 3
    def __next__(self):
        if self.sru.nr_of_records == 0:
            raise StopIteration
        if self.sru.startrecord < self.sru.nr_of_records + 1:
            record_data = self.sru.run_query()
            self.sru.startrecord += 1
            return response(record_data, self.sru)
        else:
            raise StopIteration


class sru():
    DEBUG = False

    collection = False
    maximumrecords = 50
    nr_of_records = 0
    query = """"
    recordschema = False
    sru_collections = SETS
    startrecord = 0

    def search(self, query, collection=False,
               startrecord=1, maximumrecords=1, recordschema=False):

        self.maximumrecords = maximumrecords
        if sys.version.startswith('3'):
            self.query = urllib.parse.quote_plus(query)
        elif sys.version.startswith('2'):
            self.query = urllib.quote_plus(query)
        self.startrecord = startrecord

        if collection not in self.sru_collections:
            raise Exception('Unknown collection')

        self.collection = self.sru_collections[collection]['collection']

        if not self.collection:
            raise Exception('Error, no collection specified')

        if not recordschema:
            self.recordschema = self.sru_collections[collection]['recordschema']
        else:
            self.recordschema = recordschema

        record_data = self.run_query()

        nr_of_records = [i.text for i in record_data.iter() if
                         i.tag.endswith('numberOfRecords')][0]

        self.nr_of_records = int(nr_of_records)

        if self.nr_of_records > 0:
            return response(record_data, self)

        return False

    def run_query(self):
        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,
                             self.recordschema, self.collection, self.query)
        if self.DEBUG:
            sys.stdout.write(url)

        r = requests.get(url)

        if not r.status_code == 200:
            raise Exception('Error while getting data from %s' % url)

        record_data = etree.fromstring(r.content)

        return record_data
"
"Using numpy, create a Python code which would return an array with the running total of numbers in a given list.  ","import numpy as np

def runningTotal(arr):
    return np.cumsum(arr)"
Construct a neural network in Python that can perform basic regression.  Not applicable,"import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
 
# Load the data
data = pd.read_csv('data.csv')
 
# Split the data into features and labels
X = data.drop(['label'], axis=1).values
y = data['label'].values
 
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
 
# Create the neural network
model = Sequential()
model.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))
model.add(Dense(12, kernel_initializer='normal', activation='relu'))
model.add(Dense(1, kernel_initializer='normal'))
 
# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')
 
# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)
 
# Evaluate the model
score = model.evaluate(X_test, y_test, verbose=0)
print('Test score:', score)"
"Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings.  String 1: I want to make a difference
String 2: The journey to success is long","def string_to_list(s1, s2):
    s1_list = s1.split()
    s2_list = s2.split()
    output_list = s1_list + s2_list
    return output_list

words = string_to_list(""I want to make a difference"", ""The journey to success is long"")
print(words)"
Create a web scraper using Python that retrieves the 10 most recent articles from a news website.  Not applicable,"import requests 
from bs4 import BeautifulSoup 
  
# URL to scrap 
URL = 'http://example.com/news'
  
# get the source code 
html_content = requests.get(URL).text 
  
# parse the html content 
soup = BeautifulSoup(html_content, ""lxml"") 
  
# get all the articles  
articles = soup.find_all('article') 
  
# print the first 10 articles 
for article in articles[:10]: 
    print(article.text)"
Create a Python program to convert HTML to plain text without using any libraries.  ,"def html_to_text(html_string):
    output = ''
    in_tag = False
    for char in html_string:
        if char == '<':
            in_tag = True
        elif char == '>':
            in_tag = False
        elif in_tag == False:
            output += char
    return output"
Write a python program to convert the given temperature from Celsius to Fahrenheit.  0°C,"""""""
Convert the given temperature from Celsius to Fahrenheit
""""""

def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

if __name__ == '__main__':
    celsius = 0
    print(celsius_to_fahrenheit(celsius))"
"Create a lambda expression in Python to filter a list of integer greater than 50.  [45, 12, 52, 89, 33, 99]","list1 = [45, 12, 52, 89, 33, 99]
filtered_list = list(filter(lambda x: x > 50, list1))

print(filtered_list)"
Create a Python program to evaluate and compare the performance of two different heuristics algorithms.  ,"import time
import heuristics_algorithm1
import heuristics_algorithm2

#input data for algorithms
data1 = ...
data2 = ...

#Evaluate and compare the performance of two different heuristics algorithms
start = time.time()
result1 = heuristics_algorithm1.run(data1)
end = time.time()
time1 = end - start

start = time.time()
result2 = heuristics_algorithm2.run(data2)
end = time.time()
time2 = end - start

if time1 < time2:
    print(""Algorithm 1 is faster than algorithm 2"")
elif time2 < time1:
    print(""Algorithm 2 is faster than algorithm 1"")
else:
    print(""Both algorithms have the same performance time"")"
"Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.  my_dict = {
   ""a"": 5,
   ""b"": 10,
   ""c"": 15
}","def compute_dict_sum(input_dict):
    result = 0
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))"
"Write a Python script that filters a list of integers and returns only even numbers.  list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","def filter_even_numbers(lst):
    # Filter out even numbers from the given list 
    even_numbers = [num for num in lst if num % 2 == 0]
    return even_numbers

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = filter_even_numbers(list)
print(result)"
Generate a Python program that takes a sentence as input and prints out only the verbs.  The cat jumped over the moon.,"import nltk

def extract_verbs(sentence):
    tokens = nltk.word_tokenize(sentence)
    tags = nltk.pos_tag(tokens)
    verbs = [word for word, pos in tags if pos.startswith('V')]
    return verbs

sentence = ""The cat jumped over the moon.""
verbs = extract_verbs(sentence)
print(verbs)"
Create an AI-based system in Python for predicting stock market movements.  Not applicable,"#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#import data
data = pd.read_csv('data.csv') 

#split data into train and test data
X_train=data.iloc[:, 0] #Choosing the independent variable 
y_train=data.iloc[:, 1]  #Choosing the dependent variable
X_test=data.iloc[:, 0] #Choosing the independent variable 
y_test=data.iloc[:, 1]  #Choosing the dependent variable

#Build a deep learning model
#import necessary libraries
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

#create a model and add layers
model = Sequential()
model.add(Dense(64, input_shape=(1,), activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mse'])

#train the model
model.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))

#Evaluate the model
score = model.evaluate(X_test, y_test, verbose=0)"
Develop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON.  None,"import json 
import sqlite3
from flask import Flask, request, jsonify 

app = Flask(__name__) 
  
def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d 
  
@app.route('/', methods=['GET'])
def index(): 
    connection = sqlite3.connect('database.db')
    connection.row_factory = dict_factory
    cur = connection.cursor() 
    all_users = cur.execute('SELECT * FROM users;').fetchall() 
    return jsonify(all_users) 
  
if __name__ == '__main__': 
    app.run(debug = True)"
"Generate a Python dictionary that contains the count of the characters in a given string.  ""Hello World""","def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"
"Write a Python program to store and querying user data.  user_data = {
    ""Name"": ""John"",
    ""Age"": 25,
    ""City"": ""New York""
    
}","import json

user_data = {""Name"": ""John"", ""Age"": 25, ""City"": ""New York""}

def store_user_data(data):
    with open('user_data.json', 'w') as f:
        json.dump(data, f)

def get_user_data():
    with open('user_data.json') as f:
        return json.load(f)

# store data in JSON file
store_user_data(user_data)

# get data
data = get_user_data()
print(data)"
You are required to write a Python program to optimize an equation.  x + x + y + y + y,"def optimize_equation(equation):
    variables = []
    for term in equation.split('+'):
        var, count = term.strip().split(' ')
        variables.append((var, int(count)))

    new_equation = """"
    for var, count in variables:
        new_equation += (var + '^' + str(count)) + ' + '
    return new_equation[:-3]

equation = 'x + x + y + y + y'

print(optimize_equation(equation))"
"Generate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string.  [""Hello world"", ""This is a test""]","def get_word_lists(strings):
    word_lists = []
    for string in strings:
        words = string.split("" "")
        word_list = []
        for i in range(len(words)):
            word_list.append(words[i:])
        word_lists.append(word_list)
    return word_lists

word_lists = get_word_lists([""Hello world"", ""This is a test""])
print(word_lists) # prints ""[[""Hello"", ""world""], [""This"", ""is"", ""a"", ""test""]]"""
Create a web scraper that extracts specific data from a given website.  ,"The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.

For example, to extract the URL from a list of webpages, the following code snippet can be used:

import requests
from bs4 import BeautifulSoup

# Get the web page
webpage = requests.get(""<url_of_webpage>"")

# Parse the web page
soup = BeautifulSoup(webpage.content, 'html.parser')

# Find all 'a' tags
links = soup.find_all('a')

# Extract the URLs in the 'href' attribute
for link in links:
    print(link.get('href'))"
Construct a script in Bash that can install a given software.  Python 3.8.5,"#!/bin/bash

# Download latest version of Python
curl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz

# Extract the tgz file
tar -xzf Python-3.8.5.tgz

# Move into the Python directory
cd Python-3.8.5

# Run the configure script
./configure

# Compile and install
make
make install"
"Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.  [3, 8, 6, 10, 17]","def odd_numbers_list(numbers):
    return [num for num in numbers if num % 2 != 0]"
Create a Python script that adds two numbers together and prints the result.  ,"def add(a, b):
    sum = a + b
    print(sum)

add(5,7)"
"Design an algorithm in Python to find the most common elements in an array of integers.  [3, 4, 1, 2, 5, 3, 3]","def most_common(nums):
    # Create a dictionary to store the counts
    counts = {}

    # Iterate over the elements
    for num in nums:
        # If the element is not present in the dictionary, add it
        if num not in counts:
            counts[num] = 0

        # Update the count
        counts[num] += 1

    # Get the maximum count
    max_count = max(counts.values())

    # Return the elements that have maximum count
    return [num for num, count in counts.items() if count == max_count]"
"Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].  Not applicable","array = [1, 10, 50, 3, 8]

# Get the maximum element
max_element = max(array)

print(max_element) # Output: 50"
Create a Python script to analyze the sentiment of a text.  ,"import re
from nltk.stem.snowball import SnowballStemmer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.sentiment.vader import SentimentIntensityAnalyzer 

def sentiment_analyzer(text):
    # Tokenize the text
    tokens = word_tokenize(text)

    # Create stemmer object
    stemmer = SnowballStemmer('english')

    # Stem each token
    stemmed_words = [stemmer.stem(word) for word in tokens]

    # Remove punctuation
    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]

    # Remove stopwords
    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]

    # Create a SentimentIntensityAnalyzer object
    sid = SentimentIntensityAnalyzer()

    # Get the polarity score of the text
    polarity_score = sid.polarity_scores(' '.join(meaningful_words))

    return polarity_score"
"Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.  list = [""john@gmail.com"", ""sarah@yahoo.com"", ""bob@microsoft.com"", ""sophie@gmail.com""]","filtered_list = [email for email in list if email.endswith(""@gmail.com"")]

print(filtered_list)
# Output: [""john@gmail.com"", ""sophie@gmail.com""]"
Generate a Python function to execute a valid insertion sort on a given list of integers.  ,"def insertion_sort(arr):
 for i in range(1, len(arr)):
 key = arr[i]
 j = i -1
 while j >= 0 and key < arr[j] :
    arr[j + 1] = arr[j]
    j = j - 1
 arr[j + 1] = key

return arr"
Generate a program to sort a list of numbers using Insertion Sort algorithm in Python.  ,"def insertionSort(arr):
	for i in range(1, len(arr)):
		current = arr[i]
		j =i-1
		while j>=0 and arr[j]>current:
			arr[j+1] = arr[j]
			j-=1
		arr[j+1] = current
	return arr

if __name__ == '__main__':
	arr = [2, 4, 7, 3, 8, 6, 1]
	print(insertionSort(arr))"
Create an Python function that takes a string containing a numerical expression and returns the result.  ,"def eval_expr(expr):
   return eval(expr)"
"Given a json-formatted string, create a python program to parse it into a dict.  data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'","import json

data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'

data_dict = json.loads(data)"
Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count.  String: aabbbbbbcccc,"def compress(s): 
    # Initialize results 
    output = """" 
  
    # Initialize count 
    count = 1
  
    # Traverse the string 
    for i in range(len(s)): 
          
        # If the current character is same 
        # as next one, increment its count 
        if (i+1 < len(s) and s[i] == s[i+1]): 
            count += 1
          
        else: 
            # Append the count and character 
            outputo + = str(count) + s[i] 
          
            # Reset the  count  
            count = 1
          
    # Append the last obtained characters 
    # and their count 
    output += str(count) + s[i] 
  
    return output

s = ""aabbbbbbcccc""
print(compress(s))
# Output: 2a6b4c"
"Create a basic CRUD API for the BlogPost model with Python/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post.  Not applicable","from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:///test.db'
db = SQLAlchemy(app)

class BlogPost(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  title = db.Column(db.String(200))
  content = db.Column(db.Text)

  def __repr__(self):
    return '<BlogPost %r>' % self.title

@app.route('/post', methods=['POST'])
def create_post():
  data = request.get_json()
  post = BlogPost(title=data['title'], content=data['content'])
  db.session.add(post)
  db.session.commit()
  return jsonify(post.id)

@app.route('/posts', methods=['GET'])
def get_posts():
  posts = BlogPost.query.all()
  return jsonify([post.serialize() for post in posts])

@app.route('/post/<id>', methods=['GET'])
def get_post(id):
  post = BlogPost.query.filter_by(id=id).first()
  return jsonify(post.serialize())

@app.route('/post/<id>', methods=['PUT'])
def edit_post(id):
  data = request.get_json()
  post = BlogPost.query.filter_by(id=id).first()
  post.title = data['title']
  post.content = data['content']
  db.session.commit()
  return jsonify(post.serialize())

@app.route('/post/<id>', methods=['DELETE'])
def delete_post(id):
  post = BlogPost.query.filter_by(id=id).first()
  db.session.delete(post)
  db.session.commit()
  return jsonify({ 'message' : 'Post deleted' })

if __name__ == '__main__':
  app.run(debug=True)"
"Write a Python program that calculates the distance between two points on a two-dimensional plane.  Point1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2)","#include <iostream>
#include <math.h>

int main() 
{ 
    int x1 = 3; 
    int y1 = 4; 

    int x2 = -9; 
    int y2 = -2;

    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); 

    std::cout << ""Distance between the two points is: "" << distance << std::endl; 

    return 0; 
}"
Create an AI-based chatbot in Python that can answer simple queries about a product or service.  Not applicable,"import random

# The answers to the queries
answers = {
    'What is XYZ?': 'XYZ is a company that provides XYZ services.',
    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',
    'Where is XYZ located?': 'XYZ is located in ABC city.',
    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'
}

# Generate a response
def generate_response(question):
    if question in answers:
        return answers[question]
    else:
        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])

# Start the conversation
question = input('Welcome to XYZ. How can I help you? ')
response = generate_response(question)

while response != 'Goodbye':
    print(response)
    question = input('Is there anything else I can help you with? ')
    response = generate_response(question)

print('Goodbye!')"
Generate a python program to read the contents from a given URL  ,"import requests

def read_url(url):
  r = requests.get(url)
  if r.status_code == 200:
    return r.text
  else:
    return None"
"Code a function in Python that takes a list of integers (denoted by `lst`) and returns a list of booleans where each element of the output list is `True` if the corresponding element in the input list is a prime number, and `False` otherwise.  lst = [7, 8, 12, 19, 22, 23]","def is_prime(n):
 # check if n is divisible by any of the numbers
 # between 2 and n-1
 for i in range(2, n):
 if n % i== 0:
 return False

 return True 

def check_lst(lst):
 # generate a list of booleans 
 # where each element corresponds to the corresponding
 # element of lst
 result_lst = []
 for i in range(len(lst)):
 if is_prime(lst[i]):
 result_lst.append(True)
 else:
 result_lst.append(False)

 return result_lst

lst = [7, 8, 12, 19, 22, 23]
print(check_lst(lst))

# Output: 
# [True, False, False, True, False, True]"
"Generate a program in Python to output the top 3 numbers from an array of integers  [7, 13, 5, 8, 50, 11, 64, 48]","def top_three(numbers):
    sorted_numbers = sorted(numbers, reverse=True)
    return sorted_numbers[:3]

print(top_three([7, 13, 5, 8, 50, 11, 64, 48]))"
"Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.  n = 10","my_dict = {}

for i in range(1,n+1):
 my_dict[i] = i**2

print(my_dict)"
"Edit the following Python program to make a correct API request and parse the response.  import requests

url = 'https://api.example.com/users'

response = requests.get(url)

print(response.json())","import requests

url = 'https://api.example.com/users'

headers = {
 'Authorization': 'Bearer YOUR_API_TOKEN',
 'Content-Type': 'application/json',
}

response = requests.get(url, headers=headers).json()

for user in response['data']:
 print(user)"
"Create a Python program that takes in text input from the user and searches a given list of strings to find any matches.  strings = [""First"",""Second"",""Third""]","import re 
  
# input string 
strings = [""First"",""Second"",""Third""]

# Get the string 
inp_str = input(""Please enter your string :"") 

# Initialize the flag 
found = False
  
# Search the string 
for i in strings: 
    if re.search(i, inp_str):
        found = True

# Print result 
if found == True: 
    print(""String matches"") 
else: 
    print(""String doesn't matches"")"
"Generate a program in Python to convert all characters of a string in lowercase.  String = ""HELLO""","def to_lower(string):
    return string.lower()"
"Edit the following Python program to use a dictionary instead of a list.  items = [1, 2, 3, 4]

for item in items:
 print(item)","items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}

for key, value in items.items():
 print(value)"
Construct a prime number sieve in Python which returns a list of all primes up to a given number.  n = 10,"def primeSieve(n): 
    prime_list = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
        if (prime_list[p] == True): 
            for i in range(p * 2, n+1, p): 
                prime_list[i] = False
        p += 1
    primes=[] 
    for p in range(2, n): 
        if prime_list[p]: 
            primes.append(p) 
    return primes

print(primeSieve(10))  # [2, 3, 5, 7]"
Write a python code to print all prime numbers between 1 and a given number n.  ,"# Function to generate prime numbers between 1 and a given number n 
def generate_prime_numbers(n): 
  
    # Array for checking if a number is prime or not
    prime_list = [True for i in range(n + 1)] 
    p = 2
    while (p * p <= n): 
          
        # If prime_list[p] is not changed, then it is a prime 
        if (prime_list[p] == True): 
              
            # Update all multiples of p 
            for i in range(p * 2, n + 1, p): 
                prime_list[i] = False
        p += 1
  
    # Collecting prime numbers 
    for p in range(2, n): 
        if prime_list[p]: 
            print(p)"
"Find the optimal solution to solve a knapsack problem using dynamic programming.  Given Items (with values and weights): [(60, 10), (100, 20), (120, 30)] 
Capacity of Knapsack: 50","// A Naive recursive Python 
// program for 0-1 Knapsack problem 
 
# Returns the maximum value  
# that can be put in a knapsack of  
# capacity W 
def knapSack(W, wt, val, n): 
  
    # Base Case 
    if n == 0 or W == 0 : 
        return 0
  
    # If weight of the nth item is more 
    # than Knapsack capacity W, then 
    # this item cannot be included in the optimal solution 
    if (wt[n-1] > W): 
        return knapSack(W, wt, val, n-1) 
  
    # return the maximum of two cases: 
    # (1) nth item included 
    # (2) not included 
    else: 
        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), 
                    knapSack(W, wt, val, n-1)) 
  
# end of function knapSack"
"Using Python, create a function that calculates the objective function of a linear equation.  ax + by = c

a = 3, b = 5, c = 7","def linear_eq(a, b, c):
    return a*x + b*y - c

# For example:
result = linear_eq(3, 5, 7)
print(result)"
Implement an insertion sort algorithm in Python.  ,"def insertion_sort(list):
    for i in range(1,len(list)):
        key = list[i]
        j = i - 1
        while j>=0 and key < list[j]:
            list[j+1] = list[j]
            j-=1
        list[j+1] = key
    return list"
"Write a python program to generate a random password given a set of letters, numbers, and characters.  No input","import random 
  
  
# All the possible characters 
# that could go into the password 
string = ""abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?""
  
# Using the choice function of the 
# random module choose any 
# character randomly from the set of characters 
password =  """".join(random.sample(string, 8)) 
print(password)"
Develop a Python module to generate random numbers.  ,"import random

def generate_random_numbers(length, min_value, max_value):
    return [random.uniform(min_value, max_value) for _ in range(length)]"
How do we use recursion to solve a given problem in Python?  ,"Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself."
"Create an application using Python and Flask to submit form data and store it in a database.  Form elements: Name, Email, Phone","from flask import Flask, render_template, request, redirect
import sqlite3

app = Flask(__name__)

@app.route('/')
def home():
 return render_template('index.html')

@app.route('/submit', methods=['POST'])
def submit():
 name = request.form.get('name')
 email = request.form.get('email')
 phone = request.form.get('phone')
 
 conn = sqlite3.connect('data.db')
 cur = conn.cursor()
 
 cur.execute(""INSERT INTO data (name, email, phone) VALUES (?, ?, ?)"", (name, email, phone))
 conn.commit()
 
 return redirect('/')
	
if __name__ == '__main__':
 app.run(debug=True)"
Optimize a Python program that processes a 2d array and stores the transpose output in a new array.  Not applicable,"def transpose(A):
 n = len(A)
 m = len(A[0])

 B = [[0 for x in range(n)] for x in range(m)]

 for i in range(n):
 for j in range(m):
 B[j][i] = A[i][j]

 return B"
Generate a Python script that takes any number of integer arguments and returns their sum.  3 5 7,"def sum_ints(*args):
    total = 0
    for num in args:
        total += num
    
    return total

print(sum_ints(3, 5, 7))"
Create a function in Python which takes a list as input and returns the sum of the items in the list.  ,"def sum_list(input_list):
  sum = 0
  for i in input_list:
    sum += i
  return sum"
Create a Selenium script in Python to automate the login process in a given website.  Target website: www.example.com,"from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

# Initialize web driver
driver = webdriver.Chrome()

# Navigate to the target web page
driver.get('http://www.example.com')

# Locate username field
username = driver.find_element_by_name('username')

# Enter username
username.send_keys('username')

# Locate password field
password = driver.find_element_by_name('password')

# Enter password
password.send_keys('password')

# Locate submit button
submit_button = driver.find_element_by_name('submit')

# Click submit button
submit_button.click()

# Wait for login process to complete
time.sleep(5)

# Login successful
print('Login successful!')

driver.close()"
Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.  Not applicable,"import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import precision_score

# Load the dataset
df = pd.read_csv(""spam.csv"", encoding='iso-8859-1')
# Load label and data
X = df['EmailText']
y = df['Label']

# Split data into train-test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Create bag of words model
count_vectorizer = CountVectorizer()
X_train_counts = count_vectorizer.fit_transform(X_train)

# Train the model
clf = svm.SVC(kernel='linear')
clf.fit(X_train_counts, y_train)

# Test the model
X_test_counts = count_vectorizer.transform(X_test)
predictions = clf.predict(X_test_counts)
score = precision_score(y_test, predictions, average='binary')

print('Precision score of the model:', score)"
Re-write the following SQL query in Python.  SELECT * FROM Movies WHERE category = 'horror';,"import sqlite3

conn = sqlite3.connect('movies.db') 
cursor = conn.cursor()

cursor.execute(""SELECT * FROM Movies WHERE category = 'horror'"")

result = cursor.fetchall()
for row in result:
    print(row)

conn.close()"
"Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.  A = [[3, 4], 
     [1, 2]]
B = [[7, 5],
     [0, 1]]","# Python
def matrixMultiplication(A, B):
    if len(A[0]) != len(B):
        return ""Matrix multiplication not possible""

    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]

    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                C[i][j] += A[i][k] * B[k][j]

    return C

A = [[3, 4], 
     [1, 2]]
B = [[7, 5],
     [0, 1]]
C = matrixMultiplication(A, B)

print(C) # Output = [[21, 17], [0, 2]]"
"Come up with a correct approach to optimize the following python program.  numbers = [1, 2, 3, 4, 5, 6]

for x in numbers:
    print(x)","numbers = [1, 2, 3, 4, 5, 6]

print(*numbers, sep='\n')"
Design a program in Python to detect the vowel in a given string.  Hello World,"def vowelCheck(inputString): 
    vowels = ['a','e','i','o','u','A','E','I','O','U'] 
    for x in inputString: 
        if x in vowels: 
            return x"
Convert a given SQL statement into a Python Pandas DataFrame.  SELECT * FROM book;,"import pandas as pd

df = pd.read_sql_query(""SELECT * FROM book;"", conn)"
"Using the data provided, generate a histogram in Python.  data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]","import matplotlib.pyplot as plt

data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]

# plotting the histogram 
plt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') 
  
# x-axis label 
plt.xlabel('Range of values') 
# y-axis label 
plt.ylabel('Number of Occurrences') 
# plot title 
plt.title('Histogram of data') 
  
# function to show the plot 
plt.show()"
Create a Python script to populate an array with random numbers from 1-100.  ,"import random

def populateArray(array_length):
 array = []
 for i in range(array_length):
 array.append(random.randint(1, 100))
 return array"
"Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, 
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.","from collections import Counter

text = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""

# Split the text into individual words
words = text.split()

# Create a counter object
counter = Counter(words)

# Get the top 10 most frequent words
top_words = counter.most_common(10)

print(top_words)

# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]"
"Given an array of strings, write a Python function to remove all duplicates and return the resulting array.  Example array: ['a', 'b', 'a', 'c', 'c', 'd']","def removeDuplicates(arr):
 result = [] 
  
 # traverse for all elements 
 for i in arr: 
  
  # check if exists in result 
  if i not in result: 
   result.append(i) 
  
 # return result 
 return result"
"Generate a Python script to find the longest common substring in two strings.  ""Helwallomst"", ""Welcome""","def longest_common_substring(str1, str2):
    match = 0
    substr = """"
    for i in range(len(str1)):
        for j in range(len(str2)):
            l = 0
            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):
                l += 1
            if l > match:
                substr = str1[i:i + l]
                match = l
    return substr

result = longest_common_substring(""Helwallomst"", ""Welcome"")
print(result)"
"Write a function in Python to search for a character in a given string.  String: “Hello”
Character: ‘l’","def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False"
"Write a python program to parse an XML document and return a list of tag objects.  <xml>
  <root>
    <child1 id=""1"">
      <subchild1 value=""a"">
      </subchild1>
      <subchild2 value=""b"">
      </subchild2>
    </child1>
    <child2 id=""2"">
      <subchild3 value=""c"">
      </subchild3>
      <subchild4 value=""d"">
      </subchild4>
    </child2>
  </root>
</xml>","def parse_xml(text):
    tag_objects = []

    root = ET.fromstring(text)
    for child in root:
        tag = Tag(child.attrib[""id""])
        for subchild in child:
            tag.add_value(subchild.attrib[""value""])
        tag_objects.append(tag)

    return tag_objects

class Tag:
    def __init__(self, tag_id):
        self.tag_id = tag_id
        self.values = []
    
    def add_value(self, value):
        self.values.append(value)"
"Based on a given input, create a function in Python to generate a random string of length 6.  ","import random
import string

def random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

random_string(6)"
"Create a Python program to average the elements of a 2-dimensional array.  a = [[3,2,6],
     [8,5,9],
     [4,7,1]]","def averageMatrix(matrix):
 sum = 0
 for row in matrix:
  for e in row:
   sum += e

 return sum / (len(matrix) * len(matrix[0]))

a = [[3,2,6],
     [8,5,9],
     [4,7,1]]

print(averageMatrix(a)) # 4.77"
Generate a code in Python to convert a number into binary format.  ,"""""""
Generate a code in Python to convert a number into binary format
""""""
def convert_to_binary(num):
    # check if the number is 0, if so return 0
    if num == 0:
        return 0
    
    # initialize an empty binary string
    binary = ''
    
    # loop through the number and get the remainder 
    # which is the bits of the binary
    while num != 0:
        remainder = num % 2
        binary = str(remainder) + binary
        num = num // 2
    
    return binary

# test the function 
print(convert_to_binary(10)) # 1010"
Generate a python program that takes an integer and then prints out the factorial of it?  7,"def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num - 1) 

n = int(input(""Enter a number: ""))  
print(""Factorial of"",n,""is"",factorial(n))"
Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.  ,"def convert_to_negative(x): 
    return ~x + 1 
  
def convert_to_positive(x): 
    return ~(x-1)"
Build a simple blockchain system in Python.  Not applicable,"import hashlib
import json

# Define the Block class
class Block:
 def __init__(self, index, timestamp, data, previous_hash):
 self.index = index
 self.timestamp = timestamp
 self.data = data
 self.previous_hash = previous_hash
 self.hash = self.hash_block()

 # Create the hash of the block contents
 def hash_block(self):
 sha = hashlib.sha256()
 sha.update((str(self.index) + 
 str(self.timestamp) + 
 str(self.data) + 
 str(self.previous_hash)).encode('utf-8'))
 return sha.hexdigest()

# Create the blockchain
def create_blockchain():
 blockchain = [create_genesis_block()]
 previous_block = blockchain[0]

 # Add blocks for each item in the list of transactions
 for i in range(1, len(blockchain_transactions)):
 block_to_add = next_block(previous_block, blockchain_transactions[i])
 blockchain.append(block_to_add)
 previous_block = block_to_add

# Print the blockchain
def print_blockchain():
 for block in blockchain:
 block_index = str(block.index)
 block_timestamp = str(block.timestamp)
 block_data = str(block.data)
 block_hash = block.hash"
"Write a Python script to find the GCD of two numbers.  1000, 500","def findGCD(a, b): 
   if (b == 0): 
       return a
   return findGCD(b, a % b)
    
a = 1000
b = 500
print(""GCD of number is: "", findGCD(a, b))"
"Create a program in Python to find the number of occurrences of an element x in a list y.  [3, 5, 2, 7, 4, 3, 2], x = 2","def count_x(x, y):
    count = 0
    for i in y:
        if i == x:
            count += 1
    return count"
"Write a Python program to convert ratings in a list of strings to a float.  ['4.5', '3.0', '2.5', '4.0']","def str_to_float(ratings):
    return [float(x) for x in ratings]"
Create a Python program that encrypts a message using a Caesar cipher.  ,"def caesar_encrypt(message, shift):
    encrypted_message = """"
    for c in message:
        encrypted_c = ord(c) + shift
        if encrypted_c > 126:
            encrypted_c -= 94
        encrypted_message += chr(encrypted_c)
    return encrypted_message"
"Write a Python program to find the largest three numbers in a list.  1, 6, 3, 8, 7, 4","my_list = [1, 6, 3, 8, 7, 4]
largest_three = sorted(my_list)[-3:]
print(largest_three)"
"Given two binary trees, check if the first tree is subtree of the second tree.  ","# Python program to check if 
# a binary tree is subtree of another binary tree 
  
# A binary tree node 
class Node: 
      
    # Constructor to create a new node 
    def __init__(self, data): 
        self.data = data 
        self.left = None
        self.right = None
  
def isSubTree(T, S): 
    
    if S is None: 
        return True
  
    if T is None: 
        return False
  
    if areIdentical(T, S): 
        return True
  
    return isSubTree(T.left, S) or isSubTree(T.right, S) 
  
  
def areIdentical(T, S): 
      
    if T is None and S is None: 
        return True
  
    if T is None or S is None: 
        return False
  
    return (T.data == S.data and areIdentical(T.left, S.left)and
        areIdentical(T.right, S.right))"
Write a Python program to swap the values of two variables.  ,"x = 5
y = 10

# Swapping process 
x, y = y, x 

print(""x:"", x) 
print(""y:"", y)"
"Optimize the following Python code to use built-in functions.  def removeDuplicates(array): 
    for i in range (len(array)): 
        for j in range (i + 1, len(array)): 
            if array[i] == array[j]: 
                array.pop(j)","def removeDuplicates(array): 
    finalArray = []
    for element in array: 
        if element not in finalArray: 
            finalArray.append(element)
    return finalArray"
"Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.  words =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']
n = 3","from collections import Counter

def frequent_words(words, n):
    counts = Counter(words)
    return [word for word, count in counts.items() if count >= n]

result = frequent_words(words, n)

print(result) # prints ['a', 'd']"
Devise a Python program to determine whether a given number is even or odd.  ,"def even_or_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd"""
Compose a basic blockchain system in Python.  ,"import hashlib
import json

# We will use SHA256 as our hashing function
def sha256(data):
    hash_function = hashlib.sha256()
    hash_function.update(data.encode('utf-8'))
    return hash_function.hexdigest()

# Create a class for each block
class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')

# Create a class for the blockchain
class Blockchain:
    def __init__(self):
        self.chain = []

    def add_block(self, data):
        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None
        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)
        self.chain.append(block)

    # This method will return the entire blockchain in JSON format
    def get_chain(self):
        return json.dumps([b.__dict__ for b in self.chain], indent=2)"
"Provide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures.  [21, 22, 20]","""""""
This code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.
""""""

def predict_temperature(temperature_list):
    alpha = 0.5 #Confidence value
    predicted_temperature = temperature_list[-1] # Initializing prediction
    for temperature in temperature_list[:-1]:
        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature
    return predicted_temperature

if __name__ == '__main__':
    temperature_list = [21, 22, 20]
    print(predict_temperature(temperature_list))"
"Write a function in Python to sort a dictionary according to its values, in descending order.  dictionary = {'apple': 2, 'banana': 3, 'mango': 1}","def sortDictionary(dictionary):
  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)
  sorted_dictionary = dict(sorted_list)
  return sorted_dictionary

sorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})
print(sorted_dictionary)"
"Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.  start = 5
end = 10","def multiplication_table(start, end):
	for x in range(start, end + 1):
		for y in range(start, end + 1):
			print(x * y, end = ""  "")
		print(""\n"")
		
multiplication_table(start, end)"
Write a python program to identify if a string s has matching parentheses  ,"def matching_paren(s):
    stack = []
    for char in s:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if len(stack) == 0:
                return False 
            stack.pop()
    
    if len(stack) == 0:
        return True
    else:
        return False"
"Develop a function in Python to take as input two array of integers and swap their elements.  arr1 = [3, 5, 6, 9]
arr2 = [2, 4, 7, 8]","def swap(arr1, arr2):
    assert len(arr1) == len(arr2)
    for i in range(len(arr1)):
        temp = arr1[i]
        arr1[i] = arr2[i]
        arr2[i] = temp"
"Can you design a function in Python for reversing a list?  [1,2,3,4,5]","def reverse_list(list): 
    return list[::-1]"
"Create a Python script to build a dictionary from string to string of the given samples.  Samples:
apple->red
banana->yellow
cherry->red","def build_dictionary(samples):
 dictionary = {}
 for sample in samples:
  key, value = sample.split(""->"")
  dictionary[key] = value
 return dictionary
 
samples = [""apple->red"", ""banana->yellow"", ""cherry->red""]
dictionary = build_dictionary(samples)

print(dictionary)"
"Write a Python script to find the average of numbers stored in an array.  [10, 20, 30]","def calculate_mean(numbers):
    total_sum = 0
    for num in numbers:
        total_sum += num
    mean = total_sum / len(numbers)
    return mean

print(calculate_mean([10, 20, 30]))"
"Generate a Python program that takes two lists as input and returns a new list containing only the common elements.  [1, 2, 3, 4, 8], [2, 6, 8, 10]","def common_elements(list1, list2): 
    common_list=[]
    for element in list1: 
        if element in list2: 
            common_list.append(element) 
    return common_list
  
list1 = [1, 2, 3, 4, 8] 
list2 = [2, 6, 8, 10]

common_list = common_elements(list1, list2) 

print(common_list)"
Create a loop in Python to print out all the odd numbers from 1 to 10.  ,"for i in range(1, 11):
    if i % 2 != 0:
        print(i)"
Create a machine learning model in Python that predecits customer lifetime value given a customer's past transactions.  Not applicable,"import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

# Preprocessing
df = pd.read_csv('transactions.csv')
X = df.iloc[:,:-1].values
y = df.iloc[:,-1].values
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Model Training
model = RandomForestRegressor()
model.fit(X, y)

# Prediction
customer_input = np.array([[10,100,5,...]]) # provide data related to past transactions
trans_scaled = scaler.transform(customer_input)
predicted_LTV = model.predict(trans_scaled)[0]
print('Predicted customer lifetime value', predicted_LTV)"
"Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.  Input List: [1, 2, 3, 4, 4, 5, 6]
Target: 8","def find_pair(lst, target):
    for i in range(len(lst)):
        if (target - lst[i]) in lst[i+1:]:
            return [lst[i], target-lst[i]]

find_pair([1,2,3,4,4,5,6], 8)"
"Develop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose.  ","class Matrix: 
    def __init__(self, m, n, lst): 
        self.m = m             
        self.n = n             
        self.mat = [] 
  
        c = 0
        for i in range(self.m): 
            a =[] 
            for j in range(self.n): 
                    a.append(lst[c]) 
                    c += 1
            self.mat.append(a) 
  
    def __str__(self): 
        output = """"
        for i in self.mat: 
            for j in i: 
                output += str(j) + "" ""
            output += '\n'
        return output 
  
    def add(self, mat2): 
        for i in range(self.m): 
            for j in range(self.n): 
                self.mat[i][j] += mat2.mat[i][j] 
  
    def sub(self, mat2): 
        for i in range(self.m): 
            for j in range(self.n): 
                self.mat[i][j] -= mat2.mat[i][j]
    
    def mul(self, mat2): 
        result = [] 
        for i in range(self.m): 
            a =[] 
            for j in range(mat2.n): 
                s = 0
                for k in range(self.n): 
                    s += self.mat[i][k] * mat2.mat[k][j] 
                a.append(s) 
            result.append(a) 
        self.mat = result 
        self.m = len(result) 
        self.n = len(result[0]) 
  
    def transpose(self):
        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]
        self.mat = result 
        self.m = len(result) 
        self.n = len(result[0])"
Write a Python script to generate a random number between 0 and 9.  ,"import random

random_num = random.randint(0,9)
print(random_num)"
"Create a Python Flask app that listens for POST requests on the '/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started on port 5000 and run in debug mode.  ","#!/usr/bin/env python
# coding=utf-8
import requests
import urllib2
import json
import os
from flask import Flask
from flask import request
from flask import make_response
from bs4 import BeautifulSoup 


# Flask app should start in global layout
app = Flask(__name__)


@app.route('/webhook', methods=['POST'])
def webhook():
	req = request.get_json(silent=True, force=True)
	res = makeWebhookResult(req)
    	res = json.dumps(res, indent=4)
    	print(res)
    	r = make_response(res)
    	r.headers['Content-Type'] = 'application/json'
    	return r

def makeWebhookResult(req):
	result = req.get(""result"")
	parameters = result.get(""parameters"")
	
	if req.get(""result"").get(""action"") == ""productos.sura"":
        	cliente = parameters.get(""tipo_cliente"")
       		speech = ""Buscando productos para "" + cliente
		
	elif req.get(""result"").get(""action"") == ""producto.info"":
        	producto = parameters.get(""producto"")
		if (producto==""hogar""):
			url = ""https://www.sura.com/soluciones-personas/seguro-hogar.aspx""
			r = urllib2.urlopen(url).read()
			soup = BeautifulSoup(r, 'html.parser')
			print soup
			contenido = soup.find_all(""div"",class_=""textRightColumn"")
			if (len(contenido)==0):
				speech = ""No encontrado""
			else:
				speech = contenido[0]
			
		else:
       			speech = ""Buscando informacion del producto "" + producto
        
    	elif req.get(""result"").get(""action"") == ""planes.salud"":
        	url = ""https://api.segurossura.com.co/public/v1/directory/products""
        	myResponse = requests.get(url)

        	if(myResponse.ok):
			jData = json.loads(myResponse.text)
			
		speech = ""Seguros Sura Colombia ofrece los siguientes planes de salud: \n""
		
        	for plan in jData:
	       		speech = speech + ""\n"" + plan[""nombreField""].title()
			
	elif req.get(""result"").get(""action"") == ""info.especialistas"":
		producto = parameters.get(""plan-salud"")
		ciudad = parameters.get(""ciudad"")
		especialidad = parameters.get(""especialidad"")
		
		url = ""https://api.segurossura.com.co/public/v1/directory/search/"" + producto + ""/"" + ciudad + ""?speciality="" + especialidad + ""&firstname=&secondname=&firstlastname=&secondlastname=""
		myResponse = requests.get(url)

		if(myResponse.ok):
			jData = json.loads(myResponse.text)
		
		speech = ""Los profesionales que coinciden con tu busqueda son: \n""

		for medico in jData:
	       		speech = speech + ""\n"" + medico[""nombreField""] + ""\n Direccion: "" + medico[""direccionField""].title() + ""\n Telefono: "" + medico[""telefonoField""] + ""\n""
			
	elif req.get(""result"").get(""action"") == ""coberturas.producto"":
		producto = parameters.get(""productos"")
		speech = ""Buscando coberturas del producto: "" + producto
	else:
        	speech ="" ""

	return {
        ""speech"": speech,
        ""displayText"": speech,
        #""data"": {},
        # ""contextOut"": [],
        ""source"": ""apiai-onlinestore-shipping""
    	}


if __name__ == '__main__':
	port = int(os.getenv('PORT', 5000))
   	print ""Starting app on port %d"" % port
   	app.run(debug=True, port=port, host='0.0.0.0')
"
"Modify an existing Python function to eliminate any redundancies  def just_me(name):
    print(""Hi, my name is ""+name+""."")
    print(""I am special and nothing else matters."")
    print(""What about you?"")","def just_me(name):
    print(""Hi, my name is ""+name+"". I am special and nothing else matters."")
    print(""What about you?"")"
Create a simple chatbot using Python and state diagrams.  Not applicable,"# Create the states
state0 = {
     'name': 'state0',
     'message': 'Hello! How can I help you?',
     'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'}
}

state1 = {
     'name': 'state1',
     'message': 'Sure, what kind of advice do you need?',
     'replies': {'Career advice': 'state3','Health advice': 'state4'}
}

state2 = {
     'name': 'state2',
     'message': 'Yes, I'll do my best! What do you want to know?',
     'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'}
}

state3 = {
     'name': 'state3',
     'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.',
     'replies': {}
}

state4 = {
     'name': 'state4',
     'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.',
     'replies': {}
}

state5 = {
     'name': 'state5',
     'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.',
     'replies': {}
}

state6 = {
     'name': 'state6',
     'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.',
     'replies': {}
}


# Initialize the state
current_state = state0

# Keep a record of conversation
conversation = []

while True:
 # Print the current state message
 print(current_state['message'])
 conversation.append(current_state['message'])

 # Get the user input
 user_input = input('>> ')
 conversation.append(user_input)

 # Update the state
 if user_input in current_state['replies']:
  current_state = eval(current_state['replies'][user_input])
 else:
  print(""I don't understand what you mean. Please try again."")

# End the conversation when the state is terminal
 if not bool(current_state['replies']):
  print('Goodbye!')
  break

print(""========================="")
print(""Conversation:"")
for message in conversation:
 print(message)"
Create a Python 3 program that takes an integer input from the user and prints its cube.  ,"number = int(input(""Please enter a number: ""))
cube = number**3
print(""The cube of the number is: "" + str(cube))"
"Write a Python program to find the first non-repeating character in a given list.  lst = [1, 2, 3, 4, 4, 3, 2, 1]","def first_non_repeating_char(lst):
    dct = {}
    
    for l in lst:
        if l in dct:
            dct[l] += 1
        else:
            dct[l] = 1
            
    for l in lst:
        if dct[l] == 1:
            return l
            
    return None

lst = [1, 2, 3, 4, 4, 3, 2, 1]
print(first_non_repeating_char(lst))"
Create a k-means clustering algorithm in Python.  ,"import numpy as np 

def kmeans(k, data): 
    """"""
    Perform k-means clustering on data
    """"""
    # randomly set initial centroids
    centroids = data[np.random.randint(low=0, high=len(data), size=k)]
    prev_centroids = np.zeros(centroids.shape)

    clusters = np.zeros(len(data))
    distances = np.zeros((len(data), k))
    
    # find the closest centroid for each sample
    while not np.allclose(centroids, prev_centroids):
        # save old centroids
        prev_centroids = centroids
    
        # get the distance between each point and each centroid
        for idx, centroid in enumerate(centroids):
            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)
    
        # assign each sample to the closest centroids
        clusters = np.argmin(distances, axis=1)
    
        # update centroids 
        for idx in range(k):
            centroids[idx] = np.mean(data[clusters == idx], axis=0)
    
    return clusters, centroids"
Write a Python code snippet that produces the following output:  ,"for i in range(7):
    for j in range(7):
        if (i + j) % 2 == 0:
            print('#', end='')
        else:
            print(' ', end='')
    print()"
Construct a Python class that takes a given number and calculates the sum of the digits.  6342,"class SumOfDigits:
    
    def __init__(self, num):
        self.num = num
    
    def calculate_sum_of_digits(self):
        total = 0
        for ch in str(self.num):
            total += int(ch)
        return total

digit_sum = SumOfDigits(6342)
result = digit_sum.calculate_sum_of_digits()
print(result)"
Implement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order.  ,"def sort_ascending(nums):
    for i in range(len(nums)):
        min_idx = i
        for j in range(i + 1, len(nums)):
            if nums[min_idx] > nums[j]:
                min_idx = j
        nums[i], nums[min_idx] = nums[min_idx], nums[i] 
    return nums"
"Create a feature extraction function in Python to extract data from a json string.  {""id"":111,""title"":""This is a sample title"",""body"":""This is a sample body text""}","def feature_extraction(input_str):
    import json
    data = json.loads(input_str)

    features = {
        ""id"": data[""id""],
        ""title"": data[""title""],
        ""body_len"": len(data[""body""])
    }

    return features"
"Construct a Python program to combine the elements of two lists into a list of tuples.  [1, 2, 3], [4, 5, 6]","def combine_list(array1, array2):
    return list(zip(array1, array2))"
"Design and implement a neural network in Python to predict the price of a house given a set of features.  [0.8, 0.4, 0.7]","import numpy as np
from keras.models import Sequential
from keras.layers import Dense

features = np.array([[0.8, 0.4, 0.7]])

model = Sequential()
model.add(Dense(64, input_dim=3, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(loss='mse', optimizer='adam', metrics=['mse'])

model.fit(features, batch_size=3,epochs=200)"
"Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.  [1,2], [3,4]","def dot_product(list1, list2):
  product = 0
  for i in range(len(list1)):
    product += (list1[i] * list2[i])
  return product
#Example
list1 = [1,2]
list2 = [3,4]

result = dot_product(list1, list2)
print(result)
#Output
11"
"Create a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.  Not applicable","import flask
from flask import request, jsonify

# Creating the application app
app = flask.Flask(__name__)


@app.route('/calculate', methods=['POST'])
def calculate():
    # Get the input data from the user
    data = request.get_json()

    age = data['age']
    gender = data['gender']
    car_model = data['car_model']

    # Calculate the insurance price
    # ...
    insurance_price = 0.00

    # Return the calculated insurance price in JSON format
    return jsonify({'insurance_price': insurance_price})
	
app.run(host='0.0.0.0', port=8006)"
"Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers  Start=1, End=20","def sieve_of_eratosthenes(start, end):
    prime = [True] * (end + 1)
    p = 2
    while p * p <= end:
        if prime[p]:
            for i in range(p * p, end + 1, p):
                prime[i] = False
        p += 1
    prime_numbers = []

    for p in range (start, end):
        if prime[p]:
            prime_numbers.append(p)

    return prime_numbers

print (sieve_of_eratosthenes(1, 20))"
"Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.  Range: 10-20","def sumOfRanges(start, end):
 sum = 0
 
 for i in range(start, end+1):
 sum += i*i
 
 return sum

sumOfRanges(10,20) #673"
"In Python, build a program that can remove all vowels from a given string.  ","def remove_vowels(string):
    vowels = ['a','e','i','o','u']
    new_string = ''
    for char in string:
        if char.lower() not in vowels:
            new_string += char
    return new_string"
"Improve the following function by using Python built-in functions:  def sum_array(array):
    '''A function that takes in an array of numbers and returns the sum of all the numbers'''
    total = 0
    for num in array:
        total = total + num
    return total","def sum_array(array):
    '''A function that takes in an array of numbers and returns the sum of all the numbers'''
    return sum(array)"
Write a python code for sorting n distinct integers using insertion sort.  ,"def insertion_sort(arr):
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], 
        # that are greater than key, 
        # to one position ahead of 
        # their current position 
        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key"
"Create a Python script for a django-like ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete.  Model. name - string","import sqlite3

class Model:

  def __init__(self):
    self.conn = sqlite3.connect("":memory:"")
    self.cursor = self.conn.cursor()

  def create(self,name):
    self.cursor.execute(
			""CREATE TABLE IF NOT EXISTS Models (name TEXT)""
		)
    self.cursor.execute(
			""INSERT INTO Models(name) VALUES (?)"",
			(name,),
		)
    self.conn.commit()

  def read(self):
    self.cursor.execute(""SELECT * FROM Models"")
    return self.cursor.fetchall()

  def update(self,name):
    self.cursor.execute(
			""UPDATE Models SET name = ? WHERE name = ?"", 
			(name, name,),
		)
    self.conn.commit()
  
  def delete(self, name):
    self.cursor.execute(
			""DELETE FROM Models WHERE name = ?"",
			(name,),
		)
    self.conn.commit()"
"Can you write a Python script to sort a list of strings alphabetically?  [""Hello"", ""Yes"", ""No"", ""World""]","strings = [""Hello"", ""Yes"", ""No"", ""World""]

strings.sort()

print(strings)"
Write a class in Python that can find the median of an unsorted list of numbers.  ,"class MedianFinder:
 def __init__(self):
     self._data = []
 
 def add(self, num):
     self._data.append(num)
 
 def find_median(self):
     data = sorted(self._data)
     n = len(data)
     return (data[(n-1)//2] + data[n//2])/2"
Generate an array of random numbers in Python.  size: 10,"import numpy as np

size = 10
random_array = np.random.randint(0, 100, size)
print(random_array)"
"Compute the edit distance between two strings in Python.  string1 = “kitten”
string2 = “sitting”","def editDistance(string1, string2, m, n):
    # Create an empty matrix
    dp = [[0 for x in range(n+1)] for x in range(m+1)] 
  
    # Filling the first column of the matrix
    for i in range(m+1): 
        dp[i][0] = i 
  
    # Filling the second column of the matrix 
    for j in range(n+1): 
        dp[0][j] = j 
  
    # Populate the matrix
    for i in range(1, m+1): 
        for j in range(1, n+1): 
  
            if string1[i-1] == string2[j-1]: 
                dp[i][j] = dp[i-1][j-1] 
            else: 
                dp[i][j] = 1 + min(dp[i][j-1],        # Insert
                                   dp[i-1][j],        # Remove 
                                   dp[i-1][j-1])      # Replace
  
    return dp[m][n] 
  
  
# Driver program 
string1 = ""kitten""
string2 = ""sitting""
m = len(string1) 
n = len(string2) 
print(editDistance(string1, string2, m, n))"
Create a 3-layer artificial neural network using Python and print the outcome.  ,"import numpy as np

# define the 3 layers #
input_layer = np.array([2, 3])
hidden_layer = np.array([[0.1, 0.4],
                         [0.8, 0.6],
                         [0.3, 0.9]])
output_layer = np.array([0.3, 0.7])

# compute the output of the 3-layer network #
hidden_layer_output = np.dot(input_layer, hidden_layer)
output = np.dot(hidden_layer_output, output_layer)

print(output)"
"Create a Python program to read in 15 integers and print the sum of them.  [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]","def sum_nums(nums):
    total = 0
    for num in nums:
        total += num
    return total

lst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]
total = sum_nums(lst)
print(total)"
"Implement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.  Not applicable","from flask import Flask, jsonify, request
from flask_mysqldb import MySQL

app = Flask(name)

# Mysql configuration
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'password'
app.config['MYSQL_DB'] = 'users'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'

mysql = MySQL(app)

@app.route('/users', methods=['POST'])
def create_user():
 name = request.json['name']
 email = request.json['email']

 cur = mysql.connection.cursor()
 cur.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
 mysql.connection.commit()
 cur.close()

 return jsonify({'message': 'User created'})

@app.route('/users', methods=['GET'])
def get_users():
 cur = mysql.connection.cursor()
 cur.execute(""SELECT * FROM users"")
 users = cur.fetchall()
 cur.close()

 return jsonify(users)

@app.route('/users/int:id', methods=['GET'])
def get_user(id):
 cur = mysql.connection.cursor()
 cur.execute(""SELECT * FROM users WHERE id=%s"", (id))
 user = cur.fetchone()
 cur.close()

 return jsonify(user)

if name == ""main"":
 app.run(debug=True)"
Explain the approach for solving a linear programming problem using the Simplex method in Python.  ,"The Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. 

To solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau."
"Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.  myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]","def get_greatest_2(items):
 max1 = max2 = float('-inf')
 for item in items:
 if item > max1:
 max1, max2 = item, max1
 elif item > max2:
 max2 = item
 return max1, max2

myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]
print('The greatest 2 numbers from the array:', get_greatest_2(myList))

Output:
The greatest 2 numbers from the array: (9, 8)"
"Write a python code that takes in a list of integers and removes all the duplicate elements from it.  [1, 2, 3, 2, 4, 5, 6, 3]","final_list = [] 
for num in list_of_integers: 
    if num not in final_list: 
    	final_list.append(num) 
print(final_list)"
"Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.  Not applicable","import numpy as np 

a = np.random.randint(1, 6, size=(3,3)) 
print(a)"
"Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?  [""Hello"",""World!"",""Good"",""Morning""]","words = [""Hello"",""World!"",""Good"",""Morning""]

words.sort(key=len)

print(words)"
Create a Python program to classify the sentiment of movie reviews using Natural Language Processing.  The movie was terrible. It felt like it would never end!,"import nltk
from nltk.sentiment import vader

sentence = 'The movie was terrible. It felt like it would never end!'

sid = vader.SentimentIntensityAnalyzer()
scores = sid.polarity_scores(sentence)

if scores['neg'] > scores['pos']:
  print('The sentiment of the sentence is negative!')
else:
  print('The sentiment of the sentence is positive!')"
"Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.  ","""""""
Parses a CSV and generates a new CSV that adds the total number of rows, total 
number of columns, and total amount of data for each attribute.
""""""

import csv

def parse_csv(filename):
    with open(filename) as csv_file:
        reader = csv.DictReader(csv_file)
        rows =0
        cols = 0
        data_totals = []
        for row in reader:
            rows += 1
            cols = len(row)
            for col in row:
                if len(data_totals) < cols:
                    data_totals.append([row[col],1])
                else:
                    existing_total = data_totals[cols - 1]
                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]
                    data_totals.append(new_total)
        #write to new csv
        with open('new_csv.csv', mode='w') as new_csv_file:
            writer = csv.writer(new_csv_file, delimiter=',', quotechar='""', quoting=csv.QUOTE_MINIMAL)
            writer.writerow(['Rows', 'Columns', 'Data Totals'])
            writer.writerow([rows, cols, data_totals])

if __name__ == '__main__':
    filename = 'test.csv'
    parse_csv(filename)"
"Create a class in Python which matches the following criteria.  A class Song with two instance variables, title and artist, and three methods, str(), eq(), and length().","class Song:
    def __init__(self, title, artist):
        self.title = title
        self.artist = artist
  
    def __str__(self):
        return f'Title: {self.title}\nArtist: {self.artist}'
    
    def __eq__(self, other):
        return self.artist == other.artist and self.title == other.title

    def length(self):
        return len(self.title)"
Create a Python script to scrape a given website.  ,"import requests
from bs4 import BeautifulSoup

url = '<your website url>'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

# Scraping code goes here...."
Create objects of type Student in Python containing relevant attributes.  ,"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender"
"Design and write a Python program to extract all public email addresses from a given string  ""My email is john@example.com and yours is john@gmail.com.""","import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)"
Generate a basic REST API with authentication and endpoints in Python.  Not applicable,"from flask import Flask, request
from flask_restful import Resource, Api
from flask_jwt import JWT, jwt_required

app = Flask(name)
api = Api(app)

# Setup JWT authentication
app.secret_key = 'super-secret-key'
jwt = JWT(app, authenticate, identity)

items = []

class Item(Resource):
 @jwt_required()
 def get(self, name):
 for item in items:
 if item['name'] == name:
 return item
 return {'item': None}, 404

 def post(self, name):
 new_item = {'name': name, 'price': 12.00}
 items.append(new_item)
 return new_item, 201


class ItemList(Resource):
 def get(self):
 return {'items': items}


api.add_resource(Item, '/item/<string:name>')
api.add_resource(ItemList, '/items')

if name == 'main':
 app.run(port=5000, debug=True)"
"Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.  [{""id"": 1, ""inputs"": [1,2,3]}, {""id"": 2, ""inputs"": [2,3,4]}]","def calculate_result(obj_list):
 result_list = []

 for obj in obj_list:
  result = {}
  result['id'] = obj['id']
  result['result'] = sum(obj['inputs'])

 result_list.append(result)

return result_list

obj_list = [{""id"": 1, ""inputs"": [1,2,3]}, 
{""id"": 2, ""inputs"": [2,3,4]}]

print(calculate_result(obj_list))

# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]"
Reverse an input string using Python.  Hello World!,"def rev_string(s): 
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))"
"Create an algorithm in Python to find the longest common subsequence of two sequences.  x = ""abcdaf"";
y = ""acbcf"";","#Function to find the LCS of two strings
def find_lcs(x, y): 
    # Find lengths of the two strings 
    m = len(x) 
    n = len(y) 
    
    #To store the lengths of longest common subsequences
    lcs = [[0 for x in range(n+1)] for x in range(m+1)] 
  
    #Fill the table in bottom up manner 
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0: 
                lcs[i][j] = 0
            elif x[i-1] == y[j-1]: 
                lcs[i][j] = lcs[i-1][j-1] + 1
            else: 
                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) 
  
    #To store one of the possible common subsequence
    index = lcs[m][n] 
    lcs_str = [""""] * (index+1) 
    lcs_str[index] = """"
  
    #Following loop code is used to find one of the longest common subsequence
    i = m 
    j = n 
    while i > 0 and j > 0: 
  
        #If current character in X and Y are same,then
        # reduce both the count and add the character to the result string
        if x[i-1] == y[j-1]: 
            lcs_str[index-1] = x[i-1] 
            i-=1
            j-=1
            index-=1
  
        # If not same, move to the left, top or corner (diagonal) cell 
        #Whichever has the max value
        elif lcs[i-1][j] > lcs[i][j-1]: 
            i-=1
        else: 
            j-=1
  
    # Return the longest common subsequence
    return """".join(lcs_str)

# Main function
x = ""abcdaf""
y = ""acbcf""
res = find_lcs(x,y)
print(""The Longest Common Subsequence is:"")
print(res)

# Output: The Longest Common Subsequence is: 
# abcf"
"Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character.  ","import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits + string.punctuation
    pwd_length = 8

    password = ''
    for i in range(pwd_length):
        password += random.choice(chars)
    
    # Check if at least one special character exists in the password
    if any([char in string.punctuation for char in password]):
        return password
    else:
        return generate_password()

print(generate_password())"
"Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.  [1, 2, 3, 4, 5]","def sum_list(lst):
  total = 0
  for num in lst:
    total += num
  return total

sum_list([1,2,3,4,5])"
"Edit the Python program to sort words in a given string by their length in decreasing alphabetical order.  my_string = ""This is the string which is to be sorted""","my_string = ""This is the string which is to be sorted""
  
words = my_string.split(' ') # split string into list of words 
  
# create a list of tuples where the first element 
# is the length of the word and the second element 
# is the word itself  
words_with_length = [(len(word), word) for word in words] 
  
# sort list of tuples according to 1st element of tuple i.e. length of word 
words_with_length.sort(reverse = True) 
  
# wl contains list words in decreasing order of their length 
# now use join() to join all words whith "" "" 
sorted_string = "" "".join([i[1] for i in words_with_length]) 
  
# print sorted string 
print(sorted_string)"
"Write a python program to calculate maximum revenue.  prices = [10, 7, 5, 8, 11, 9]","def max_revenue(prices):
    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] 
    max_diff = 0
    for i in range(len(diff)): 
        for j in range(i + 1, len(diff) + 1): 
            current_diff = sum(diff[i:j]) 
            if current_diff > max_diff: 
                max_diff = current_diff 
 
    return max_diff"
Write a Python program to print the following output pattern  ,"for i in range(1,6):
    for j in range(1,i+1):
        print(j, end="""")
    print()"
"Develop a loop that prints a python array from the end to the beginning.  arr = [1, 2, 3, 4, 5]","def printArrayReverse(arr): 
    for i in range(len(arr) - 1, -1, -1): 
        print(arr[i], end = "" "")

printArrayReverse(arr)"
"Given a list of phone numbers, extract only the ones that start with 08 using Python.  ['0834567', '0945678', '07123456', '08901234', '07890123']","phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']
result = [number for number in phone_numbers if number.startswith('08')]
print(result)"
"Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.  list = [""apple"", ""banana"", ""peach"", ""orange"", ""grape""]
search_query = ""apple""","def search_list(list, search_query):
    result = []
    for i in range(len(list)):
        if list[i] == search_query:
            result.append(i)
    return result

search_list(list, search_query) # returns [0]"
"Write a function in Python that takes an array of integer values and reverses the order of the values.  [1, 2, 3, 4, 5]","def reverse_array(arr):
  return arr[::-1]  # Returns a slice of the list in reverse order"
Write a function in Python to create a random string of 10 characters.  ,"import random

def generate_string(string_length):
    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    random_string = ''.join(random.choices(random_characters, k=string_length))
    return random_string

print(generate_string(10)) # Length: 10"
Develop a Tic Tac Toe game in Python.  ,"# define the board
board = ["" "" for i in range(9)]

def print_board():
    row1 = ""| {} | {} | {} |"".format(board[0], board[1], board[2])
    row2 = ""| {} | {} | {} |"".format(board[3], board[4], board[5])
    row3 = ""| {} | {} | {} |"".format(board[6], board[7], board[8])

    print()
    print(row1)
    print(row2)
    print(row3)
    print()

# define player turn
def player_turn(icon):

    if icon == ""X"":
        number = 1
    elif icon == ""O"":
        number = 2
        
    print(""Your turn player {}"".format(number))
    
    choice = int(input(""Enter your move (1-9): "").strip())
    if board[choice -1] == "" "":
        board[choice -1] = icon
    else:
        print()
        print(""That space is taken!"")

# check win
def is_victory(icon):
    if (board[0] == icon and board[1] == icon and board[2] == icon) or \
        (board[3] == icon and board[4] == icon and board[5] == icon) or \
        (board[6] == icon and board[7] == icon and board[8] == icon) or \
        (board[0] == icon and board[3] == icon and board[6] == icon) or \
        (board[1] == icon and board[4] == icon and board[7] == icon) or \
        (board[2] == icon and board[5] == icon and board[8] == icon) or \
        (board[0] == icon and board[4] == icon and board[8] == icon) or \
        (board[2] == icon and board[4] == icon and board[6] == icon):
        return True
    else:
        return False
        
# define main function
def main():
    print(""Welcome to Tic Tac Toe!"")
    print_board()
    
    while True:
        player_turn(""X"")
        print_board()
        if is_victory(""X""):
            print(""X Wins! Congratulations!"")
            break
        elif not "" "" in board:
            print(""It's a tie!"")
            break

        player_turn(""O"")
        print_board()
        if is_victory(""O""):
            print(""O Wins! Congratulations!"")
            break
        elif not "" "" in board:
            print(""It's a tie!"")
            break


main()"
"Write Python code to merge two sorted lists.  Lists A and B contain the elements [2,4,6] and [3,5,7] respectively.","def merge_sorted_lists(listA, listB): 
    merged_list = []
    ptrA = 0
    ptrB = 0
    while ptrA < len(listA) and ptrB < len(listB): 
        if listA[ptrA] <= listB[ptrB]: 
            merged_list.append(listA[ptrA]) 
            ptrA += 1
        else: 
            merged_list.append(listB[ptrB]) 
            ptrB += 1
    while ptrA < len(listA): 
        merged_list.append(listA[ptrA]) 
        ptrA += 1
    while ptrB < len(listB):
        merged_list.append(listB[ptrB])
        ptrB += 1
    return merged_list"
"Create a Python program to find the longest common subsequence between two strings.  string 1 = ""ABACEDF""
string 2 = ""ABDCF""","# Program to find the longest common subsequence between two strings 
def lcs(X, Y): 
    # find the length of the strings 
    m = len(X) 
    n = len(Y) 

    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 

    # Following steps to build L[m+1][n+1] in bottom up manner 
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 

    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 

# Driver program 
X = ""ABACEDF""
Y = ""ABDCF""

print(""Length of LCS is "", lcs(X, Y))"
Construct a naive bayes classifier using python to classify emails as spam or not spam.  ,"from sklearn.naive_bayes import GaussianNB

# Create a Gaussian Classifier
model = GaussianNB()

# Train the model using the training sets 
model.fit(X_train, y_train)

# Predict Output 
y_pred = model.predict(X_test)"
"This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.  ","#! /usr/bin/python2.7
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

import errorvalues as ev # github.com/stefantkeller/errorvalues

from VECSELsetup.eval.varycolor import varycolor
from VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance


def main():
    # before running this script:
    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra
    #   run calibration.py (with appropriate calib measurements)
    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)
    logfile = '../24_LL_ev/20150211_sample21-1-d6/spot333um.csv'
    calib_folder = '../24_LL_ev/20150204_calib_333um_s21-1-d6'
    
    
    #------------------------------------
    # calibration
    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.
    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])
    
    
    #------------------------------------
    # load measurement
    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])
    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)
    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty


    #------------------------------------
    # calculate using calibration
    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}
    for T in Temperatures:
        reflected[T] = refl_lut(refl[T])
        pumped[T] = pump_lut(pump[T])
        absorbed[T] = pumped[T] - reflected[T]
        emitted[T] = emis_lut(laser[T])
        dissipated[T] = absorbed[T] - emitted[T]

        
    #
    #------------------------------------
    # invoke instructions for plot and fit
    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!
    # (easy to repeat the plot at a later time)
    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions
    instrfile = logfile[:-4]+'_instr.csv'
    plotinstructions_write(instrfile,Temperatures,calib_folder)
    
    #------------------------------------
    # retrieve instructions
    instr = plotinstructions_read(instrfile)
    
    #
    #------------------------------------
    # translate instructions
    str2lst = lambda s: map(float,s[1:-1].split(','))

    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)
    fontsize = float(instr['fontsize'])
    title = instr['title']
    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots
    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot
    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)
    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)
    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis
    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.
    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot
    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate
    llow0 = {}
    lhigh0 = {}
    texty1 = {}
    for T in Temperatures:
        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity
        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops
        texty1[T] = float(instr['texty1[{0}]'.format(T)])

    
    
    #
    #
    #------------------------------------
    #------------------------------------
    # plot
    cols = varycolor(3*len(Temperatures))


    plt.subplot(3,1,1)
    cnt = 0 # color counter

    q0,m0 = {},{} # for linreg
    for T in Temperatures:

        # linreg
        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],
                                emitted[T].v()[llow0[T]:lhigh0[T]],
                                emitted[T].e()[llow0[T]:lhigh0[T]],
                                overwrite_zeroerrors=True)

        emax,emaxi = ev.max(emitted[T],True)
        amax = absorbed[T][emaxi]
        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)
        # plot
        plt.errorbar(absorbed[T].v(),emitted[T].v(),
                     xerr=absorbed[T].e(),yerr=emitted[T].e(),
                     c=cols[cnt],linestyle=' ')
        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])

        plt.text(textx,texty1[T],
                 '${0}$$^\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),
                 color=cols[cnt],fontsize=fontsize)
        cnt+=3

    plt.title(title)
    plt.xlabel('Absorbed power (W)')
    plt.ylabel('Emited power (W)')
    plt.xlim(xlim)
    plt.ylim(ylim1)
    plt.grid('on')
    
    #plt.show()

    
    #------------------------------------
    plt.subplot(3,1,2)
    cnt = 0 # reset color counter

    q1,m1 = {},{}
    for T in Temperatures:
        relref = reflected[T]/pumped[T]*100
        
        # plot
        plt.errorbar(absorbed[T].v(),relref.v(),
                     xerr=absorbed[T].e(),yerr=relref.e(),
                     c=cols[cnt],linestyle=' ')
        cnt+=3

    plt.title(title)
    plt.xlabel('Absorbed power (W)')
    plt.ylabel('Reflectivity (%)')
    plt.xlim(xlim)
    plt.ylim(ylim2)
    plt.grid('on')

    #plt.show()
    
    #------------------------------------
    # plot dissipation and spectra
    plt.subplot(3,1,3)
    cnt = 0 # reset
    
    q3,m3 = {},{}
    for T in Temperatures:
        if T in plot_temps_for_3:
            # lambda_short
            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), 
            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),
            #             c=cols[cnt],linestyle=' ')
        
            # lambda_long
            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1
            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],
                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],
                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],
                                    overwrite_zeroerrors=True)
            
            # show only a part, not to confuse reader
            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], 
            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],
            #             c=cols[cnt],linestyle=' ')
            
            # show the whole range
            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), 
                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),
                         c=cols[cnt],linestyle=' ')
            
        cnt += 3

    plt.title(title)
    plt.xlim(xlim3)
    plt.ylim(ylim3)
    plt.xlim()
    plt.xlabel('Dissipated power (W)')
    plt.ylabel('Wavelength (nm)')
    plt.grid('on')
    cnt = 0 # reset
    
    
    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets
    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes
    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])
    
    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th
    R_th = dldD/dldT
    for T in Temperatures:
        if T in plot_temps_for_3:
            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])
        cnt+=3
    
    plt.text(textx3,texty3[0],
             '$\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),
             color='k')
    
    R_th = R_th.round(2)
    therm_imp = 'Thermal impedance: $({0})$ K/W'.format(R_th)
    plt.text(textx3,texty3[1],
             therm_imp,color='k')
    print therm_imp

    
    for T in Temperatures:
        print meantemp[T]
    
    plt.show()



if __name__ == ""__main__"":
    main()
"
How can you return two values from a Python function?  ,"There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:

def get_multi_values():
    value1 = ""ABC""
    value2 = 123
    return value1, value2

value1, value2 = get_multi_values()
print(value1, value2)"
Generate a Python program to count the number of pairs with given sum x  X = 10,"def count_pairs(numbers, x):
    count = 0
    i, j = 0, len(numbers) - 1
    while i < j: 
        sum = numbers[i] + numbers[j]
        if sum == x: 
            count += 1
            i += 1
        elif sum < x: 
            i += 1 
        else: 
            j -= 1
    return count"
"Create a Celery task in Python to send an email.  recipient_name = 'John Smith'
recipient_email = 'john@example.com'
subject = 'Hello World'
message = 'This is a test email.'","from celery import Celery
from flask_mail import Message

app = Celery('tasks', backend='redis://localhost')

@app.task
def send_email(recipient_name, recipient_email, subject, message):
 msg = Message(subject, sender='example@example.com', recipients=[recipient_email])
 msg.body = message
 mail.send(msg)"
"Optimize the following python code using best practices  def linear_search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1","def linear_search(arr, x):
    for index, item in enumerate(arr):
        if item == x:
            return index
    return -1"
Create a Python program to find the nth Fibonacci number  ,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
"Write a Python program to identify the largest number in the given list.  [1000, 506, 299, 620, 35]","max_num = 0 

for num in lst : 
    if num > max_num : 
        max_num = num 

print(max_num)"
Write a Python program to find a substring in a string.  ,"def find_substring(source, substring):
    '''This function returns the start index of a substring in given string '''
    if substring not in source:
        return -1
    i=0
    while i < len(source):
        if source[i] == substring[0]:
            flag = True
            for j in range(len(substring)):
                if substring[j] != source[i+j]:
                    flag = False
                    break
            if flag:
                return i
        i += 1
    return -1"
"Given a list of numbers, create a Python script to print all the elements greater than 50.  [2, 60, 5, 4, 78, 32, 99]","nums = [2, 60, 5, 4, 78, 32, 99]

for num in nums:
    if num > 50:
        print(num)"
"Create a program in Python to sort a given array in ascending order using bubble sort.  [3,7,4,1]","def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [3,7,4,1]
bubble_sort(arr) 
print (""Sorted array :"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Generate a function in Python that takes a number and prints its factors.  Not applicable,"def print_factors(x):
  """"""
  This function takes a number and prints its factors
  
  :param x: The number whose factors to be printed 
  :return: None
  """"""
  
  print(""The factors of"",x,""are:"")
  for i in range(1, x + 1):
    if x % i == 0:
      print(i)
      
##
5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.
5. Input: Not applicable
5. Output: 
<form id=""myForm"" onsubmit=""submitForm(event)"">
  City:<br>
  <input type=""text"" name=""city""><br>
  <input type=""submit"">
</form>

<script>
function submitForm(event) {
  event.preventDefault();

  const form = document.getElementById('myForm');
  const city = form.querySelector('input[name=""city""]').value;

  const data = { city: city };

  const options = {
    method: 'POST',
    body: JSON.stringify(data),
    headers: {
      'Content-Type': 'application/json'
    }
  };

  fetch('/my-api/submit-form', options)
    .then(response => response.json())
    .then(data => {
      console.log(data);
    });
}
</script>"
"Write a python script to generate an array of random numbers between two specified values.  min = 0
max = 50","import random

# Generate an array of random numbers between two specified values
def generate_array(min, max):
 array = []
 
 for i in range(min, max):
  array.append(random.randint(min, max))
 
 return array
 
min = 0
max = 50
print(generate_array(min, max))"
"Create a Python program to filter out words containing five characters or less from a list of words.  [""Hello"", ""Good"", ""Where"", ""Been"", ""World"", ""House""]","# Function to filter out words containing five characters or less
def filterWords(arr):
    result = [word for word in arr if len(word) > 5]
    return result

# Get the input
arr = [""Hello"", ""Good"", ""Where"", ""Been"", ""World"", ""House""]

# Call the function
result = filterWords(arr)

# Print the result
print(""Filtered list of words:"", result)"
"Create a Python function to identify the number of even numbers present in a given list of numbers.  list = [1, 2, 3, 4, 5]","def countEvenNum(list):
    return len([x for x in list if x % 2 == 0])

list = [1, 2, 3, 4, 5]
print(countEvenNum(list))"
Write a Python function to generate a random string of length 8 containing alphanumeric characters.  ,"import string
import random

def generate_random_string(length):
 chars = string.ascii_letters + string.digits
 return ''.join(random.choice(chars) for _ in range(length))"
"Write a Python program to solve a linear equation system of the form: ax + by = c.  a, b, c = 2, 1, 4","def solve_linear_equation_system(a, b, c):
 x = (c - b) / a
 y = (c - a*x) / b
 return x, y

x, y = solve_linear_equation_system(a, b, c)
print(""x = {}, y = {}"".format(x, y)) # x = 2.0, y = 2.0"
"This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a ""properties"" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.  ","#!/usr/bin/env python
# coding: utf-8

from __future__ import (
    print_function,
    unicode_literals,
    absolute_import
)

import argparse
import json
import os


def get_path():
    return unicode(os.path.abspath('.'))


def parse_args():
    _parser = argparse.ArgumentParser()
    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')
    _parser.add_argument('--fixture_folder', type=str,
                         default='models/fixtures',
                         help='where fixtures are stored.'
                         )
    return _parser.parse_args()

def main(base_path):
    properties_to_save = []
    args = parse_args()
    path = os.path.sep.join([base_path,
                             'app',
                             args.fixture_folder,
                             args.fixture])
    with open(path) as file_:
        data = json.load(file_)
    properties = data['properties']
    for property_ in properties:
        property_.pop('id')
        properties_to_save.append(Property(**property_))
    Property.objects.insert(properties_to_save)

    return len(properties_to_save)


if __name__ == '__main__':
    from app.models.properties import Property
    base_path = get_path()
    out = main(base_path)
    print(""{} objects saved"".format(out))"
"Create an algorithm in Python to determine the most efficient order of tasks from an array of given tasks.  tasks = [Task1, Task2, Task3, Task4, Task5]","def most_efficient_order(tasks):
    """"""
    This method takes a list of tasks and produces the most efficient order for completing the tasks.

    Parameters
    ----------
    tasks: List
        A list of tasks to be performed.

    Returns
    -------
    List
        An ordered list of tasks representing the most efficient order for completing the tasks.
    """"""
    tasks_to_complete = tasks.copy()
    order = [] 
    while tasks_to_complete:
        min_time = float(""inf"")
        task_index = None
        for i, task in enumerate(tasks_to_complete):
            if task.get_time() < min_time:
                min_time = task.get_time()
                task_index = i
        order.append(tasks_to_complete.pop(task_index))
    return order"
"Optimize a given Python script that reverse a string.  def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string","def reverse_string(string):
    return string[::-1]"
Create an HTML form with a submit button to send information to a Python program.  ,"<form action=""action.py"" method=""post"">
    <input type=""submit"" value=""Submit"">
</form>"
Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.  Not applicable,"def add(x, y): 
 """"""Returns the sum of x and y""""""
 return x + y"
"Create a Python program to read an array of integers and calculate their sum.  [1, 3, 5, 7]","def calculate_sum(arr):
  sum = 0

  for i in arr:
    sum += i

  return sum

input_array = [1, 3, 5, 7]

result = calculate_sum(input_array)

print(result) # prints 16"
"Create a Python program that multiplies two input numbers and prints the result.  a = 3
b = 4","def multiply(a, b):
    result = a * b
    print(result)

multiply(a, b)"
"The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:

- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.
- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.
- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.
- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.
- To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc').
- To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.  ","import os
import json
import logging
import fcntl

from jsub.util  import safe_mkdir
from jsub.util  import safe_rmdir
from jsub.error import RepoReadError
from jsub.error import TaskNotFoundError

ID_FILENAME = 'id'

class FileSystem(object):
	def __init__(self, param):
		self.__jsub_dir = os.path.expanduser(param.get('taskDir', '~/jsub/'))
#		self.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)

		self.__logger = logging.getLogger('JSUB')

#		self.__create_repo_dir()

		self.__json_format = param.get('format', 'compact')

	def save_task(self, data):
		if 'id' not in data:
			safe_mkdir(self.__jsub_dir)
			data['id'] = self.__new_task_id()
		safe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))
		task_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')

		data_str = self.__json_str(data)
		with open(task_path, 'a+') as f:
			fcntl.flock(f, fcntl.LOCK_EX)
			f.seek(0)
			f.truncate()
			f.write(data_str)

	def delete_task(self, task_id):
		safe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))

	def find_by_id(self, task_id):
		return self.task_data(task_id)

	def find_by_ids(self, task_ids):
		all_data = []
		for task_id in task_ids:
			try:
				td = self.task_data(task_id)
				all_data.append(td)
			except RepoReadError as e:
				self.__logger.debug(e)
		return all_data

	def all_task_data(self, order='asc'):
		task_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]
		task_ids.sort(key=int, reverse=(order=='desc'))
		return self.find_by_ids(task_ids)

	def task_data(self, task_id):
		safe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))
		task_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')
		with open(task_path, 'a+') as f:
			fcntl.flock(f, fcntl.LOCK_EX)
			f.seek(0)
			data_str = f.read()

		try:
			return json.loads(data_str)
		except ValueError as e:
			raise RepoReadError('JSON decode error on task %s: %s' % (task_id, e))

#	def __create_repo_dir(self):
#		safe_mkdir(self.__jsub_dir)

	def __new_task_id(self):
		task_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]
		if not task_ids:
			return 1
		task_ids.sort(key=int, reverse=True)
		return(task_ids[0]+1)

	def __json_str(self, data):
		if self.__json_format == 'pretty':
			return json.dumps(data, indent=2)
		return json.dumps(data, separators=(',', ':'))
"
"Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.  x_values = [""Python"", ""Java"", ""C++"", ""Javascript"", ""C#""]
y_values = [45, 25, 15, 10, 5]","import matplotlib.pyplot as plt

x_values = [""Python"", ""Java"", ""C++"", ""Javascript"", ""C#""]
y_values = [45, 25, 15, 10, 5]

plt.bar(x_values, y_values)

plt.title(""Popular Programming Languages"")
plt.ylabel(""Percentage of Use"")
plt.xlabel(""Languages"")

plt.show()"
"Generate a single Python line to create a list that contains elements from another list.  given_list = [1, 2, 3, 4, 5]",new_list = [element for element in given_list]
"Write a Python function to find the maximum of three numbers.  3, 4, 5","def max_of_three(a, b, c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

result = max_of_three(3, 4, 5)
print(result)"
"Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).  URL: https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System","import requests
from bs4 import BeautifulSoup

page = requests.get('https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System')
soup = BeautifulSoup(page.content, 'lxml')

planets_table = soup.find('table', class_='wikitable sortable')

planets = []
for row in planets_table.find_all('tr'):
 if row.find('th'):
 continue
 cells = row.find_all('td')
 planets.append({
 'name': cells[0].text,
 'mass': cells[2].text,
 'distance_from_sun': cells[5].text
 })

print(planets)"
Create a Python dictionary to store data about a student.  ,"student_data = {
    'name': 'John Smith',
    'year': 'Freshman',
    'gpa': 3.25,
    'courses': ['math', 'english', 'Computer Science', 'Statistics'],
    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']
}"
"Write a function in Python to remove duplicate entries from a list.  [1,2,2,3,3,4]","def removeDuplicates(input): 
    final_list = [] 
    for num in input: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list 

lst = [1,2,2,3,3,4]
print(removeDuplicates(lst))"
"Given the following array of numbers, write a Python program to find the maximum element.  numbers = [1, 43, 78, 3, 92, 42]","#import max from the built-in library
from max import max

#initialize array of numbers
numbers = [1, 43, 78, 3, 92, 42]

#find maximum element
print(max(numbers))

#output
92"
"Create a Python program to compress a given data sequence.  Data sequence: 9, -2, 6, 0, -7","def compress_sequence(nums):
    output = []
    temp = []

    for i in range(1, len(nums)):
        if nums[i-1] * nums[i] >= 0:
            temp.append(nums[i-1])
        else:
            temp.append(nums[i-1])
            output.append(temp)
            temp = []
    temp.append(nums[i])
    output.append(temp)

    return output

print(compress_sequence([9, -2, 6, 0, -7]))"
"Write a function in python to split an given array into two parts with equal sum.  [1, 2, 3, 4]","def split_equal_sum(arr):
    n = len(arr) 
    leftsum = 0
    rightsum = sum(arr)
    
    for i in range(n): 
        rightsum -= arr[i]
        if leftsum == rightsum:
            return True 
        leftsum += arr[i] 
    return False"
"Create a for loop in Python to calculate the total sum of all elements in the given list.  data = [1, 9, 3, 5]","total = 0
for element in data:
    total = total + element
print(total)"
"Suppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix.  dictionnary = [ ""dog"", ""deer"", ""deal"", ""dungeon"", ""dark"", ""dusk"" ]
prefix = ""d""","def auto_complete(dictionary, prefix):
    # list for words with the given prefix
    prefix_words = []

    # iterate through the dictionary
    for word in dictionary:
        # if the word starts with given prefix, 
        # add it to the list
        if word.startswith(prefix):
            prefix_words.append(word)

    return prefix_words


dictionary = [""dog"", ""deer"", ""deal"", ""dungeon"", ""dark"", ""dusk""]
prefix = ""d""

prefix_words = auto_complete(dictionary, prefix)
print(prefix_words)

# Output:
# ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']"
Design a neural network in Python to predict a customer’s annual income based on their age and education level.  Not applicable,"import numpy as np
import keras 
from keras.layers import Dense
from keras.models import Sequential

# Build model
model = Sequential()
model.add(Dense(64, input_dim = 2, activation = 'relu'))
model.add(Dense( 1))

# Compile the model
model.compile(loss = 'mean_squared_error',
              optimizer = 'adam')

# Obtain some data - age (years), education level (high school, college, university)
x_train = np.array([[25, 0], [30, 0], [35, 0], 
		    [40, 0], [45, 1], [45, 2],
		    [50, 1], [50, 2], [55, 1],
		    [55, 2], [50, 3], [60, 3]])

# Labels - annual income
y_train = [15000, 20000, 25000, 30000,
           40000, 45000, 50000, 60000, 
	   65000, 70000, 80000, 90000]

# Fit the model
model.fit(x_train, y_train, epochs = 150, batch_size = 2)

# Calculate the predicted annual income
age = 50
education = 3
annualIncome = model.predict(np.array([[age, education]]))
print(annualIncome)
# output: [[80000]]"
"Create a python program to classify text documents into two classes: positive and negative.  positiveText = ""This is a great movie!""
negativeText = ""This movie was terrible""","import nltk
from nltk.classify import NaiveBayesClassifier 
  
def label_words(words): 
    return dict([(word, True) for word in words]) 

positive_tokens = nltk.word_tokenize(positiveText) 
negative_tokens = nltk.word_tokenize(negativeText)

positive_data = [(label_words(positive_tokens), 'positive')] 
negative_data = [(label_words(negative_tokens), 'negative')]
 
train_data = positive_data + negative_data 
classifier = NaiveBayesClassifier.train(train_data) 
  
# classify 
classifier.classify( 
	label_words(nltk.word_tokenize(""This movie was ok"")))"
"Design a Python program to filter out the odd numbers from a list.  list1 = [1, 2, 3, 4, 5, 6]","def filter_odd_numbers(numbers):
    filtered_list = []
    for num in numbers:
        if num % 2 != 0:
            filtered_list.append(num)
    return filtered_list

list1 = [1,2,3,4,5,6]
filtered_list = filter_odd_numbers(list1)
print(filtered_list)  # [1, 3, 5]"
Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes.  Not applicable,"import psycopg2
from datetime import datetime, timedelta
import schedule
import time

conn = psycopg2.connect(
 host=""localhost"", 
 database=""db"", 
 user=""user"", 
 password=""password""
)

def refresh_data():
 cur = conn.cursor()
 query = 'REFRESH TABLE ""TableName"";'
 cur.execute(query)
 conn.commit()

# run the refresh_data job every 5 minutes
schedule.every(5).minutes.do(refresh_data)

while True:
 schedule.run_pending()
 time.sleep(1)"
"Make the following Python code snippet more efficient.  def determine_commission_rate(gross_sales):
    if gross_sales >= 10000:
        commission_rate = 0.1
    elif gross_sales >= 5000 and gross_sales < 10000:
        commission_rate = 0.07
    elif gross_sales < 5000:
        commission_rate = 0.05
    return commission_rate","def determine_commission_rate(gross_sales):
    if gross_sales >= 10000:
        return 0.1
    elif gross_sales >= 5000:
        return 0.07
    else:
        return 0.05"
Construct a Python program that computes the area of a circle with the given radius.  radius = 5,"import math

def area_circle(radius):
 return math.pi * (radius ** 2)

area = area_circle(radius)
print('The area of the circle is %.2f' % area)"
Implement a basic version control system in Python that keeps track of changes in the code.  ,"class VersionControl:
    def __init__(self, lines):
        self.lines = lines
        self.mark = 0
 
    def commit(self):
        self.mark += 1
        log_file = open(""log_file.txt"", ""a+"")
        log_file.write(str(self.mark) + "": "" + str(self.lines))
        log_file.close()
 
    def restore(self):
        log_file = open(""log_file.txt"", ""r"")
        lines = log_file.readlines()
        to_mark = self.mark-1
 
        self.lines = lines[to_mark]
        log_file.close()"
"Write a Python program to solve the Towers of Hanoi game.  starting = [(1, ""A""), (4, ""A""), (7, ""A""), (2, ""A""), (5, ""A""), (8, ""A""), (3, ""A""), (6, ""A"")]","def hanoi(n, source, spare, target):
    if n == 1:
        disk = source.pop(0)
        print(""Moving disk {0} from {1} to {2}"".format(disk[0], disk[1], target[1]))
        target.insert(0, disk)
    else:
        hanoi(n-1, source, target, spare)
        disk = source.pop(0)
        print(""Moving disk {0} from {1} to {2}"".format(disk[0], disk[1], target[1]))
        target.insert(0, disk)
        hanoi(n-1, spare, source, target)

n = 8
source = [(i, ""A"") for i in range(1, n+1)]
target = []
spare = []

hanoi(n, source, spare, target)"
Analyze a dataset of customers and create a classification model in scikit-learn to determine customer churn.  Not applicable,"# Python code
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Load the data set
data = pd.read_csv(""customer_data.csv"")

# Select features
X = data.drop(['churn'], axis=1)

# Select targets
y = data['churn']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the model
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions and measure accuracy
predictions = model.predict(X_test)
print(model.score(X_test, y_test))"
"Create a Django application with a model that stores the name, address, and email of a user.  ","# create Django app
django-admin startproject myapp

# create user model
from django.db import models

class User(models.Model): 
    name = models.CharField(max_length=100) 
    address = models.CharField(max_length=100)
    email = models.EmailField(max_length=100)

# migrate models
python manage.py makemigrations
python manage.py migrate"
Create a function in Python to convert a given number into its Roman form.  number = 15,"def int_to_Roman(number): 
  
    val = [ 
        1000, 900, 500, 400, 
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ] 
    syb = [ 
        ""M"", ""CM"", ""D"", ""CD"", 
        ""C"", ""XC"", ""L"", ""XL"", 
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
        ] 
    roman_num = '' 
    i = 0
    while  number > 0:
        for_val = number // val[i]
        roman_num += syb[i] * for_val
        number -= val[i] * for_val
        i += 1
    return roman_num"
Create a linked-list in Python that can traverse in both directions.  ,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None


class DoubleLinkedList:
    def __init__(self): 
        self.head = None
 
    def append(self, new_data): 
        new_node = Node(new_data) 
        if self.head is None:
            self.head =  new_node
        else: 
            curr_node = self.head
            while curr_node.next != None:
                curr_node = curr_node.next
            curr_node.next = new_node
            new_node.prev = curr_node
 
    def prepend(self, new_data):
        new_node = Node(new_data) 
        if self.head is None: 
            self.head = new_node
            return
        new_node.next = self.head
        self.head.prev = new_node 
        self.head = new_node

    def reverse(self):
        curr_node = self.head
        while curr_node:
            temp = curr_node.next
            curr_node.next = curr_node.prev
            curr_node.prev = temp
            curr_node = curr_node.prev
        if temp:
            self.head = temp.prev"
Program a python code to convert Celsius to Fahrenheit.  ,"def celsiusToFahrenheit(temp):
    return round((temp * 9/5) + 32, 2)"
"Create a machine learning algorithm in Python to categorize a dataset of records.  [
  {""label"": ""apple"", ""features"": [1, 1, 0]}, 
  {""label"": ""banana"", ""features"": [0, 1, 1]}, 
  {""label"": ""lemon"", ""features"": [0, 0, 1]}, 
  {""label"": ""orange"", ""features"": [1, 0, 0]}, 
  {""label"": ""pear"", ""features"": [0, 1, 0]}, 
]","import numpy as np
from sklearn.svm import SVC 

# Dataset 
training_data = [
 {""label"": ""apple"", ""features"": [1, 1, 0]}, 
 {""label"": ""banana"", ""features"": [0, 1, 1]}, 
 {""label"": ""lemon"", ""features"": [0, 0, 1]}, 
 {""label"": ""orange"", ""features"": [1, 0, 0]}, 
 {""label"": ""pear"", ""features"": [0, 1, 0]}, 
]

# Feature extraction 
X = []
y = []
for data in training_data:
 X.append(data['features'])
 y.append(data['label'])

# Model 
clf = SVC()
clf.fit(X, y) 

# Prediction 
predict_data = [1, 0, 1]
predicted_label = clf.predict([predict_data])

print(predicted_label[0])"
"Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.  Not applicable","from Crypto.Cipher import AES

key = b'Sixteen byte key'

def encrypt(plaintext):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(plaintext)

def decrypt(ciphertext):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.decrypt(ciphertext)"
"Suggest a valid Python syntax to calculate the sum of two variables using lambda  a = 3, b = 4","sum = lambda a, b : a + b
print(sum(3,4))"
Generate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9  Not applicable,"# Importing necessary libraries

import numpy as np
import pandas as pd
from tensorflow.keras.datasets import mnist
from tensorflow.keras.layers import Dense, Input, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical

# Loading data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Defining the neural network model

# Input layer
inputs = Input(shape=(28,28,))

# Hidden layer
h1 = Dense(64, activation='relu')(inputs)
h2 = Dropout(0.5)(h1)

# Output layer
outputs = Dense(10, activation='softmax')(h2)

# Compiling the model
model = Model(inputs=inputs, outputs=outputs)
model.compile(loss='categorical_crossentropy',
 optimizer='adam',
 metrics=['accuracy'])

# Data pre-processing

# Reshape inputs from (60000, 28, 28) to (60000, 784)
X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

# Normalize pixel values
X_train = X_train.astype('float32')
X_train /= 255
X_test = X_test.astype('float32')
X_test /= 255

# One-hot encode labels
y_train = to_categorical(y_train, num_classes=10)
y_test = to_categorical(y_test, num_classes=10)

# Fitting the model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)"
Explain the difference between a ``list`` and a ``tuple`` in Python.  ,"The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed."
Generate a Python program to calculate the Fibonacci number at a given position.  n = 10,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

n = 10
print(fibonacci(n))"
"Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).  Not applicable","import string
import random

# length of password
length = 8

# special characters
special_characters = ""!#$%&'()*+,-./:;<=>?@[\]^_`{|}~""

# generating password
password = random.choice(string.ascii_lowercase)
password += random.choice(string.ascii_uppercase)
password += random.choice(string.digits)
password += random.choice(special_characters)

for i in range(length):
   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)

password  = ''.join(random.sample(password,len(password)))

print (""Password is: "", password)"
Write a Python program to extract all the words starting with a specific letter  The letter is 's',"""""""
Extract all the words starting with a specific letter
""""""

def extract_words(word, letter):
    words_list = []
    for w in word.split():
        if w[0] == letter:
            words_list.append(w)
    return words_list

if __name__ == '__main__':
    words = 'This is a sample sentence to test the program'
    letter = 's'
    print(extract_words(words, letter))"
"Implement a hash table in Python that supports insert, delete and retrieve operations.  ","class HashTable:
    def __init__(self):
        self.table = [[] for _ in range(256)]
 
    def insert(self, key, value):
        h = hash(key) % 256
        for i, kv in enumerate(self.table[h]):
            if kv[0] == key:
                self.table[h][i] = (key, value)
                return
        self.table[h].append((key, value))
 
    def retrieve(self, key):
        h = hash(key) % 256
        for kv in self.table[h]:
            if kv[0] == key:
                return kv[1]
 
    def delete(self, key):
        h = hash(key) % 256
        for i, kv in enumerate(self.table[h]):
            if kv[0] == key:
                del self.table[h][i]"
"Create a search engine in Python to quickly search through a given array.  Array: ['school', 'hospital', 'bookstore', 'mall', 'theatre']","# Define the array
array = ['school', 'hospital', 'bookstore', 'mall', 'theatre']

# Function to perform linear search
def linearSearch(search_item):
    # Loop through array
    for i in range(len(array)):
        # If search item is found, return its position
        if array[i] == search_item:
            return i
    # If item is not found, return -1
    return -1

# Input search item
s = input(""Enter the item to be searched: "")

# Search the item
result = linearSearch(s)

# Print result
if result == -1:
    print(""Item not found."")
else:
    print(""Item is found at position ""+str(result))"
"Create a function in Python that prints out the largest value from a given list of numbers.  list = [2, 4, 1, 6]","def get_max_value(numbers): 
    return max(numbers)

print(get_max_value(list))  # 6"
"Write a python script that takes a list of numbers from 1 to 8  and prints its cubic values.  [1, 2, 3, 4, 5, 6, 7, 8]","list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]

for num in list_numbers:
    print(num**3)"
"Create a dictionary in Python with key-value pairs  Key: ""FirstName""
value: ""John""","my_dict = {
    ""FirstName"": ""John""
}"
Write a Python code to find the number of unique paths from a given source to a destination.  ,"def num_unique_paths(m, n):
    dp = [[0 for x in range(m)] for y in range(n)] 
  
    # Count of paths to reach any
    # cell in first column is 1  
    for i in range(n): 
        dp[i][0] = 1
  
    # Count of paths to reach any
    # cell in first column is 1  
    for j in range(m): 
        dp[0][j] = 1
  
    # Calculate count of paths for other 
    # cells in bottom-up manner using
    # the recursive solution 
    for i in range(1, n): 
        for j in range(1, m): 
  
            # By uncommenting the last
            # part the code calculatest he total
            # possible paths if the diagonal 
            # Movements are allowed 
            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]
  
    return dp[n-1][m-1]"
Generate a Python program to display a Fibonacci sequence of first n numbers.  ,"def Fibonacci(n):
    if n==1:
        return 0
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)

n = 10
for i in range(1, n):
    print(Fibonacci(i))"
"This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are ""download"", ""exist"", ""test"", ""list"", ""help"", and ""version"".  ","#!/usr/bin/env python
#-*- coding:utf-8 -*-
########################################################
# Name: Subtitles Client
# Site: http://RealGame.co.il
__author__ = 'RealGame (Tomer Zait)'
__license__ = 'GPL v3'
__version__ = '1.0'
__email__ = 'realgam3@gmail.com'
########################################################

from os import path
from sys import argv
from docopt import docopt

from engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS


__doc__ = \
""""""
Subtitles Client

Usage:
  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]
  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]
  {prog} test [<engines>...]
  {prog} (-l | --list)
  {prog} (-h | --help)
  {prog} (-v | --version)

Options:
  -l --list                 Show subtitles engine list.
  -h --help                 Show this screen.
  -v --version              Show version.
  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].
  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].
"""""".format(prog=path.basename(argv[0]),
           def_language=DEFAULTS['subtitle_language'],
           def_engine=DEFAULTS['subtitle_engine'])


def download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):
    if releases:
        for release in releases:
            for engine in engines:
                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']
                print ""[{engine: ^15}] Trying To Download Subtitles For: '{release}'"".format(engine=engine,
                                                                                             release=subtitle_release)
                sub_obj = SubtitleSite.class_factory(engine)
                subtitle_path = sub_obj.download_subtitle(release, lang)
                if subtitle_path:
                    print ""{0:17} Download Success: ({file_path}).\n"".format("""", file_path=subtitle_path)
                else:
                    print ""{0:17} Subtitles Not Found.\n"".format("""")


def is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):
    if releases:
        for release in releases:
            for engine in engines:
                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']

                sub_obj = SubtitleSite.class_factory(engine)
                exist_flag = sub_obj.is_subtitle_exist(release, lang)
                res = ""Exist""
                if not exist_flag:
                    res = ""Does Not "" + res
                print ""[{engine: ^15}] '{release}' - {res}."".format(engine=engine,
                                                                    release=subtitle_release,
                                                                    res=res)


def test_engines(engines):
    if not engines:
        engines = SUBTITLE_SITE_LIST.keys()

    for engine_key in engines:
        t = SubtitleSite.class_factory(engine_key)
        t.test_engine()


def main():
    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)

    if args['download']:
        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])
    elif args['exist']:
        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])
    elif args['test']:
        test_engines(args['<engines>'])
    elif args['--list']:
        for sub_site in SUBTITLE_SITE_LIST.keys():
            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)
            print sub_dict.get('class_name')


if __name__ == ""__main__"":
    main()
"
"Optimize the following Python program to find the maximum number in a list.  list = [9, 2, 5, 6, 4, 1]","def max_num(list):
  max_num = list[0]

  for num in list:
    if num > max_num:
      max_num = num
  
  return max_num"
"Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.  List of Strings: [""hello"", ""world"", ""good"", ""morning"", ""programming""]","def sortAlphabetically(strings): 
    strings.sort() 
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)"
"Create a Python program to print a formatted table of grades for a given set of students.  Students = [
    {
    'name': ""John"",
    'grade': 92
    },
    {
    'name': ""Alice"",
    'grade': 95
    },
    {
    'name': ""Bob"",
    'grade': 87
    }
]","def print_grade_table(students):
    max_name_length = max(len(student['name']) for student in students)
    line_template = ""{{name:<{max_name_length}}}   {{grade}}"".format(max_name_length=max_name_length)
    header = line_template.format(name='Name', grade='Grade')
    sep = '-' * len(header)
    print(header)
    print(sep)
    for student in students:
        print(line_template.format(**student))"
Design a Python code snippet that deletes all duplicates in a given list of numbers.  ,"def deleteDuplicates(list): 
    final_list = [] 
    for num in list: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list"
"Write a Python program to visually summarize the Twitter data.  Twitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.","import matplotlib.pyplot as plt

# Process the Twitter data to extract
# the relevant data fields
# ...

# Plot the tweet authors
plt.xlabel('Tweet Authors')
plt.ylabel('Number of tweets')
plt.title('Tweet Author Summary')
plt.bar(authors, num_tweets)
plt.show()

# Plot the number of likes
plt.xlabel('Tweets')
plt.ylabel('Number of Likes')
plt.title('Number of Likes Summary')
plt.bar(tweets, num_likes)
plt.show()

# Plot the number of retweets
plt.xlabel('Tweets')
plt.ylabel('Number of Retweets')
plt.title('Number of Retweets Summary')
plt.bar(tweets, num_retweets)
plt.show()"
"Develop a function in Python that takes in a string of sentences and removes all the punctuations.  ""This is a sample string!""","import string

def remove_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

if __name__ == '__main__':
    sentence = ""This is a sample string!""
    print(remove_punctuations(sentence))"
"Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.  data = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]]","import numpy as np
from sklearn import linear_model

X = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])
y = np.array([75000, 43000, 59000, 32000, 85000])

model = linear_model.LinearRegression()
model.fit(X, y)

prediction = model.predict([[2200, 3]])"
"Create a loop in Python that prints each item of the following list with a message:  my_list = ['A', 'B', 'C', 'D']","my_list = ['A', 'B', 'C', 'D']

for item in my_list:
    print(""The item is: {}"".format(item))"
Develop a regular expression in Python to match all numeric strings.  ,"import re 
  
# Regular expression to match all numeric strings 
pattern = '^[0-9]+$'
  
# Input string 
string = '123456789'
  
# Matching a pattern 
result = re.match(pattern, string) 
if result: 
    print(""String is a valid numeric string"") 
else: 
    print(""String isn't a valid numeric string"")"
"Create a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretaría Ejecutiva, Presidencia, and Presupuesto/Administración, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administración and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named ""proc4.png"" and a DOT file named ""proc4.dot"".  ","#!/usr/bin/env python
#  -*- coding: utf-8 -*-

""""""
BPMN diagram for FOMDES process 1
""""""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from bpmn_pgv import *
import pygraphviz as pgv

__author__ = 'mapologo'

PROCESS_LABEL = ""Liquidación de Créditos""
# A graph for FOMDES processes
F = pgv.AGraph(strict=False, directed=True)

F.graph_attr.update(label="""", rankdir=""TB"", splines=""ortho"", labelloc=""b"",
                    size=""8, 7.5"", forcelabels=""true"", ranksep=""0.25"", fontname=""Liberation Sans Narrow Condensed"")
F.node_attr.update(fontname=""Liberation Sans Narrow Condensed"")
F.edge_attr.update(fontname=""Liberation Sans Narrow Condensed"", fontsize=""10"")

se_cluster = {""se7"": (""Recibir el documento protocolizado"", ""start""),
              ""se8"": (""Revisar el documento protocolizado"", ""human""),
              ""se9"": ("""", ""end"")}

se_edges = {""se7"": {""se8"": {}},
            ""se8"": {""se9"": {""style"": ""invis""}}}

SE = add_cluster(F, ""se"", ""Secretaría Ejecutiva"", se_cluster, se_edges)

p_cluster = {""p1"": (""Firma del cheque"", ""human""),
             ""p2"": (""Entregar cheque a beneficiario"", ""message"")}

p_edges = {""p1"":{""p2"": {}}}

P = add_cluster(F, ""p"", ""Presidencia"", p_cluster, p_edges)

pr_cluster = {""pr2"": (""Verificar documentación legal y elaborar certificación de disponibilidad"", ""human""),
              ""pr3"": (""Crear las cuentas por cobrar"", ""human""),
              ""pr4"": (""Generar tablas de amortización"", ""human""),
              ""pr5"": (""Imprimir y firmar orden de liquidación y cheque"", ""human"")}

pr_edges = {""pr2"": {""pr3"": {}},
            ""pr3"": {""pr4"": {}},
            ""pr4"": {""pr5"": {}}}

PR = add_cluster(F, ""pr"", ""Presupuesto/Administración"", pr_cluster, pr_edges)

F.add_node(""SIGEFOMDES Administración"", image=IMAGE_PATH + ""database.png"", shape=""plaintext"", label="""", xlabel=""SIGEFOMDES Administración"")
F.add_node(""SISAC"", image=IMAGE_PATH + ""database.png"", shape=""plaintext"", label="""", xlabel=""SISAC"")

global_edges = {""Beneficiario"":  {""se7"": {""style"": ""dashed""}},
                ""se8"": {""pr2"": {""style"": ""dashed""}},
                ""pr3"": {""SIGEFOMDES Administración"": {""style"": ""dashed""}},
                ""pr4"": {""SISAC"": {""style"": ""dashed""}},
                ""pr5"": {""p1"": {""style"": ""dashed""}},
                ""p2"": {""se9"": {""style"": ""dashed""}, ""Beneficiario"": {""style"": ""dashed""}}}

add_edges(F, global_edges)

F.draw(""proc4.png"", prog='dot')
F.write(""proc4.dot"")
"
Write a python function to calculate an exponential series  ,"def exponential_series(x,n):
    sum = 0
    for i in range(n+1):
        sum += x ** i
    return sum"
"Design an algorithm in Python to add two large numbers represented as strings.  The two numbers: ""111"" and ""1337""","def add_large_numbers(num1, num2):
    num1 = num1[::-1]
    num2 = num2[::-1] 
    carry = 0
    result = """" 
   
    # Iterate over the length of the length of larger string  
    for i in range(max(len(num1), len(num2))): 
        if i < len(num1):
            digit1 = int(num1[i])
        else:
            digit1 = 0

        if i < len(num2):
            digit2 = int(num2[i])
        else:
            digit2 = 0
       
        sum_total = digit1 + digit2 + carry  
        carry = sum_total // 10  

        result += str(sum_total % 10) 

    # Add remaining carry  
    if carry > 0:  
        result += str(carry) 

    return result[::-1]

print(add_large_numbers(""111"", ""1337""))
# Output: 1448"
"Design an algorithm in Python, that takes an array and sort it in ascending order.  [10, 3, 9, 1, 15, 2]","def sort_ascending(array):
  array.sort()
  return array

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]"
"Complete the Python class below so that it can calculate the sum of two integers.  class Sum:
    def __init__(self, x, y):
        self.x = x
        self.y = y","class Sum:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def add(self):
        return self.x + self.y"
Suggest a completion for the following Python code to check if a given number is an Armstrong number.  def is_armstrong_number(num):,"def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    return True  
  else:
    return False"
"Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.  limit = 10
array = [1, 3, 5, 4, 2, 6]","def findMaxSum(limit, array):
    maxSum = 0
    for i in range(len(array)):
        currentSum = 0
        for j in range(i, len(array)):
            currentSum += array[j]
            if currentSum <= limit and currentSum > maxSum:
                maxSum = currentSum
    return maxSum"
Write a Python program to generate n-grams of the given text with a window size of 3.  The quick brown fox jumps over the lazy dog,"from collections import Counter


def generate_ngrams(text, window_size):
    text = text.lower().split(' ')
    ngrams = []
    for n in range(window_size, len(text)+1):
        for i in range(len(text)-n+1):
            ngrams.append(' '.join(text[i:i+n]))
    return Counter(ngrams)


text = ""The quick brown fox jumps over the lazy dog""
window_size = 3

ngrams_count = generate_ngrams(text, window_size)

print('\nNGRAMS COUNT:',ngrams_count)

# Output
# NGRAMS COUNT: Counter({'the quick brown': 3,
#            'quick brown fox': 2,
#            'over the lazy': 1,
#            'brown fox jumps': 1,
#            'fox jumps over': 1,
#            'the lazy dog': 1,
#            'jumps over the': 1,
#            'quick brown fox jumps': 1})"
Output the Fibonacci sequence as a list of integers in Python  ,"def fibonacci_sequence(n): 
    # Creating list of length n 
    fib_list  = [0]*n 
      
    # first and second terms 
    fib_list[0] = 0
    fib_list[1] = 1
      
    # Application of the recursive algorithm 
    for i in range(2, n): 
        fib_list[i] = fib_list[i-1] + fib_list[i-2] 
      
    return fib_list"
Develop a machine learning algorithm in Python to identify apples from bananas.  No Input,"import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVC

# Load data
X = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])
y = np.array([0, 0, 0, 1, 0, 1])

# Initialize classifier
clf = SVC(kernel='linear')

# Fit data
clf.fit(X, y)

# Test classifier
x_test = np.array([[2,2,2], [4,4,4]])

prediction = clf.predict(x_test)
print(prediction)"
"Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.  list1 = [""apple"", ""red"", ""green""]
list2 = [""banana"", ""yellow"", ""green""]","dict1 = {}
for lst in [list1, list2]:
 key = lst[0]
 val = lst[1:]
 dict1[key] = val

print(dict1)
# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}"
Generate a fuzzy search algorithm in Python that can match strings with near similarities.  ,"def find_matches(query, choices, threshold):
    # Convert query and choices to lower case
    query, choices = query.lower(), [choice.lower() for choice in choices]
    # Initialize empty list to store matches
    matches = []
    
    # Loop through each choice
    for choice in choices:
        # Calculate Levenshtein distance between query and choice
        distance = levenshtein_distance(query, choice)
        # If distance is less than threshold, append choice to matches
        if distance <= threshold:
            matches.append(choice)
    
    return matches"
"Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)  No input","import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()"
Is it possible to create a HTML page that displays a table of contents from the data stored in a database?  ,"Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page."
"Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.  salary.csv:
name, salary
John, 1000
Sara, 2000
Alice, 3000","import csv

def get_average_salary(filename):
  total = 0
  count = 0

  with open(filename, 'r') as csvfile:
    csvreader = csv.reader(csvfile)
    next(csvreader) # skip header

    # loop through the CSV rows
    for row in csvreader:
      total += int(row[1])
      count += 1
  
  return total/count

average_salary = get_average_salary('salary.csv')
print('Average Salary: ', average_salary)

# Output: 
# Average Salary: 2000.0"
Implement a supervised learning algorithm in Python for a classification task using the iris dataset.  Not applicable,"# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix

# Load and explore the data
dataset = pd.read_csv('iris.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Preprocess the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define the model
clf = KNeighborsClassifier(n_neighbors=5)

# Fit the model to the training set
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model's performance
cm = confusion_matrix(y_test, y_pred)
print(cm)"
"Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).  def check_number(num):
if num >= 1 and num <= 10:
   return True","def check_number(num):
  if (num > 0 and num < 11):
    return True
  else:
    return False"
Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.  n = 6,"def sierpinski_triangle(n): 
    # Drawing lines for first row 
    for i in range(2**n): 
        print(' ', end="" "") 
    
    # loop for printing n rows 
    for i in range(1, n+1): 
        # bit pattern for first and 
        # last line of each row 
        for j in range(2**(i-1), 2**i): 
            print('1', end="" "") 
        print() 
        
        # inner rows have opposite bit pattern 
        if i > 1: 
            for j in range(2**(i-1)+1, 2**i-1):  
                print('0', end="" "") 
            print() 
       
sierpinski_triangle(6)"
Write a function in Python to count the number of vowels in a string.  ,"def count_vowels(string):
    count = 0
    vowels = set(""aeiouAEIOU"")
    for letter in string:
        if letter in vowels:
            count += 1
    return count"
Implement a function f() in Python that takes an argument n and prints the multiplication table of n  ,"def f(n):
    for i in range(1, 11):
        print(""{} * {} = {}"".format(n, i, n*i))"
Write a python program to optimize the given objective function.  ,"from scipy.optimize import minimize 

def obj_func(x):
    # objective function
    # ...

def optimize(): 
    # set up optimization problem
    x0 = [0.0, 0.0, 0.0] 
    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) 
    return res.x

print(optimize())"
"Create a Python generator that returns numbers from a given list.  [1,3,5,7,9]","def list_generator(input_list):
    for item in input_list:
        yield item

gen = list_generator([1,3,5,7,9])
for item in gen:
    print(item)"
Develop a Python program to create an autocomplete system that predicts words based on the input text.  ,"def autocomplete(input_text):
    # Generate the word candidates
    word_candidates = generate_candidates(input_text)
    # Filter the word candidates 
    filtered_words = filter_candidates(word_candidates)
    # Rank the words and return the top 5 
    sorted_words = rank_words(filtered_words)
    return sorted_words[:5]"
Write a Python code snippet to print the unique elements of a given list.  ,"def print_unique(my_list):
    seen = set()
    for x in my_list:
        if x not in seen:
            print(x)
            seen.add(x)"
Create a Python program that convert a given string to a list of integers.  ,"def to_int_list(s):
    return [int(x) for x in s.split(',')]"
Create a basic blockchain in Python using only the core modules  Not applicable,"import hashlib
import json

class Blockchain:

 def __init__(self):
 self.chain = []
 self.transactions = []

 def create_block(self, nonce, previous_hash):
 block = {
 'block_number': len(self.chain) + 1,
 'timestamp': self._current_timestamp(),
 'nonce': nonce,
 'previous_hash': previous_hash
 }
 self.chain.append(block)
 return block

 def _current_timestamp(self):
 return round(time.time() * 1000)

 def hash_block(self, block):
 string_object = json.dumps(block, sort_keys=True)
 block_string = string_object.encode()
 raw_hash = hashlib.sha256(block_string)
 hex_hash = raw_hash.hexdigest()
 return hex_hash"
"Create a Python program to remove all duplicate elements from a list and preserving the original order.  [1, 3, 3, 5, 5, 7]","# Program to remove duplicate elements

def remove_duplicates(nums):
 new_list = []
 for num in nums:
 if num not in new_list:
 new_list.append(num)
 
return new_list

# Main program
nums = [1, 3, 3, 5, 5, 7]
dedup_nums = remove_duplicates(nums)
print(dedup_nums) # [1, 3, 5, 7]"
Generate a voltage signal with random noise using a Python script.  A signal of frequency 250 Hz and amplitude 1 V.,"import numpy as np 

freq = 250 
amplitude = 1 

t= np.linspace(0, 1, 1000) 
voltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)"
"Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values.  [3, 4, 2, 8, 15, 6]","def min_max(arr):
  min_val = min(arr)
  max_val = max(arr)
  return [min_val, max_val]

result = min_max([3, 4, 2, 8, 15, 6])
print(result)"
Construct a Python code that accepts a string as an input and returns the total number of vowels in the string  ,"def count_vowels(string): 
    vowels = ""aeiou""
    count = 0
    for s in string:
        if s.lower() in vowels:
            count += 1
    return count"
"Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.  Not applicable","for i in range(11):
 print(i*2)"
"Create a Python program that takes a string and indicates whether it is a palindrome or not.  ""racecar""","def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))"
Generate a machine learning model in Python using scikit-learn for classifying digits in the MNIST dataset.  mnist dataset,"# Import the necessary libraries 
from sklearn.datasets import fetch_openml
import numpy as np
from sklearn.linear_model import LogisticRegression

#Load the dataset
mnist = fetch_openml('mnist_784')

# Split into features and labels
X = mnist.data
y = mnist.target

# Reshape data to be valid
X = X.reshape((X.shape[0], -1))
print(X.shape, y.shape)

# Create a Logistic Regression classifier 
clf = LogisticRegression()

# Fit the model to the data 
clf.fit(X, y)"
Develop a Python script to generate an RSA public/private key pair.  Not applicable,"from Crypto.PublicKey import RSA

def generate_key_pair():
 key = RSA.generate(2048)
 pub_key = key.publickey().export_key().decode()
 with open('public.pem', 'w') as file:
  file.write(pub_key)
 
 priv_key = key.export_key().decode()
 with open('private.pem', 'w') as file:
  file.write(priv_key)

generate_key_pair()"
Create a web application in Python using Flask that will take user input and generate an HTML page with the input.  Not applicable,"from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        input_text = request.form.get('input_text')
        return render_template('result.html', input_text=input_text)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)

// result.html file
<html>
 <body>
  <h1>Your Input: </h1>
  <p>{{input_text}}</p>
 </body>
</html>"
"Implement a basic machine learning model in Python that performs binary classification on the given data.  [
 [0.3, 0.2, 0.6],
 [0.3, 0.1, 0.4],
 [0.2, 0.3, 0.4],
 [0.7, 0.4, 0.2],
 [0.5, 0.2, 0.1]
]","from sklearn import linear_model
from sklearn.metrics import accuracy_score

X = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]
y = [1, 0, 0, 1, 0]

model = linear_model.LogisticRegression()
model.fit(X, y)

y_pred = model.predict(X)
accuracy = accuracy_score(y, y_pred)

print('Model accuracy:', accuracy)"
Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.  ,"import re 
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords 

# Function to find the negation words
def findNegation(sentence):
    # save all the negation words
    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',
                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', 
                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} 
    words = nltk.word_tokenize(sentence)
    neg = []
    for word in words:
        if word in negationwords:
            neg.append(word)
    return neg

# Function to check if the sentence is affirmative or negative
def isAffirmativeorNegative(sentence):
     negationwords = findNegation(sentence)
    if len(negationwords)==0: 
        return ""Affirmative"" 
    else: 
        return ""Negative""    

sentence = ""He always comes late but I dont mind.""
result = isAffirmativeorNegative(sentence) 
print(result)  # prints Negative"
"Create an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions, as well as the ability to add additional global variables. The environment can execute Python code and analyze it for variable usage and imports. The environment also includes a stdout object that can be used to capture and display output from executed code.  ","import os
import ast
import traceback
import time
import sys
import types
import builtins
import collections
import astor
import weakref
from .jsonify import jsonify, jsonify_print, jsonify_print_expr
from .datalayer import Analysis, Execution, FileEdit
from .router import send
from . import stdlib

def now():
    return int(time.time() * 1000)

class Environment:

    extra_globals = {}

    active = weakref.WeakSet()

    def __init__(self, path):
        self.path = path
        self.globals = {
            ""print"": jsonify_print,
            ""print_expr"": jsonify_print_expr,
            ""jsonify"": jsonify,
            ""jsonify_print"": jsonify_print,
            ""listdir"": stdlib.listdir,
            ""__builtins__"": __builtins__,
            ""FILES"": stdlib.FilesDict(self.path),
        }
        for name in stdlib.builtin_names:
            self.globals[name] = getattr(stdlib, name)
        self._cached_analysis = {}
        self.active.add(self)

    predefined_names = set([""parsed""])

    def init_commands(self):
        """"""Returns a list of commands that represent the existing state of the
        filesystem""""""
        for path in os.listdir(self.path):
            if path.endswith("".json""):
                continue
            if not os.path.isfile(os.path.join(self.path, path)):
                continue
            try:
                with open(os.path.join(self.path, path), ""r"") as fp:
                    content = fp.read()
                yield FileEdit(filename=path, content=content, external_edit=True)
            except UnicodeDecodeError:
                pass

    def fixup_globals(self):
        for name, value in self.extra_globals.items():
            self.globals.setdefault(name, value)

    def execute(self, filename, content, subexpressions=False):
        print(""Executing"", filename, subexpressions)
        self.fixup_globals()
        stdout = Stdout()
        compiled = None
        try:
            parsed = ast.parse(content, filename, mode='exec')
            RewriteExprToPrint(subexpressions).walk(parsed)
            var_inspect = VariableInspector()
            var_inspect.walk(parsed)
            print(""varsed used:"", sorted(var_inspect.used), ""set:"", sorted(var_inspect.set), ""imported:"", var_inspect.imports)
            compiled = compile(parsed, filename, 'exec')
        except:
            stdout.write(traceback.format_exc())

        def displayhook(value):
            stdout.write_repr(value)

        orig_displayhook = sys.displayhook
        sys.displayhook = displayhook
        orig_stdout = sys.stdout
        orig_stderr = sys.stderr
        sys.stdout = stdout
        sys.stderr = stdout
        self.globals[""parsed""] = parsed
        self.globals[""ast""] = ast
        globals_before = self.globals.copy()
        start = time.time()
        try:
            try:
                if compiled:
                    exec(compiled, self.globals)
            except:
                traceback.print_exc()
        finally:
            end = time.time()
            sys.dipslayhook = orig_displayhook
            sys.stdout = orig_stdout
            sys.stderr = orig_stderr
        local_scope = dict(
            (name, value)
            for name, value in self.globals.items()
            if name not in globals_before or globals_before[name] is not value)
        defines = dict(
            (key, {
                ""json"": jsonify(local_scope[key]),
                ""type"": str(type(local_scope[key])),
            })
            for key in local_scope
            if not isinstance(local_scope[key], types.ModuleType))
        command = Execution(
            filename=filename,
            content=content,
            emitted=stdout.emitted,
            defines=defines,
            start_time=int(start * 1000),
            end_time=int(end * 1000),
            exec_time=int((end - start) * 1000),
            with_subexpressions=subexpressions,
        )
        send(command)

    def analyze(self, filename, content):
        print(""Analyzing"", filename)
        properties = {}
        try:
            parsed = ast.parse(content, filename, mode='exec')
            var_inspect = VariableInspector()
            var_inspect.walk(parsed)
        except:
            return
            properties[""parse_error""] = jsonify(traceback.format_exc())
        else:
            properties = var_inspect.json
        if properties != self._cached_analysis.get(filename):
            self._cached_analysis[filename] = properties
            send(Analysis(filename=filename, content=content, properties=properties))


class VariableInspector(astor.TreeWalk):

    builtin_names = dir(builtins)

    def init_variables(self):
        self.used = set()
        self.set = set()
        self.imports = set()
        self.in_target = False

    @property
    def json(self):
        used = set(self.used)
        for key in self.builtin_names:
            used.discard(key)
        for key in self.set:
            used.discard(key)
        for key in Environment.predefined_names:
            used.discard(key)
        return {
            ""variables_used"": list(used),
            ""variables_set"": list(self.set),
            ""imports"": list(self.imports)
        }

    def pre_arg(self):
        self.set.add(self.cur_node.arg)

    def pre_Name(self):
        if self.in_target:
            # Actually this is a set
            self.set.add(self.cur_node.id)
        else:
            self.used.add(self.cur_node.id)

    def pre_For(self):
        self.process_assignment(self.cur_node.target)

    def pre_Assign(self):
        self.process_assignment(self.cur_node.targets)

    def pre_withitem(self):
        self.process_assignment(self.cur_node.optional_vars)

    def pre_ExceptHandler(self):
        if self.cur_node.name:
            self.set.add(self.cur_node.name)

    def pre_alias(self):
        # Used in imports
        name = self.cur_node.asname or self.cur_node.name
        name = name.split(""."")[0]
        self.set.add(name)
        self.imports.add(name)

    def pre_FunctionDef(self):
        self.set.add(self.cur_node.name)

    def pre_ListComp(self):
        self.process_assignment(self.cur_node.elt)

    def process_assignment(self, item):
        if isinstance(item, list):
            for x in item:
                self.process_assignment(x)
            return
        old_in_target = self.in_target
        self.in_target = True
        try:
            self.walk(item)
        finally:
            self.in_target = old_in_target

class RewriteExprToPrint(astor.TreeWalk):

    expr_node_types = """"""
    UnaryOp
    BinOp
    BoolOp
    Compare
    Call
    IfExp
    Attribute
    Subscript
    ListComp SetComp GeneratorExp DictComp
    """""".split()
    # Skipped:
    #  UAdd USub Not Invert
    #  Add Sub Mult Div FloorDiv Mod Pow LShift RShift BitOr BitXor BitAnd MatMult
    #  And Or
    #  Eq NotEq Lt Gt GtE Is IsNot In NotIn
    #  Index Slice ExtSlice

    def __init__(self, subexpressions=False):
        self.subexpressions = subexpressions
        self.id_counter = 0
        astor.TreeWalk.__init__(self)
        if self.subexpressions:
            for method in self.expr_node_types:
                self.pre_handlers[method] = self.save_node_name
                self.post_handlers[method] = self.fixup_subexpressions
            del self.post_handlers['Module']

    def post_Name(self):
        if not self.subexpressions:
            return
        if isinstance(self.cur_node.ctx, ast.Load):
            self.replace(self.rewrite_expr(self.cur_node))

    def post_Module(self):
        node = self.cur_node
        node.body = [
            self.rewrite_expr(n) if isinstance(n, ast.Expr) else n
            for n in node.body]

    def save_node_name(self):
        self.cur_node.astor_repr = astor.to_source(self.cur_node)

    def fixup_subexpressions(self):
        new_node = self.rewrite_expr(self.cur_node, self.cur_node.astor_repr)
        self.replace(new_node)

    def rewrite_expr(self, node, expr_string=None):
        if expr_string is None:
            expr_string = astor.to_source(node)
        node_string = ast.Str(s=expr_string)
        self.id_counter += 1
        if isinstance(node, ast.Expr):
            new_node = ast.Expr(
                ast.Call(
                    func=ast.Name(id='print_expr', ctx=ast.Load()),
                    args=[node_string, node.value, ast.Num(n=self.id_counter)],
                    keywords=[],
                    starargs=None,
                )
            )
            new_node.is_print_expr = True
        else:
            new_node = ast.Call(
                func=ast.Name(id='print_expr', ctx=ast.Load()),
                args=[node_string, node, ast.Num(n=self.id_counter)],
                keywords=[],
                starargs=None,
            )
            new_node.is_print_expr = True
        ast.fix_missing_locations(new_node)
        return new_node


class Stdout:

    total_exprs_limit = 100
    expr_limit = 10

    def __init__(self):
        self.emitted = []
        self.total_exprs_printed = 0
        self.exprs_printed = collections.Counter()

    def write(self, content):
        self.emitted.append({
            ""type"": ""print"",
            ""time"": now(),
            ""parts"": [{""type"": ""str"", ""str"": content}],
        })

    def writejson(self, json):
        assert json.get(""type""), ""JSON objects must have a type""
        json.setdefault(""time"", now())
        self.emitted.append(json)

    def write_repr(self, o):
        self.emitted.append(jsonify(o))

    def flush(self):
        pass

def add_global(name, value):
    Environment.extra_globals[name] = value
    Environment.predefined_names.add(name)
    for env in Environment.active:
        env.globals.setdefault(name, value)
"
"Write a Python class to modify the case of the string  A String with the text: ""Hello World""","class StringCaseModifier:
    def __init__(self, string):
        self.string = string

    def to_upper(self):
        return self.string.upper()

    def to_lower(self):
        return self.string.lower()
    
    def to_title(self):
        return self.string.title()

if __name__ == '__main__':
    test_string = 'Hello World'
    string_modifier = StringCaseModifier(test_string)
    print(string_modifier.to_upper())
    print(string_modifier.to_lower())
    print(string_modifier.to_title())"
Generate a Python program to reverse the order of words in a given string.  ,"def reverse_words(str):
    return "" "".join(str.split()[::-1])"
"Write a Python program to replace a given string with another string.  sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""","sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""

new_sentence = sentence.replace(old_word, new_word)

print(""The new sentence is: '{}'"".format(new_sentence))"
"Write a python program to merge two lists of integers into one sorted list without using the in-built sort function.  list1 = [3, 5, 9, 1, 8];
list2 = [4, 11, 7, 2];","def merge_sort(list1, list2): 
    merged_list = list1 + list2 
    for i in range(len(merged_list)): 
        min_idx = i           
        for j in range(i+1, len(merged_list)): 
            if merged_list[min_idx] > merged_list[j]: 
                min_idx = j 
        merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] 
    return merged_list 
  
list1 = [3, 5, 9, 1, 8] 
list2 = [4, 11, 7, 2]
  
print(merge_sort(list1, list2))"
"Create a Python dictionary with three keys named ""Name"", ""Address"" and ""Phone"".  Name = 'John';
Address = '212 Smith Street';
Phone = '732-123-4567';","info = {
 'Name':Name,
 'Address':Address,
 'Phone':Phone
}"
"Implement a chatbot in Python that can provide customer support in a restaurant.  random_user_question.txt
What meals do you serve?","import random

# list of possible answers
possible_responses = [
 'We serve a variety of dishes - from salads to pizzas to steaks!',
 'Check out our menu for a full list of options',
 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?',
 'We have a great selection of meals! What kind of dish are you looking for?',
 'We have a unique selection of meals - have you checked out our menu?'
]

# read the user's question
with open('random_user_question.txt') as user_question:
    question = user_question.read()

# choose a random response
response = random.choice(possible_responses)

# display the response to the user
print(response)"
Design a Python program to simulate a simple ATM machine.  ,"# account class with the necessary functions 
class Account:
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdrawal(self, amount):
        self.balance -= amount

# ATM class with the necessary functions
class ATM:
    def __init__(self):
        self.accounts = []

    def createAccount(self, name, balance):
        account = Account(name, balance)
        self.accounts.append(account)

    def deposit(self, name, amount):
        for account in self.accounts:
            if account.name == name:
                account.deposit(amount)

    def withdrawal(self, name, amount):
        for account in self.accounts:
            if account.name == name:
                account.withdrawal(amount)

    def printBalance(self, name):
        for account in self.accounts:
            if account.name == name:
                print(name, "" Balance: "", account.balance)"
"Create a program in Python which will take in a list of strings, and print out the longest string in the list.  ['foo', 'test', 'longstring', 'bar']","def longest_string(str_list): 
    longest_str = '' 
    for str in str_list: 
        if len(str) > len(longest_str): 
            longest_str = str 
  
    return longest_str 

string_list = ['foo', 'test', 'longstring', 'bar'] 
long_string = longest_string(string_list) 

print(long_string)"
"Create a program in Python that will find the smallest number in a list of numbers.  [5, 4, 12, 17, 9]","def find_smallest_number(numbers):
    smallest = numbers[0] 
    for num in numbers:
        if num < smallest:
            smallest = num
    return smallest

print(find_smallest_number([5, 4, 12, 17, 9]))"
"Generate a Python code to compute the moving average of time-series data points.  window = 3
time_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]","def moving_average(data_points, window):
     moving_average = []
     for index in range(len(data_points)):
       start = 0 if index-window+1 < 0 else index-window+1
       window_data = data_points[start:index+1]
       average = sum(window_data)/len(window_data)
       moving_average.append(average)
 
     return moving_average
 
window = 3
time_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]
moving_average = moving_average(time_series, window)
print(moving_average)"
"Create a Python program to filter an array by a given criteria.  criteria = x % 5 == 0
array = [1, 2, 5, 10, 15, 20, 25, 30]","# Function to filter an array by a given criteria
def filter_array(array, criteria):
 # Create an empty list
 filtered_array = []
 # Iterate through the array
 for value in array:
  # Check if it matches the criteria
  if criteria(value):
   # If it matches, add it to the list
   filtered_array.append(value)

 # Return the filtered array
 return filtered_array

# Input criteria
def criteria(x):
 return x % 5 == 0

result = filter_array(array, criteria)
print(result) # Outputs [5, 10, 15, 20, 25, 30]"
"Create a Python function to find the maximum number from a list of non-negative integers.  list = [1, 3, 12, 5, 8, 10]","def find_max(list): 
  max_num = 0
  for i in list: 
    if i > max_num: 
      max_num = i
  
  return max_num

list = [1, 3, 12, 5, 8, 10]
max_num = find_max(list)
print(""Maximum number is:"", max_num)"
"Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.  strings = [""Sample"",""Text"",""Hello""]","def concatenate_strings(strings, separator):
 return separator.join(strings)"
"Come up with a code in Python to find the union of two lists.  List 1: [1, 2, 3, 4, 5]
List 2: [3, 4, 5, 6, 7]","list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

def unionList(list1, list2):
    return set(list1 + list2)

result = unionList(list1, list2)
print(result)"
Construct a python dictionary containing student names and marks as key-value pairs.  ,"student_marks = { 
    ""John"" : 90, 
    ""Levi"" : 85, 
    ""Jill"" : 95, 
    ""Sara"" : 75
}"
Write a code snippet for a simple linear regression model in Python.  Not applicable,"import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

# Read data from CSV
data = pd.read_csv('data.csv')

# Set X and Y
X = data['X']
Y = data['Y']

# Create linear regression model
model = linear_model.LinearRegression()

# Train the model
model.fit(X, Y)

# Make predictions
Y_pred = model.predict(X)

# Visualize the results
plt.scatter(X, Y)
plt.plot(X, Y_pred, color='red')
plt.show()"
Write code in Python to implement a linked list using classes.  ,"class Node:
    """"""Node class to represent the node in a linked list""""""
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    """"""LinkedList class to represent the entire linked list""""""
    def __init__(self):
        self.head = None
    
    def print_list(self):
        node = self.head
        while(node):
            print(node.data)
            node = node.next

# Creating a linked list 
linked_list = LinkedList()

# Creating the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)

# Linking the nodes
linked_list.head = node1
node1.next = node2
node2.next = node3

# Printing the linked list
linked_list.print_list()"
"Construct an XML document using Python which contains the following data.  Item1, Item2, Item3","import xml.etree.ElementTree as ET

# creating the root element
data = ET.Element('data')

items = ['Item1', 'Item2', 'Item3']

# loop over items
for item in items:
    # creating sub elements
    item_element = ET.SubElement(data, 'item')

    # assign the value for the sub elements
    item_element.text = item

# write the XML Tree
tree = ET.ElementTree(data)
tree.write('data.xml')"
Make a Python program generating numbers  ,"def generate_numbers():
    numbers = []
    for i in range(10):
        numbers.append(random.randint(0,10))
    return numbers"
"Convert this sql query into a python program  SELECT * FROM orders
WHERE YEAR(order_date) = 2020","import datetime, pyodbc

# Establish a connection to the database
conn = pyodbc.connect(""<connection details>"")
cursor = conn.cursor()

# Get the year of the order date
sql = ""SELECT * FROM orders""
query_date = datetime.date.today().year
where_clause = ""WHERE YEAR(order_date) = ?""

# Execute the query
cursor.execute(sql + "" "" + where_clause, query_date)
results = cursor.fetchall()

# Output the results
for result in results:
    print(result)"
"This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation on the data, applies a threshold to remove small values, and generates three plots: a histogram, an interpolated image, and a contour plot. To use this code, make sure to have the necessary files and libraries in the correct paths, and adjust the parameters as needed for your data.  ","# -*- coding: utf-8 -*-

import os, sys
print(""CWD: "" + os.getcwd() )

# Load configuration file before pyplot
config_path = os.path.abspath('../matplotlib/')
sys.path.append(config_path)
import configuration as config

# Library path
lib_path = os.path.abspath('../../lib')
sys.path.append(lib_path)
import framemanager_python

import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate


# Color map
# Define ""bds_highcontrast"" color map by Britton Smith <brittonsmith@gmail.com> from http://yt-project.org/ 
cdict = {'red':   ((0.0, 80/256., 80/256.),
                   (0.2, 0.0, 0.0),
                   (0.4, 0.0, 0.0),
                   (0.6, 256/256., 256/256.),
                   (0.95, 256/256., 256/256.),
                   (1.0, 150/256., 150/256.)),
         'green': ((0.0, 0/256., 0/256.),
                   (0.2, 0/256., 0/256.),
                   (0.4, 130/256., 130/256.),
                   (0.6, 256/256., 256/256.),
                   (1.0, 0.0, 0.0)),
         'blue':  ((0.0, 80/256., 80/256.),
                   (0.2, 220/256., 220/256.),
                   (0.4, 0.0, 0.0),
                   (0.6, 20/256., 20/256.),
                   (1.0, 0.0, 0.0))}

plt.register_cmap(name='bds_highcontrast', data=cdict) 

# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1
#row i:    x  y0  y1
#               /
#              /
#row i+1:  x  y0  y1
cdict = {'red':   ((0.0, 0.9, 0.9),
                   (1.0, 0.9, 0.9)),
         'green': ((0.0, 0.9, 0.9),
                   (1.0, 0.0, 0.0)),
         'blue':  ((0.0, 0.0, 0.0),
                   (1.0, 0.0, 0.0))}
plt.register_cmap(name='YELLOW_RED', data=cdict) 
#cmap=plt.get_cmap('YELLOW_RED')
#cmap=plt.get_cmap('autumn')
#cmap=plt.get_cmap('gist_heat')
#cmap=plt.get_cmap('Spectral_r')
#cmap.set_under([0.0, 0.0, 0.0])



# Load profile
profileName = os.path.abspath(""foam_ball_short.dsa"")
frameID = 230

frameManager = framemanager_python.FrameManagerWrapper()
frameManager.load_profile(profileName);
numTSFrames = frameManager.get_tsframe_count();

matrixID = 1

# Load single frame
tsframe = np.copy( frameManager.get_tsframe(frameID, matrixID) );

cols = tsframe.shape[1]
rows = tsframe.shape[0]

# Add padding on border
padding = 2
v_padding = np.empty((padding, cols)); v_padding.fill(-50)
h_padding = np.empty((rows+2*padding, padding)); h_padding.fill(-50)
zs = np.vstack([v_padding, tsframe]) # Top
zs = np.vstack([zs, v_padding]) # Bottom
zs = np.hstack([h_padding, zs]) # Left
zs = np.hstack([zs, h_padding]) # Right

# Update matrix size with padding
cols = zs.shape[1]
rows = zs.shape[0]

# Coordinates of sampled data points
xs = np.arange(0, cols, 1)
ys = np.arange(0, rows, 1)

# Coordinates of interpolation points
scaleFactor = 10;
xi = np.linspace(xs.min(), xs.max(), cols*scaleFactor)
yi = np.linspace(ys.min(), ys.max(), rows*scaleFactor)





#------------------------------------------------------
# Interpolate with cubic splines
spline = scipy.interpolate.RectBivariateSpline(ys, xs, zs, kx=3, ky=3, s=0)

# Evaluate splines
zi = spline(yi, xi)

#------------------------------------------------------


'''
#------------------------------------------------------
# Polynomial interpolation: ‘linear’, ‘nearest’, ‘cubic’
coordinates = [(y, x) for y in ys for x in xs]
zs_flattened = np.ravel(zs, order='C')
coordinates_interpolated = [(y, x) for y in yi for x in xi]

# Interpolate with griddata
zi_flattened= scipy.interpolate.griddata(coordinates, zs_flattened, coordinates_interpolated, method='cubic')

# Reshape flattened array to 2D
zi = zi_flattened.reshape((rows*scaleFactor, cols*scaleFactor))
#------------------------------------------------------
'''




#------------------------------------------------------
# Old API
# Set up a regular grid of sampled data points
#ys, xs = np.meshgrid(xs, ys)

# Set up a regular grid of interpolated points
#yi, xi = np.meshgrid(xi, yi)

# Interpolate
#tck = scipy.interpolate.bisplrep(xs2, ys2, zs, kx=3, ky=3, s=0)

# Evaluate splines
#zi = scipy.interpolate.bisplev(xi2[:,0], yi2[0,:], tck)
#------------------------------------------------------




# Apply threshold to level out small values (interpolation ripples)
min_threshold = 25
zi[zi < min_threshold ] = 0 



#########################################
# Plotting
#########################################
fig, ax = plt.subplots()


############
# Histogram
############
plt.hist(zi.flatten(), 128, range=(min_threshold, zi.max()), fc='k', ec='k')
plt.savefig(""histogram.pdf"", format='pdf')
plt.close() 

########################
# Interpolated image
########################
fig, ax = plt.subplots()

# Interpolated image
#cmap=plt.get_cmap('gray')
cmap=plt.get_cmap('bds_highcontrast')
cax = ax.imshow(zi, cmap=cmap, vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()])

# Colorbar with countour levels
cbar = fig.colorbar(cax)
cbar.set_label('Raw sensor value', rotation=90)
cbar.solids.set_edgecolor(""face"") # set the color of the lines

ax.invert_yaxis()
ax.xaxis.tick_top()
plt.axis('off')

plt.savefig(""interpolation.pdf"", format='pdf')
plt.close() 



############
# Contour
############
fig, ax = plt.subplots()

# Nearest-Neighbor Image
cax = ax.imshow(zs, interpolation='nearest', cmap=plt.get_cmap('gray'), vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) 

#------------------------------------------------------
# Contour lines: contour()
#------------------------------------------------------
countour_threshold = 50
levels = np.linspace(countour_threshold, zs.max(), 10)
#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(0.0, 0.0, 0.0)], origin='upper') # black contour
contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(1.0, 0.0, 0.0)], origin='upper') # Red contour
#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') # Colormap

#plt.clabel(contour, inline=True, fontsize=9)

# Colorbar with countour levels
cbar = fig.colorbar(cax)
cbar.add_lines(contour)
cbar.set_label('Raw sensor value', rotation=90)
cbar.solids.set_edgecolor(""face"") # set the color of the lines

'''
#------------------------------------------------------
# Filled contours: contourf()
#------------------------------------------------------

# Background image
background = np.empty((rows, cols)); background.fill(0)
cax = ax.imshow(background, cmap=plt.get_cmap('gray'), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()] )

# Filled contour
countour_threshold = 100 # Ignore ""ripples"" from spline extrapolation
max_threshold = 0 # Boost the upper limit to avoid truncation error
levels = np.linspace(countour_threshold, zs.max(), num=10, endpoint=True)

# Levels correspond to midpoint of layers:
# Extend level range to enlarge top layer (avoid ugly hole)
levels[-1] = levels[-1] + (levels[-1] - levels[-2])/2

contour = ax.contourf(xi, yi, zi, levels=levels, cmap=plt.get_cmap('bds_highcontrast'), origin='upper')      

cbar = fig.colorbar(contour, format='%.0f')
cbar.set_label('mV', rotation=0)
cbar.solids.set_edgecolor(""face"") # set the color of the lines

# Restore old levels
#levels[-1] = zs.max() 
#cbar.set_ticks(levels)
#------------------------------------------------------
'''


ax.invert_yaxis()
ax.xaxis.tick_top()
plt.axis('off')

plt.savefig(""contour.pdf"", format='pdf')
plt.show() 



 
"
Write a function to generate a set of random numbers in Python.  ,"import random

def generate_randoms(n):
  # generate a set of n random numbers
  rands = []
  for _ in range(n):
    rands.append(random.randint(1,100))
  return rands

generate_randoms(10)"
Write a python program to check if a given string contains any numbers  ,"def string_contains_number(string):
    pattern = re.compile(""[0-9]"") 
    return pattern.search(string) != None"
"Design a class in Python for storing movie information including the name, year of release, genre and rating.  ","class Movie:
    def __init__(self, name, release_year, genre, rating):
        self.name = name
        self.release_year = release_year
        self.genre = genre
        self.rating = rating

movie = Movie(""Interstellar"", 2014, ""Sci-Fi"", 8.4)
print(movie.name, movie.release_year, movie.genre, movie.rating)"
"Given an input string, write a Python program to count the occurrence of each character in the string.  ""Hello, World!""","def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.  Not applicable,"import string
import random

def generate_password():
 length = 8
 chars = string.ascii_letters + string.digits + string.punctuation
 password = """".join(random.choice(chars) for i in range(length))
 
 return password

password = generate_password()
print(password)"
Write a Python function to generate an even number between 10 and 200 that is divisible by 5.  Not applicable,"def generate_even_number():
# Generate a random number between 10 and 200
 num = random.randint(10, 200)
# Check if the number is even
 if num % 2 == 0:
# Check if the number is divisible by 5
  if num % 5 == 0:
   return num
# If number not divisible by 5, increment number
  else:
   return generate_even_number(num+1)
# If number not even, increment number
 else:
   return generate_even_number(num+1)"
"Create a Python function to find the closest value to a given number in a given array.  [5, 4, 8, 7], 5","def closest_num(arr, num):
    arr.sort()
    n = len(arr)
    left = 0
    right = n - 1
 
    if arr[right] <= num:
        return arr[right]
    elif arr[left] >= num:
        return arr[left]
    while right-left > 1:
        mid = (right+left)//2
        if arr[mid] == num:
            return arr[mid]
        elif arr[mid] > num:
            right = mid
        else:
            left = mid
    return sorted([arr[right], arr[left]])[0]

arr = [5, 4, 8, 7]
num = 5
closest = closest_num(arr, num)
print(closest)"
Write a Python code to store and print the multiplication table of a given number.  num = 5,"# Function to print the multiplication table
def print_multiplication_table(num):
    # Iterate over numbers from 1 to 10
    for i in range(1, 11):
        print('{0} x {1} = {2}'.format(num, i, num*i))

print_multiplication_table(5)"
"Found and fix any bugs with the following python code.  def sum_list(list):
    sum_list = 0
    for num in list:
        sum_list += num
    return sum","def sum_list(list):
    sum_list = 0
    for num in list:
        sum_list += num
    return sum_list"
"Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”.  Not applicable","def print_comparison(x, y):
 if x > y:
 print(f'{x} is greater than {y}')
 else:
 print(f'{y} is greater than or equal to {x}')"
"Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.  [2, 3, 4]","def sum_squares(arr):
    total = 0
    for num in arr:
        total += num ** 2
    return total

arr = [2, 3, 4]

total = sum_squares(arr)
print(total) # 29"
Design an algorithm in Python for finding out the factorial of a given number.  7,"def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
 return fact"
Construct a class in Python which implements two methods to add two numbers.  ,"class Calculator:
 def __init__(self):
   pass
    
 def add_two_numbers(self, a, b):
   return a + b

 def add(self, a, b, c):
   return a + b + c

calculator = Calculator()
result = calculator.add_two_numbers(1, 2)
print(result)"
"Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.  6","num = int(input(""Enter a positive integer: ""))

while num > 0:
    print(num)
    num -= 1

print(""Done!"")"
Develop an AI Tic-Tac-Toe game using Python.  Not appliccable,"import random 
  
# printing the board  
def drawBoard(board): 
  
    print(""---------------"") 
    print("" ""+board[1]+"" | ""+board[2]+"" | ""+board[3]+"" "") 
    print(""___|___|___"") 
    print("" ""+board[4]+"" | ""+board[5]+"" | ""+board[6]+"" "") 
    print(""___|___|___"") 
    print("" ""+board[7]+"" | ""+board[8]+"" | ""+board[9]+"" "") 
    print(""   |   |   "") 
  
# defining the part of the game  
def checkWin(board, player): 
    return ( 
        (board[1] == board[2] == board[3] == player) or
        (board[5] == board[4] == board[6] == player) or 
        (board[7] == board[8] == board[9] == player) or 
        (board[1] == board[5] == board[9] == player) or 
        (board[3] == board[5] == board[7] == player) or 
        (board[1] == board[4] == board[7] == player) or 
        (board[2] == board[5] == board[8] == player) or 
        (board[3] == board[6] == board[9] == player))  
       
def getComputerSpot(board,player): 
    openSpots = [] 
    indices = [i for i, spot in enumerate(board) if spot == '-'] 
    
    for i in indices: 
        board[i] = player  
          
        if checkWin(board, player):  
            board[i] = '-'  
            return i  
        board[i] = '-'  
          
    for i in indices: 
        openSpots.append(i) 
    if len(openSpots): 
        return random.choice(openSpots) 
    else: 
        return None 
      
                
def playGame(): 
    board = ['-' for x in range(10)] 
    won = False
    turn = -1
    while not won: 
        if turn == -1: 
            # human turn   
            humanSpot = int(input(""Enter your spot: ""))
            if board[humanSpot] == '-': 
                board[humanSpot] = 'X' 
            else: 
                print(""the spot is already filled!"") 
                continue
            turn *= -1
       
        if checkWin(board,'X'): 
            drawBoard(board) 
            print(""You won!"") 
            won = True
            break
          
        if turn == 1: 
            # computer turn  
            computerSpot = getComputerSpot(board,'O') 
            if computerSpot == None: 
                drawBoard(board) 
                print(""The game is drawn!"")
                break
            else: 
                board[computerSpot] = 'O' 
            turn *= -1
              
        drawBoard(board) 
          
playGame()"
Create a Python program to calculate the sum of series 1 + ½ + ⅓ + ... + 1/n.  n = 5,"def seriesSum(n):
    # set the initial sum to 0
    total = 0

    # loop over the range
    for i in range(1, n+1):
        total += 1 / i

    return total

print(seriesSum(5))"
"Develop a decision tree classifier in Python to predict a fourth feature from three other features.  Features: A, B, C","import pandas as pd

#importing the dataset 
dataset = pd.read_csv('data.csv')

#splitting the dataset into features and labels 
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, 3].values

#importing DecisionTreeClassifier 
from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier(criterion = 'entropy')

#fitting the classifier to the dataset
classifier.fit(X,y)"
Implement a function in Python that takes a string argument and returns the characters of the string in reverse order.  ,"def reverse_string(input_string):
    reversed_string = ''
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string"
"Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.  ","def check_sum(numbers, target):
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if numbers[i] + numbers[j] == target:
                return True
    return False"
Write a Python Program to print out the first n prime numbers.  ,"def sieve_of_eratosthenes(n):
    primes = [True] * (n+1)
    primes[0] = primes[1] = False
    for i in range(2, int(n**0.5)+1):
        if primes[i]:
            for j in range(i*i, n+1, i):
                primes[j] = False

    prime_numbers = []
    for i in range(len(primes)):
        if primes[i]:
            prime_numbers.append(i) 
    return prime_numbers"
Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary.  Not applicable,"def invert_dictionary(d):
 inverted_d = {}

 for key, value in d.items():
 if value not in inverted_d:
 inverted_d[value] = []
 inverted_d[value].append(key)

 return inverted_d"
Write a Python code to implement Gradient Descent Algorithm.  ,"""""""
Implement gradient descent algorithm in Python
""""""
import numpy as np

def gradient_descent(x,y,learning_rate=0.01,iterations=100): 
    m_curr = b_curr = 0
    n = len(x)
    for i in range(iterations):
        y_predicted = m_curr * x + b_curr
        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])
        md = -(2/n)*sum(x*(y-y_predicted))
        bd = -(2/n)*sum(y-y_predicted)
        m_curr = m_curr - learning_rate * md
        b_curr = b_curr - learning_rate * bd
        print (""m {}, b {}, cost {} iteration {}"".format(m_curr,b_curr,cost, i))
    return m_curr, b_curr"
"Binary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.  nums = [3, 4, 5, 6, 7, 8, 9]
val = 8","def binary_search(nums, val):
    low = 0
    high = len(nums) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == val:
            return mid
        elif nums[mid] > val:
            high = mid - 1
        else:
            low = mid + 1
    return -1"
"Construct a nested loop in Python to print out the following elements in a new line.  [1,2,3], [4,5,6], [7,8,9]","for x in [1,2,3]:
  for y in [4,5,6]:
      for z in [7,8,9]:
          print(x,y,z)"
Create a machine learning program in Python that will classify text data into 3 different categories.  Not applicable,"import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Load the data
data = pd.read_csv(""data.csv"")

# Vectorize the text
cv = CountVectorizer()
X = cv.fit_transform(data[""text""])

# Convert target labels to numerical values
y = np.array([1 if label == ""category1"" else 2 if label == ""category2"" else 3 for label in data[""category""]])

# Split into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# Train the model
nb = MultinomialNB()
nb.fit(X_train, y_train)

# Test the model
y_pred = nb.predict(X_test)

# Print out the results
print(classification_report(y_test, y_pred))"
"Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element.  list = [7, 8, 5]","def product_of_list(list):
    output = {}
    for element in list:
        output[element] = element * element
    return output

print(product_of_list([7, 8, 5]))"
Write a function in Python to print the Fibonacci series.  ,"def printFibonacciSeries(n): 
  
    # Taking 1st two fibonacci nubers as 0 and 1 
    f1 = 0
    f2 = 1
    print(f1, f2, end = "" "") 
  
    for i in range(2, n): 
        next = f1 + f2 
        print(next, end = "" "") 
  
        # update values 
        f1 = f2 
        f2 = next"
Design an algorithm in Python to find the longest common substring in two strings.  ,"def longestCommonSubstring(string1, string2):
    n1=len(string1)
    n2=len(string2)
    
    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]
    longestSubstring=""""
    longestSubstringLength=0
    for i in range(1, n1+1):
        for j in range(1, n2+1):
            if string1[i-1]==string2[j-1]:
                L[i][j]=L[i-1][j-1]+1
                if L[i][j]>longestSubstringLength:
                    longestSubstringLength=L[i][j]
                    longestSubstring=string1[i-1-longestSubstringLength+1:i]
            else:
                L[i][j]=0
    return longestSubstring"
"Create a Python function to shuffle a list of numbers.  [1, 2, 3, 4, 5]","import random

def shuffle_list(nums):
 random.shuffle(nums)
 return nums

shuffled_list = shuffle_list([1, 2, 3, 4, 5])
print(shuffled_list) #[3, 5, 2, 4, 1]"
"What Python code can you write that takes two strings and returns whether they are anagrams?  str1 = ""abcd""
str2 = ""cbda""","def is_anagram(str1, str2):
    if len(str1) != len(str2):
        return False

    str1_counts = collections.Counter(str1)
    str2_counts = collections.Counter(str2)
    
    for char in str1_counts:
        if str1_counts[char] != str2_counts[char]:
            return False
    return True"
"Create a basic Python script that computes the sum of two variables and stores the result in a third variable.  x = 5
y = 8","# compute the sum of x and y
result = x + y

# store the result in a third variable
z = result

#print the result
print(z) # Output: 13"
Generate a set of unique random numbers in the range 0-10 using Python.  ,"import random
random_numbers = set()
while len(random_numbers) < 10:
    random_numbers.add(random.randint(0, 10))

print(random_numbers)"
"Write a function in Python to search for a given word in a large document. The function should return the line number of the document where the word is found.  largeDocument = 'This is the first line of the document.\nThis is the second line of the document.\nThis is the third line of the document.';
word = 'second'","def findWord(document, word):
 lines = document.split('\n')
 line_number = -1
 for i, line in enumerate(lines):
 if word in line:
 line_number = (i + 1)
 break
 return line_number

findWord(largeDocument, word) # 2"
Design a script in Python to scrape photos and captions from a given website.  ,"""""""
Script to scrape photos and captions from a given website
""""""

from bs4 import BeautifulSoup
import requests

# Get the HTML source code
url = 'https://example.com/webpage'
req = requests.get(url)
html = req.text

# Parse HTML source and extract photo and caption
soup = BeautifulSoup(html, features='lxml')
image_divs = soup.find_all('div', {'class': 'image-gallery__image'})

for image_div in image_divs:
    figure = image_div.find('figure')
    src = figure.find('img')['src']
    caption = figure.find('figcaption')
    print('Photo: ', src)
    if caption:
        print('Caption: ', caption.text)
    else:
        print('No caption')
    print('\n')"
"Create a python program that prints ""Hello World!"" five times.  ","for x in range(5):
    print(""Hello World!"")"
"Write a Python program to find the common elements between two given lists.  [1, 2, 3], [2, 3, 4]","def find_common_elements(list1, list2):
    common = [x for x in list1 if x in list2]
    return common"
"Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.  ","my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]"
Create a class to create a linked list in python nodes.  ,"class ListNode:
    def __init__(self, data):
        self.data = data
        self.next = None"
Design a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request.  Not applicable,"import requests
import json

from flask import Flask, request

app = Flask(name)

@app.route('/getTemp', methods=['POST'])
def get_temp():
 city = request.json['city']
 url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=xxxxxx'
 r = requests.get(url.format(city))
 weather = json.loads(r.text)
 return {'temperature': weather['main']['temp']}

if name == 'main':
 app.run(debug=True)"
"Improve the following Python program to reduce its time complexity.  def find_max_sum(arr):
    max_sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)): 
            max_sum = max(max_sum, arr[i] + arr[j])
    return max_sum","def find_max_sum(arr):
    max_sum = 0
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] + arr[right] > max_sum:
            max_sum = arr[left] + arr[right]
        if arr[left] > arr[right]:
            right -= 1
        else:
            left += 1
    return max_sum"
"Write a Python program to format a given piece of text (input) with different options for font-style, size, and color.  Given text:

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.","def format_text(text, font=""Times New Roman"", size='14px', color='#000000'):
  return ""<span style='font-family: {} font-size: {} color: {}'>{}</span>"".format(font, size, color, text)

print(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.'))"
"Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.  nums = [1, 2, 3, 4, 5]","def square_index(nums):
    return [(index, num ** 2) for index, num in enumerate(nums)]

square_index(nums)
# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]"
"Using Python, create a function that takes two numbers as input, and generates a random number between them.  2 and 5","def random_number_generator(min, max):
    return random.randint(min, max)"
Generate a Python program to demonstrate a sorting algorithm.  ,"def sort_list(mylist):
 for i in range(len(mylist)):
 
 min_index = i
 temp = mylist[i]
 
 for j in range(i + 1, len(mylist)):
 
  if mylist[min_index] > mylist[j]:
   min_index = j
 
 mylist[i] = mylist[min_index]
 mylist[min_index] = temp
 
 return mylist
 
mylist = [1, 5, 7, 8, 4, 10, 2]
 
print(""Sorted list is:"")
print(sort_list(mylist))"
Write a code to delete a certain element from a linked list.  ,"# Python program to delete a node from Linked List  
  
# Node class  
class Node:  
  
    # Function to initialize the node object  
    def __init__(self, data):  
        self.data = data  # Assign data  
        self.next = None  # Initialize next as null  
  
  
# Linked List class contains a Node object  
class LinkedList:  
  
    # Function to initialize head  
    def __init__(self):  
        self.head = None
  
    # Function to delete a node  
    def deleteNode(self, node): 
  
        # Store head node  
        temp = self.head  
  
        # If head node itself holds the key to be deleted  
        if (temp is not None):  
            if (temp == node):  
                self.head = temp.next
                temp = None
                return
  
        # Search for the key to be deleted, keep track of the  
        # previous node as we need to change 'prev.next'  
        while(temp is not None):  
            if temp == node:  
                break
            prev = temp  
            temp = temp.next 
  
        # if key is not present in linked list  
        if(temp == None):  
            return
  
        # Unlink the node from linked list  
        prev.next = temp.next
  
        temp = None"
"Create a Python program to determine the total sum of all elements of a list.  [1, 2, 3, 4]","def calculate_sum_of_list(arr):
    total_sum = 0
    for item in arr:
        total_sum += item
    return total_sum

list1 = [1, 2, 3, 4]
sum_of_list = calculate_sum_of_list(list1)
print(sum_of_list)"
Write a script in Python to compete in a Kaggle competition.  Not applicable,"# Load the necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Read in the data
train_data = pd.read_csv(""data.csv"")

# Split the data into X (predictors) and y (response)
X = train_data.drop('response', axis=1)
y = train_data['response']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Define the model and fit it
model = ...
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Score the prediction
score = accuracy_score(y_test, y_pred)

# Submit the prediction to Kaggle
# ..."
"Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?  lst = [1,3,5,7,9]
k = 10","def find_consecutive_integers(lst, k):
    # Edge cases
    if k > sum(lst) or k < 0:
        return -1
 
    # Create a window and move it's boundaries
    l, h, curr_sum = 0, 0, 0
    while h < len(lst):
        # Sum of current window
        curr_sum += lst[h] 
 
        # See if the window sum equals k
        while curr_sum > k and l <= h:
            curr_sum -= lst[l]
            l += 1
 
        # When window sum is equal to k, print the winow
        if curr_sum == k:
            return lst[l:h+1]
 
        # Move the window one step at a time
        h += 1
 
    # If window size reaches last element and no window is 
    # found
    return -1
 
lst = [1,3,5,7,9]
k = 10
print(find_consecutive_integers(lst, k)) # Output: [3,5,7]"
Design a basic chatbot in Python for responding to casual inquiries.  ,"import random

#list of possible answers 
answers = [""That's a great question!"", 
    ""I'm not sure, but I'll try to find out!"", 
    ""That sounds interesting, tell me more!"", 
    ""I have no idea, sorry!""]

def chatbot_response(user_input): 
    # get a random response from answers
    response = random.choice(answers)
    return response

# simple loop to keep the conversation going
while True:
    user_input = input('You: ')
    if user_input == 'Goodbye':
        print('Chatbot: Goodbye!')
        break
    else:
        print('Chatbot: ', chatbot_response(user_input))"
"Write a Python program to print the top 5 most frequent words in a given sentence.  ""Python is an interpreted, high-level, general-purpose programming language.""","import collections
 
sentence = ""Python is an interpreted, high-level, general-purpose programming language.""
 
# Split sentence into words
words = sentence.split()
 
# Set the counter for words
counter = collections.Counter(words)
 
# Find top 5 most frequent words
result = counter.most_common(5)
print(result)"
"Make a program in Python to print a staircase of height 'n', where n is an integer.  5","def staircase(n): 
    for i in range(0, n): 
        for j in range(0, n - i - 1): 
            print(end="" "") 
        for j in range(0, i + 1): 
            print(""#"", end="""") 
        print(""\r"") 
  
# Driver code 
n = 5
staircase(n)"
"Write python code to return the maximum number in a list.  nums = [1, 15, 20, 6]","def find_max(nums):
    '''Returns the maximum number in the list.'''
    max_val = nums[0]
    for num in nums:
        if num > max_val:
            max_val = num
    
    return max_val"
Compose a python program to identify the characters in a given alphabet  alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',"alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def identify_characters(alphabet):
    char_list = []
    for c in alphabet:
        char_list.append(c)
    return char_list"
Optimize a Flask application for efficient performance.  Not applicable,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/api/<endpoint>', methods=['GET', 'POST'])
def process_request(endpoint):
    # Performance optimization
    # Use Redis for caching session and query performance
    # Use uWSGI for Python applications
    # Use gunicorn as WSGI server
    # Use Flask-Compress extension for compression
    # Use global variables where applicable
    # Don't use sql queries directly, always use model methods
    # Use query parameter in URLs instead of plain parameters
    # Use thread-local objects for performance

    # Your code here"
"Design a Python program to take a list of integers and return the sum of the even numbers in the list.  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","def sum_even_numbers(numbers):
 
 result = 0
 
 for number in numbers:
  if number % 2 == 0:
   result += number
 
 return result
 
print(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
"Write a Python program to print the maximum number from a given list.  [5, 4, 2, 7, 12]","def max_num(nums):
    max = nums[0]
    for num in nums[1:]:
        if num > max:
            max = num
    return max

nums = [5, 4, 2, 7, 12]
print(max_num(nums))"
"Write a Python program to sort a list of dictionaries by a key in each dictionary.  my_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}]","def sort_list_of_dicts_by_key(my_list, key):
    return sorted(my_list, key=lambda k: k[key])"
"Create a Python program to remove all occurrences of the given element in a given array.  arr = [2, 4, 5, 7, 4, 2], element = 4","def remove_element(arr, element):
    arr = [x for x in arr if x != element]
    return arr"
Create a Python program to optimize a given multivariate function.  ,"import scipy.optimize as opt 
  
def optimize_function(function, initial_guess): 
    result = opt.minimize(function, initial_guess) 
    return result.x"
Build a Python class to identify if a provided number is prime or composite.  10,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")"
"Write a Python function to format a two-dimensional array as a table.  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def printTable(array):
    # find the longest string in each of the inner lists
    # so we can format the output
    col_width = [max(len(str(x)) for x in col) for col in array]
    for row in array:
        print(""  "".join(str(x).ljust(col_width[i]) for i, x in enumerate(row)))

array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
printTable(array)

# Output: 
# 1   2   3
# 4   5   6
# 7   8   9"
"Develop a program in Python to check whether a string contains only digits.  ""0123""","def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))"
"Implement a function to remove all the duplicates from a linked list in Python.  list_nodes = [7, 14, 28, 28, 28, 35, 49]","class Node: 
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 
  
  
# Linked List class contains a Node object 
class LinkedList: 
    # Function to initialize head 
    def __init__(self): 
        self.head = None

    def remove_duplicates(self, list_nodes):
        curr_node= self.head 
        new_list=[]
        while curr_node != None: 
            if curr_node.data not in new_list: 
                new_list.append(curr_node.data) 
            curr_node = curr_node.next
                
        # creating a linked list from the unique elements of list_nodes  
        self.head=None
        for i in new_list:
            self.insert_node(i)
    
    def insert_node(self, data): 
    # Create a new node 
        new_node = Node(data) 
        # Check if list is empty
        if self.head is None: 
            self.head = new_node 
            return
        # Otherwise, traverse to the end of list before 
        # inserting the new Node 
        last = self.head 
        while (last.next): 
            last = last.next
        last.next =  new_node"
"Generate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers.  ","# Function to calculate the maximum, minimum, and average values
def calculate_metrics(list):
    # Calculate the maximum value
    maximum = max(list)
    
    # Calculate the minimum value
    minimum = min(list)
   
    # Calculate the average
    n = len(list)
    total = 0
    for num in list:
        total += num
    average = total/n
    
    return maximum, minimum, average

# Main Program 
list = [3, 4, 5, 6, 21, 8]

maximum, minimum, average = calculate_metrics(list)

print(""Maximum value:"", maximum)
print(""Minimum value:"", minimum)
print(""Average value:"", average)"
Create a Deep Learning Program in Python to Predict Stock Price.  ,"from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
import numpy as np

# define constants
time_steps = 60
batch_size = 32

# build the model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

# read the data 
dataset = np.loadtxt('data.csv', delimiter=',')

data = dataset[:, 0:1]

# create train and test data
x_train = data[:int(len(data)*0.8)]
x_test = data[int(len(data)*0.8):]

# reshape the data for input format
x_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))
x_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))

# train the model
model.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))"
Generate a Python program that performs an edit distance calculation using dynamic programming.  ,"def edit_distance(str1, str2):
    m = len(str1)
    n = len(str2)
    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] 
  
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0: 
                edit_table[i][j] = j
            elif j == 0: 
                edit_table[i][j] = i
            elif str1[i-1] == str2[j-1]: 
                edit_table[i][j] = edit_table[i-1][j-1] 
            else: 
                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) 
  
    return edit_table[m][n]"
Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N.  N = 10,"def sum_of_squares(n):
    result = 0
    for i in range(n+1):
        result += i**2
    return result"
"Generate a Python program that takes a string and capitalizes the first character of each word.  ""this is an example""","def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)"
Construct a python program which takes in input the size of a jagged array and prints it(no values).  <noInpit>,"def print_jagged_array(array_size):    
    # Initialize a jagged array with the given size
    array = [None] * array_size
    
    # Populate the array with empty arrays
    for i in range(array_size):
        array[i] = []
    
    # Print the output array
    print(array)

if __name__ == ""__main__"":
    array_size = 4
    print_jagged_array(array_size)"
"Create a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.  Not applicable","from flask import Flask
from flask_restful import Resource, Api
from dialogflow import detect_intent_texts

app = Flask(__name__)
api = Api(app)


@app.route('/', methods=['GET', 'POST'])
def detect_intent_text():
    IF session_id NOT present
        PLEASE create session_id
    request = detect_intent_texts(session_id, text)
    response = request.fulfillment_text
    return response


if __name__ == '__main__':
    app.run()"
Create a python program for constructing a decision tree algorithm for predicting the value of a stock.  A csv file containing stock data from the last 3 months.,"# Load libraries
import pandas as pd
import numpy as np

# Load data
data = pd.read_csv(""stockdata.csv"")

# Split data
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Train/Test Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Decision Tree Model
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(criterion='entropy', random_state=0)
clf.fit(X_train, y_train)

# Model Accuracy
y_pred = clf.predict(X_test)
print('Model accuracy: ',clf.score(X_test, y_test))"
"Create a Python class with the given attributes and functions.  Attributes: name (string), age (integer), email address (string)
Function: toString() - return a string with the formatted attributes","class Person:
    
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def toString(self):
        return f""Name: {self.name}, Age: {self.age}, Email: {self.email}"""
How would you create a class in Python to store and process data in a Car object?  ,"class Car:
    def __init__(self, make, model, color, mileage):
        self.make = make
        self.model = model
        self.color = color
        self.mileage = mileage

    def accelerate(self, speed):
        self.speed = speed

    def decelerate(self, speed):
        self.speed = speed"
Write a Python program to print out the Fibonacci series up to n numbers where n is a user input.  User input n = 10,"# Python Program to print the Fibonacci series up to n numbers

n = int(input(""Enter the value of 'n': ""))

# first two numbers
a = 0
b = 1

print(""Fibonacci Series:"") 
print(a, b, end="" "") 
  
for i in range(2,n):
               
    c = a + b
    a = b
    b = c
    print(c, end = "" "")
    
print()"
"Edit the following Python program to return true if the following string contains the word ""Hello"".  def check_hello(s):","def check_hello(s):
    return 'Hello' in s"
"Given a list of integers, write a Python program to find the index of the largest number.  [5, 10, 20, 6, 8]","nums = [5, 10, 20, 6, 8]
max_num = max(nums)
max_index = nums.index(max_num)

print(max_index)"
"Design a python program to handle an array with the following rules:
If the element is divisible by 3, the element should be replaced with ""Fizz"".
If the element is divisible by 5, the element should be replaced with ""Buzz"".
If the element is divisible by 3 and 5, the element should be replaced with ""FizzBuzz"".  arr = [2, 3, 4, 5, 6, 15]","def fizz_buzz(arr):
    new_arr = []
    for element in arr:
        if element % 3 == 0 and element % 5 == 0:
            new_arr.append(""FizzBuzz"")
        elif element % 3 == 0:
            new_arr.append(""Fizz"")
        elif element % 5 == 0:
            new_arr.append(""Buzz"")
        else:
            new_arr.append(element)
    return new_arr

print(fizz_buzz([2, 3, 4, 5, 6, 15]))"
"Write a Python function that takes two strings as arguments and returns the longest common sub-string between them.  str_1 = ""abcdabcdabde""
str_2 = ""defabcdabcd""","def longest_substring(str_1, str_2):
    len_1 = len(str_1)
    len_2 = len(str_2)
    longest_substring = ''
    for x in range(len_1):
        for y in range(len_2):
            if str_1[x] == str_2[y]:
                cur_substring = str_1[x]
                while (x + 1 < len_1 and y + 1 < len_2 and
                       str_1[x + 1] == str_2[y + 1]):
                    cur_substring += str_1[x + 1]
                    x += 1
                    y += 1
                    if len(cur_substring) > len(longest_substring):
                        longest_substring = cur_substring
    return longest_substring

longest_sub = longest_substring(str_1, str_2)
print(longest_sub)"
Design a program to reverse a given string.  Python,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))"
Generate a python program to calculate the minimum and maximum values in an array  ,"def min_max(array):
    min = array[0]
    max = array[0]

    for val in array[1:]:
        if val > max:
            max = val
        if val < min:
            min = val
    return min, max"
"Create a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings.  list = [""this"", ""is"", ""an"", ""example""]","def convertToCamelCase(list):
    camelCaseList = []

    for string in list:
        string = string.capitalize()
        camelCaseList.append(string)

    return ''.join(camelCaseList)"
"Write a Python algorithm that finds the longest contiguous sequence of increasing numbers within an array.  [3, 2, 1, 4, 5, 6, 7, 8]","def find_longest_increasing_sequence(arr):
 longest_start = 0
 longest_length = 0

 current_start = 0
 current_length = 0

 for i in range(1, len(arr)):
 prev_val = arr[i - 1]
 curr_val = arr[i]

 if curr_val > prev_val:
 current_length += 1
 else:
 current_start = i
 current_length = 1

 if current_length > longest_length:
 longest_start = current_start
 longest_length = current_length

 longest_sequence = arr[longest_start:longest_start + longest_length]
 return longest_sequence

arr = [3, 2, 1, 4, 5, 6, 7, 8]
longest_seq = find_longest_increasing_sequence(arr)
print(longest_seq) // Output: [4, 5, 6, 7, 8]"
"Generate a Python function to parse a JSON data structure.  data = {
 ""name"": ""John"",
 ""age"": 18,
 ""occupation"": ""Software Engineer""
}","import json

def parse_json(data):
 data = json.loads(data)
 return data['name'], data['age'], data['occupation']

name, age, occupation = parse_json(data)
print(name, age, occupation)
# Output: John 18 Software Engineer"
"Suggest an improvement for the following python code for finding the sum of elements of a list  def sum_elements(arr):
    sum_value = 0
    for num in arr:
        sum_value += num
    return sum_value","def sum_elements(arr):
    return sum(arr) # return sum of elements of arr with one line of code."
Generate a Python class to represent a 3-dimensional vector.  ,"class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def length(self):
        return (self.x**2 + self.y**2 + self.z**2)**0.5"
Work out a solution to the Towers of Hanoi game using Python.  The game consists of 3 rods and 4 disks.,"def TowersOfHanoi(n, fromRod, toRod, auxRod): 
    if n == 1: 
        print(""Move disk 1 from rod"",fromRod,""to rod"",toRod) 
        return
    TowersOfHanoi(n-1, fromRod, auxRod, toRod) 
    print(""Move disk"", n, ""from rod"", fromRod, ""to rod"", toRod) 
    TowersOfHanoi(n-1, auxRod, toRod, fromRod) 

n = 4
TowersOfHanoi(n, 'A', 'C', 'B')"
Develop an algorithm using Python to calculate the Euclidean distance between 2 points.  ,"def euclidean_distance(point1, point2): 
    sum_squared_distance = 0

    for i in range(len(point1)): 
        sum_squared_distance += (point1[i] - point2[i])**2 
    return sum_squared_distance**0.5"
"Create a Python script to print the absolute difference between two given numbers.  9, 5","def absolute_difference(A, B): 
    return abs(A - B) 
  
# Driver Code 
A = 9
B = 5
print(absolute_difference(A, B))"
Create a recommendation system in Python using Pandas to recommend new products to customers based on past purchases.  Not applicable,"import pandas as pd
from sklearn.neighbors import NearestNeighbors

# Read in data
data = pd.read_csv('product_data.csv')

# Create an item-based collaborative filter
cf = NearestNeighbors(metric='cosine', algorithm='brute')
cf.fit(data)

# Make recommendations
distances, indices = cf.kneighbors(data, n_neighbors=3)

# Print results 
for i in range(len(data)):
 print('Recommendations for item {}:'.format(i), indices[i])"
"Generate a Python program to filter out a list of numbers and keep only those that are prime  nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]","def filter_prime(nums):
    # Keep track of the prime numbers
    primes = []
    
    # Iterate through each number
    for num in nums:
        is_prime = True
        # Check if the number is divisible by any number from 2 to itself
        for i in range(2, num):
            # If so, the number is not prime
            if num % i == 0:
                is_prime = False
                break
        # Add the number to the list of primes if it is prime
        if is_prime:
            primes.append(num)
            
    # Return the updated list
    return primes"
"Write a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages.  ['The Hobbit', 'J.R.R. Tolkien', 295], ['The Catcher in the Rye', 'J.D. Salinger', 223]","book_list = [
  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},
  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},
]"
"Assume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page.  Not applicable","import pymysql
from pymongo import MongoClient
import psycopg2

# connect to MySQL
connection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')

# connect to MongoDB
client = MongoClient('mongodb://localhost:27017')

# connect to PostgreSQL
connection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')

# define a query for each database
query_mysql = 'SELECT * FROM table_name'
query_mongodb = {'name': 'John Doe'}
query_postgresql =  'SELECT * FROM table_name WHERE age > 18'

# execute the query and fetch the results
result_mysql = connection_mysql.execute(query_mysql)
result_mongodb = client.db_name.collection_name.find(query_mongodb)
result_postgresql = connection_postgresql.execute(query_postgresql)

# close the connections
connection_mysql.close()
client.close() 
connection_postgresql.close()

# render the results on webpage
def render_page(request):
    return render(request, 'template.html', {
        'data_mysql': result_mysql, 
        'data_mongodb': result_mongodb,
        'data_postgresql': result_postgresql
    })"
Create a class in Python to represent a complex number.  ,"class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

    def __str__(self):
        return ""({0} + {1}i)"".format(self.real, self.imaginary)"
"Create an
Python program that takes a list of integers and returns the sublist consisting of the prime numbers from the list.  [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]","def is_prime(num):
 for i in range(2, num // 2 + 1):
 if num % i == 0:
 return False
 return True

def prime_list(lst):
 prime_lst = []
 for num in lst:
 if is_prime(num):
 prime_lst.append(num)
 return prime_lst

lst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]
prime_lst = prime_list(lst)
print(prime_lst) # Output: [2, 3, 7, 11, 17]"
"Write a Python program to find the most efficient path for a robot to take from its current location to the destination  start = (4, 2) 
end = (9, 9)","# Function to find the most efficient path
def find_path(start, end):
    # Current location of the robot
    x = start[0]
    y = start[1] 
    # Destination coordinates
    goal_x = end[0] 
    goal_y = end[1] 
    # set to record the cells already visited
    visited = set() 
    # define a queue to store the tuple of current position and the path
    queue = [([x, y], [])] 
    # define a neighbor list 
    neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] 
    # define a maximum tries
    max_tries = 100 
    # define a while loop
    while queue:
        # get current position and current path
        position, path = queue.pop(0) 
        # check if the goal is reached
        if position[0] == goal_x and position[1] == goal_y:
            return path + [position]
        # check if the current position is out of maximum tries and not visited before
        if position not in visited and max_tries > 0:
            visited.add(position)
            max_tries = max_tries - 1 
            #get all neighbors of the current position
            for neighbor_x, neighbor_y in neighbor:
                next_x = position[0] + neighbor_x
                next_y = position[1] + neighbor_y
                # add to the queue
                queue.append(([next_x, next_y], path + [position]))
    return None
 
start = (4, 2) 
end = (9, 9) 
# most efficient path from start to end
path = find_path(start, end) 
print(path)"
"Edit this python code to be more efficient.  data = [1, 2, 3, 4]
result = []
for x in data:
 if x > 2:
 result.append(x)","data = [1, 2, 3, 4]

result = [x for x in data if x > 2]"
"Debug the following Python code  def f1 (x):
 y = x + 1
def f2(x):
 return f1(x)*f1(x)

f2(2)","# define f1 #
def f1(x):
    return x + 1

# define f2 #
def f2(x):
    return f1(x) * f1(x)

# call f2 #
print(f2(2)) #Output: 9"
Debug the following Python program which raises a SyntaxError.  ,"def func(a, b): 
  c = a + b 
  return c 

a = 4 
b = 5 

res = func(a, b) 
print(res)"
"Set up GPIO pins, import necessary modules, define operating modes, prompt for password and mode selection, check license validity and user registration, calculate BAC, open solenoid to dispense beer if valid license and BAC below threshold, record swipe data in appropriate file.  ","# bin/usr/python

# Setting up GPIO pins
from time import sleep
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi
GPIO.setwarnings(False)

GPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet
GPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off

import time
timestr = time.strftime(""%Y%m%d %H%M%S"")

# Import functions to analyze license validity from CheckLicense.py
from CheckLicense import check_license, calc_BAC

                                 
import getpass
import sys
import re

# Operating modes
while True:
    #try:
    mode_req=raw_input(""Enter Mode(normal, party, barkeep): "")

    if mode_req==""party"":
         passwd=getpass.getpass(""Enter password: "")
         if passwd==""admin"":
                 mode=""party""
                 
    if mode_req==""normal"":
         passwd=getpass.getpass(""Enter password: "")
         if passwd==""admin"":
                 mode=""normal""

    if mode_req==""barkeep"":
         passwd=getpass.getpass(""Enter password: "")
         if passwd==""admin"":
                 mode=""barkeep""

            
#Normal mode operations--------------------------------------------------------------------------------------------
    while mode=='normal':
            #try:
        print '{0} mode!' .format(mode)

        raw_text=getpass.getpass('Swipe card now:   ').strip() 

        check_license_out=check_license(raw_text)
            
        valid_license=check_license_out[0] 
        first_name=check_license_out[1]
        last_name=check_license_out[2]
        DL_num=check_license_out[3]
        
# Check to see if person is registered user

        users=open(""users_list.txt"", 'r')
        hit=0
        print DL_num
        
        if valid_license=='Yes':
              for line in users:
                      if re.search(DL_num, line, re.IGNORECASE):
                              hit=hit+1
              if hit>=1:
                      valid_license='Yes'
              else: 
                      print 'Not registered user'
                      valid_license='No'
# Calculating the BAC
    
        BAC=calc_BAC(raw_text)
        print BAC

    # Opening the solenoid 
        if valid_license=='Yes':
              GPIO.setup(3, GPIO.HIGH)
              print 'Beer time!'
              sleep(2);
              GPIO.setup(3, GPIO.LOW)
              with open(""swipes.txt"", ""a"") as myfile:
                      myfile.write(last_name+"",""+first_name+"" "")
                      myfile.write(DL_num+"" "")
                      myfile.write(mode+"" "")
                      myfile.write(time.strftime(""%Y-%m-%d"")+"" "")
                      myfile.write(str(time.time())+""\n"")

       # except (NameError, IndexError, ValueError):
        #    print ""error""
        #    continue

    #Party mode operations--------------------------------------------------------------------------------------------
                                     
    while mode==""party"":
        try:
         print '{0} mode!' .format(mode)

         raw_license_text=getpass.getpass('Swipe card now:   ').strip()
         check_license_out=check_license(raw_license_text) 

         valid_license=check_license_out[0] 
         first_name=check_license_out[1]
         last_name=check_license_out[2] 


        # Opening the solenoid 

         if valid_license=='Yes':
                 GPIO.setup(3, GPIO.HIGH)
                 print 'Beer time!'
                 sleep(2);
                 GPIO.setup(3, GPIO.LOW)
                 with open(""swipes_normal.txt"", ""a"") as myfile:
                         myfile.write(last_name)
                         myfile.write("","")
                         myfile.write(first_name)
                         myfile.write("","")
                         myfile.write(time.strftime(""%Y%m%d%H%M%S\n""))

        except (NameError, IndexError, ValueError):
             print ""error""
             continue
                                  
    #Barkeep mode operations-------------------------------------------------------------------------------------------
     
    while mode==""barkeep"":
        try:
            print '{0} mode!' .format(mode)

            check_license_out=check_license(getpass.getpass('Swipe card now:   ').strip()) 

            valid_license=check_license_out[0] 
            first_name=check_license_out[1]
            last_name=check_license_out[2] 
            #usr_chksum = #chksum(firstname_lastname)
            #'{0}beer_score' .format(usr_chksum) 
            #Check to see if person is blacklisted
            blacklist=open(""blacklist.txt"", 'r')
            hit=0

            if valid_license=='Yes':
                 for line in blacklist:
                         if re.search(last_name, line, re.IGNORECASE):
                                 hit=hit+1
                         if re.search(first_name, line, re.IGNORECASE):
                                 hit=hit+1
                 if hit>=2:
                         print ""We don't serve your kind here.""
                         blacklisted='Yes'
                 else: 
                         blacklisted='No'

            #Calculate BAC
                         
            #Opening the solenoid 
            if blacklisted=='No':
                if BAC < intoxicated:
                    GPIO.setup(3, GPIO.HIGH)
                    print 'Beer time!'
                    print BAC
                    sleep(2);
                    GPIO.setup(3, GPIO.LOW)
                    with open(""swipes_barkeep.txt"", ""a"") as myfile:
                         myfile.write(last_name)
                         myfile.write("","")
                         myfile.write(first_name)
                         myfile.write(""_"")
                         myfile.write(time.strftime(""%Y-%m-%d %H:%M%S\n""))
                else:
                    print 'Your BAC is {0}' .format(BAC)
                    print ""You are too drunk, beer time is over""
                 
        except (NameError, IndexError, ValueError):
             print ""error""
             continue
                    
   # except (NameError, IndexError, ValueError):
        print ""error""
       # continue
#end ---------------------------------------------------------------------------
        
"
"Using Python, create a program to print a random element from a list.  [""apple"", ""banana"", ""mango"", ""pear"", ""grape""]","import random

# list of fruits
fruits = [""apple"", ""banana"", ""mango"", ""pear"", ""grape""]

# generate a random index
randomIndex = random.randint(0, len(fruits)-1)

# select and print the random fruit
randomFruit = fruits[randomIndex]
print(""Random fruit: "" + randomFruit)"
Develop an interactive text-based RPG game in Python that gives the player options to move around in an environment and battle monsters.  Not applicable,"# Player class
class Player(object):
 def __init__(self):
 self.health = 100
 self.location = 'room one'
 self.monsters_killed = 0

# Room class
class Room(object):
 def __init__(self):
 self.name = ''
 self.description = ''
 self.monsters = []

 def add_monster(self, monster):
 self.monsters.append(monster)

# Monster class
class Monster(object):
 def __init__(self):
 self.name = ''
 self.health = 100

 def attack(self, player):
 player.health -= 10

# Function to start the game
def start_game():
 # Create player, rooms and monsters
 player = Player()

# Main game loop
while True:
 # Show the current room;
 print(f'You are in {player.location}.')
 # Display available actions
 print('Available actions: move, fight')
 # Get user's action
 response = input('What would you like to do? ').lower()

 # Moving to a new room
 if response == 'move':
 # Get the list of available rooms
 # Get the user's destination
 # Move the player to the chosen room

# Fighting a monster
 if response == 'fight':
 # Get all monsters in the current room
 # Get the user's chosen monster
 # Initiate a battle between the player and the monster

# End of the game
 if player.health <= 0:
 print ('You have been defeated!')
 break

if __name__ == '__main__':
 start_game()"
Create a Text-to-Speech Python application to read out a simple sentence.  ,"import pyttsx3

def text_to_speech(sentence):
    engine = pyttsx3.init()
    engine.say(sentence)
    engine.runAndWait()
    
text_to_speech(""Hello, this is a simple sentence"")"
Create an application with a Python backend and a React frontend that allows a user to create a list of tasks.  Not applicable,"# Python Backend
# Web server setup
app = Flask(__name__)

# Database setup
db = SQLAlchemy(app)

# Model for tasks
class Task(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  title = db.Column(db.String(80), unique=True, nullable=False)
  is_completed = db.Column(db.Boolean, default=False)

  def __repr__(self):
    return f'<Task {self.id}: {self.title}>'

# API Endpoint
@app.route('/tasks', methods=['POST'])
def create_task():
  request_data = request.get_json()
  title = request_data.get('title')
  if not title:
    return jsonify({'error': 'Title must be provided.'}), 400

  task = Task(title=title)
  db.session.add(task)
  db.session.commit()

  return jsonify(task.serialize())

# React Frontend
import React, { useState, useEffect } from 'react'
import axios from 'axios'

export const TaskList = () => {
  const [tasks, setTasks] = useState([])

  useEffect(() => {
    getTasks()
  }, [])

  const getTasks = async () => {
    const response = await axios.get('http://localhost:3000/tasks')
    setTasks(response.data)
  }

  return (
    <div>
      {tasks.map(task => (
        <div key={task.id}>
          <input type=""checkbox"" checked={task.is_complete} />
          <label>{task.title}</label>
        </div>
      ))}
    </div>
  )
}"
"Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.  dict_a = {'a':1, 'b':2, 'c':3}
dict_b = {'d':4, 'e':5, 'f':6}","def merge_dict(dict_a, dict_b):
    merged_dict = {**dict_a, **dict_b}
    return merged_dict"
"Generate a Python program to read a list of integers and print its elements in reversed order.  The input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10]","list_of_ints = [1, 3, 6, 8, 10]

list_of_ints.reverse()

print(list_of_ints) # [10, 8, 6, 3, 1]"
"Given a binary tree, write a Python program to determine the sum of all elements in the tree.  ","def sum_tree(root):
    if root is None:
        return 0

    return root.val + sum_tree(root.left) + sum_tree(root.right)"
"Create an API using flask and python which takes a list or array of integers and returns their minimum and maximum values.  [12, 4, 9, 24, -5]","from flask import Flask, request
app = Flask(name)

@app.route('/minmax', methods=['POST'])
def minmax():
 data = request.get_json()
 nums = data['nums']
 minVal = min(nums)
 maxVal = max(nums)
 return {'min': minVal, 'max': maxVal}

if name == 'main':
 app.run()"
Design a python class to represent a 3-dimensional vector with methods to support vector addition and subtraction.  ,"# Defining a class for 3-dimensional vectors 
 
class Vector: 
  
    # defining constructor 
    def __init__(self, x, y, z): 
        self.x = x 
        self.y = y 
        self.z = z 
  
    # Defining function to print vector
    def printVec(self):
        print(self.x, self.y, self.z) 
  
    # Defining function to add two vectors 
    def addVec(self, V):
        return Vector(self.x+V.x, self.y+V.y, self.z+V.z) 
  
    # Defining function to subtract two vectors 
    def subVec(self, V): 
        return Vector(self.x-V.x, self.y-V.y, self.z-V.z) 

# Driver code 
v1= Vector(1, 2, 3)
v2= Vector(5, 3, 2) 

print(""Vector 1: "")
v1.printVec() 
print(""Vector 2: "")
v2.printVec()

v3 = v1.addVec(v2)
print(""sum of vector 1 and vector 2: "")
v3.printVec()

v4 = v1.subVec(v2) 
print(""difference of vector 1 and vector 2: "")
v4.printVec()"
"Write a string slicing function in Python that takes a string and start and end index, and return the slice.  string = ""This is a slicing test""
start = 8
end = 15","def slicing(string, start, end):
    return string[start:end]
    
print(slicing(string, start, end))"
"Write a python program to tokenize a given text  Text='Python is an interpreted, high-level, general-purpose programming language.'","import nltk 
from nltk.tokenize import word_tokenize 
  
# input text  
text = 'Python is an interpreted, high-level, general-purpose programming language.'
  
# converting the text into tokens 
token = word_tokenize(text) 
  
print(token)"
"Generate a Python code for an algorithm to find the shortest path between two points in a matrix  matrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]]
start = (0, 0)
end = (2, 2)","def shortest_path(matrix, start, end):
  queue = []
  min_len = math.inf
  queue.append([start])
  while queue:
    path = queue.pop(0)
    x, y = path[-1]
    if (x, y) == end:
      if len(path) < min_len:
        min_len = len(path)
    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
      new_x, new_y = x + dx, y + dy
      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):
        if matrix[new_x][new_y] == 0:
          queue.append(path + [(new_x, new_y)])
  return min_len"
"Create a basic Python algorithm that searches a given sorted array for a value using binary search.  sortedArray = [1, 2, 3, 4, 5, 6, 7]
value = 5","# Array to search
sortedArray = [1, 2, 3, 4, 5, 6, 7]

# Target value
value = 5

# Binary search function
def binarySearch(array, target):
 # Find the middle of the array
 mid = len(array) // 2
 
 # Check if the target is equal to the middle value 
 if array[mid] == target:
  return True
 
 # If the target is less than the middle value, search the left half
 elif target < array[mid]:
  return binarySearch(array[:mid], target)
  
 # If the target is greater than the middle value, search the right half
 elif target > array[mid]:
  return binarySearch(array[mid+1:], target)
 
 # If the target is not found
 else:
  return False
  
# Check if the value is in the array
if binarySearch(sortedArray, value):
 print('Value found!')
else:
 print('Value not found!')"
"Write a Python program that takes the following dictionary as an argument and returns the count of each item  {""apples"": 5, ""oranges"": 6, ""bananas"": 7}","def item_counts(fruits):
    counts = {}
    for k, v in fruits.items():
        counts[k] = v
    return counts"
Generate a Python class to read in a textfile and count the frequency of each word.  ,"class WordCounter:
    def __init__(self, filename):
        self.word_counts = {}
        self.filename = filename
        self.process_file()

    def process_file(self):
        with open(self.filename) as f:
            for line in f:
                words = line.split()
                for word in words:
                    if word in self.word_counts:
                        self.word_counts[word] += 1
                    else:
                        self.word_counts[word] = 1

    def get_word_counts(self):
        return self.word_counts"
Is it possible to create a Python program that converts a given string to a different case?  ,"def convert_string_case(string):
    new_string = string.swapcase()
    return new_string

string = ""this Is A TeST""
new_string = convert_string_case(string)
print(new_string)"
Create a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.  ,"from django.db import models
from django.conf import settings
from django.utils.translation import get_language
from django.utils.translation import ugettext as _
from django.utils.encoding import force_unicode, smart_str, smart_unicode
from django.forms.fields import Field
from django.forms import ValidationError
from widgets import TransCharWidget, TransTextWidget

def get_default_language_name():
    '''
    Get language from default language specified by LANGUAGE_CODE in settings
    Used in error messages
    '''
    lang_name = ''
    for lang in settings.LANGUAGES:
        if lang[0] == settings.LANGUAGE_CODE:
            lang_name = lang[1]
            break
    return force_unicode(lang_name)

class TransDbValue(unicode):
    '''
    This class implements a unicode string, but with a hidden attribute raw_data.
    When used as a string it returns the translation of the current language
    raw_data attribute stores a dictionary with all translations
    Also implements a method ""get_in_language(language)"" that returns the translation on any available language
    '''
    raw_data = {}

    def get_in_language(self, language):
        if self.raw_data and self.raw_data.has_key(language):
            return self.raw_data[language]
        else:
            return u''

    def set_in_language(self, language, value):
        self.raw_data[language] = value

class TransFormField(Field):
    '''
    forms field, used when ModelForm (or deprecated form_for_model/form_form_instance) is called
    Also implements form validation in admin
    '''
    def clean(self, value):
        if isinstance(value, dict) and self.required:
            filled_value = [ v for v in value.values() if bool(v) ]
            if not filled_value:
                raise ValidationError, _(""This field is required."")
        return super(TransFormField, self).clean(value)

class TransField(models.Field):
    '''
    Model field to be subclassed
    Used for storing a string in many languages at database (with python's dictionary format)
    pickle module could be used, but wouldn't alow search on fields?
    '''
    def get_internal_type(self):
        return 'TextField'

    def to_python(self, value):
        if isinstance(value, TransDbValue):
            return value

        if isinstance(value, dict): # formfield method makes this function be called with value as a dict
            python_value = value
        else:
            try:
                python_value = eval(value)
                for k,v in python_value.items():
                    python_value[k] = smart_unicode(v)
            except Exception:
                python_value = None
        if isinstance(python_value, dict):
            if python_value.has_key(get_language()) and python_value[get_language()]:
                result = TransDbValue(python_value[get_language()])
            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:
                result = TransDbValue(python_value[settings.LANGUAGE_CODE])
            else:
                val = ""bal""
                for item in python_value.items():
                    try:
                        val = item[1]
                    except:
                        pass
                    if val: break

                result = TransDbValue(python_value.items()[0][1])
            result.raw_data = python_value
        else:
            result = TransDbValue(value)
            result.raw_data = {settings.LANGUAGE_CODE: value}
        return result

    def get_db_prep_save(self, value):
        if not isinstance(value, TransDbValue):
            return value
        value = [u""'%s': '''%s'''"" % (k, v) for k, v in value.raw_data.items()]
        value = u'{%s}' % u','.join(value)
        return smart_str(value)

    def formfield(self, **kwargs):
        defaults = {'form_class': TransFormField}
        defaults.update(kwargs)
        return super(TransField, self).formfield(**defaults)

    def flatten_data(self, follow, obj=None): 
        '''
        for serializing objects
        '''
        raw_data = self._get_val_from_obj(obj).raw_data.copy()
        for k,v in raw_data.items():
            raw_data[k] = smart_str(v)
        return {self.attname: raw_data}

class TransCharField(TransField):
    '''
    TransField used with CharField widget
    '''
    __metaclass__ = models.SubfieldBase

    def formfield(self, **kwargs):
        kwargs['widget'] = TransCharWidget
        return super(TransCharField, self).formfield(**kwargs)

class TransTextField(TransField):
    '''
    TransField used with CharField widget
    '''
    __metaclass__ = models.SubfieldBase

    def formfield(self, **kwargs):
        kwargs['widget'] = TransTextWidget
        return super(TransTextField, self).formfield(**kwargs)

"
"Create a python script that displays the information of three different cities.  Edinburgh: Scotland, 54.6°N, UK
Paris: France, 48.86°N, Europe
Dhaka: Bangladesh, 23.78°N, Asia","def get_city_info(city, country, latitude, continent):
   print(""City: {}, Country: {}, Latitude: {}, Continent: {}"".format(
        city, country, latitude, continent))
 
get_city_info('Edinburgh', 'Scotland', '54.6°N', 'UK')
get_city_info('Paris', 'France', '48.86°N', 'Europe')
get_city_info('Dhaka', 'Bangladesh', '23.78°N', 'Asia')"
"Write a Python program to remove duplicate characters of a given string.  ""bufferoverflow""","def remove_duplicate_characters(string):
    result = """"
    seen = set()
    for char in string:
        if char not in seen:
            seen.add(char)
            result += char
    return result

print(remove_duplicate_characters(""bufferoverflow""))"
Produce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list.  ,"def sum_list(arr):
    """"""Finds the sum of a given list of numbers.
    
    Args:
        arr (list): List of numbers.
        
    Returns:
        int: Sum of list elements.
    """"""
    sum = 0
    for num in arr:
        sum += num
    return sum"
"Create a function in Python to calculate the distance between two points.  point1 (x1, y1): (2, 7)
point2 (x2, y2): (4, 9)","import math

def distance_between_points(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    
# Call the function
distance = distance_between_points(2, 7, 4, 9)
print(""The distance between the two points is"", distance)"
Create an AI program that recognizes handwritten letters and digits using Python.  Not applicable,"# imports
import tensorflow as tf
from tensorflow import keras

# load the MNIST dataset
mnist = keras.datasets.mnist
# Split the dataset into training and testing sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()
# Preprocess the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# create a model
model = keras.Sequential()
# add a convolution layer
model.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
# add a max pooling layer
model.add(keras.layers.MaxPool2D(pool_size=(2, 2)))
# add a flatten layer
model.add(keras.layers.Flatten())
# add a dense layer
model.add(keras.layers.Dense(128, activation='relu'))
# add an output layer
model.add(keras.layers.Dense(10, activation='softmax'))

# compile the model
model.compile(optimizer='adam', 
 loss='sparse_categorical_crossentropy',
 metrics=['accuracy'])

# train the model
model.fit(x_train, y_train, epochs=5)

# evaluate the model
model.evaluate(x_test, y_test)"
"Given a list of numbers, write a Python function to find out if any two numbers add up to a given number.  ","def two_sum(numbers, given):
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if numbers[i] + numbers[j] == given:
                return True
    return False"
Write a Python program to generate a random number between the given input numbers.  ,"import random

def random_num(start, stop):
    return random.randint(start, stop)


# Example
num = random_num(0, 10)
print(num)"
Create a python program to include a web-page rendering feature.  ,"import webbrowser

url = ""www.example.com""
webbrowser.open(url)"
"Create a Python dictionary from two given lists.  list1 = ['a', 'b', 'c'] 
list2 = [1, 2, 3]","dict1 = dict(zip(list1, list2)) 
print(dict1)"
Construct a code snippet for Python to check whether a number is even or odd.  ,"def is_even(n):
    if n % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")

is_even(4)"
Develop a reinforcement learning environment that plays tic-tac-toe in Python  ,"import random

# Create class for environment
class TicTacToeEnv():
    # Define initializer
    def __init__(self):
        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
        self.player = 'X'
        self.player_turn = 0
    
    # Define a reset method to set initial state
    def reset(self):
        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
        self.player = 'X'
        self.player_turn = 0
        return self.state
        
    # Define step function
    def step(self, action):
        # Set player mark
        self.state[action] = self.player
        # Check for winner
        winner = self.check_winner()
        done = False
        if winner == 'X' or winner == 'O':
            reward = 1
            done = True
        else:
            reward = 0
        # Switch players
        if self.player == 'X':
            self.player = 'O'
        else:
            self.player = 'X'
        # Check for draw and switch player turn
        if self.player_turn == 8:
            done = True
            reward = 0.5
        self.player_turn += 1
        # Return state, reward, done, info
        return self.state, reward, done, None
        
    # Define a method to check if someone has won
    def check_winner(self):
        win_state = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]
        for i in win_state:
            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'X':
                return 'X'
            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'O':
                return 'O'
        return None

# Play a game
env = TicTacToeEnv()
env.reset()
done = False
while not done:
    action = random.randint(0, 8)
    state, reward, done, _ = env.step(action)
    print(env.state)
    if reward == 1 or reward == 0.5:
        print(""Winner: ""+str(reward))"
"Create a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings.  strings = ['hello', 'world', 'computer']","strings = ['hello', 'world', 'computer']

dictionary = {}

for string in strings:
 for char in string:
  dictionary[char] = len(string)

print(dictionary)  # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}"
"Develop a Python script to sort a given list of names alphabetically.  [John, Harry, Robert]","def sort_names(names):
    names.sort()
    return names

names = [""John"", ""Harry"", ""Robert""]
result = sort_names(names)
print(result)"
Create a Python script to connect to a domain and fetch the contents of its homepage  ,"import requests

url = ""https://www.example.com/"" 
response = requests.get(url) 

if response.status_code == 200: 
    print(response.content) 
else:
    print(""Error fetching the page"")"
"What function will you use to count the number of words in a string?  'Hello world, this is a sentence.'","There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```"
"Create a Python program that shuffles an array of integers.  [1, 5, 9, 4, 2]","import random

def shuffle(arr):
    random.shuffle(arr)
    return arr 

my_arr = [1, 5, 9, 4, 2]

print(shuffle(my_arr))"
Write a Python program that calculates the greatest common divisor of two numbers and displays the result.  10 and 20,"def gcd(a, b):
    if b == 0: 
        return a 
    return gcd(b, a % b) 
  
num1 = 10
num2 = 20

gcd_value = gcd(num1, num2)

print(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')"
Develop a python program to convert a given temperature value from Fahrenheit to Celsius.  ,"def fahrenheit_to_celsius(temp):
    celsius = (temp - 32) * 5/9 
    return round(celsius, 2)"
"Write a Python program to generate a random password for a user with length of 8 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character.  Not applicable","import string
import random

def generate_password():
   up_alphabet = string.ascii_uppercase
   low_alphabet = string.ascii_lowercase
   digits = string.digits
   symbols = string.punctuation
   length = 8
   pass_characters = up_alphabet + low_alphabet + digits + symbols
   password =  ''.join(random.sample(pass_characters, length))
   return password

print(generate_password())"
Implement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.  MNIST dataset,"import numpy as np
import matplotlib.pyplot as plt
import gzip
import pickle

# load training data
with gzip.open('./mnist_dataset/mnist.pkl.gz', 'rb') as f:
    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')

# prepare logistic regression
X_train, y_train = train_data[0], train_data[1]
X_valid, y_valid = valid_data[0], valid_data[1]
X_test, y_test = test_data[0], test_data[1]

X_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])
X_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])
X_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])

def sigmoid(z):
    return 1.0/(1.0+np.exp(-z))

def LogisticRegression(X, y, max_iter, alpha):
    m, n = X.shape
    weights = np.zeros(n)
    
    for _ in range(max_iter):
        weights = weights - alpha * (1/m) * (X.T @ (sigmoid(X @ weights) - y))

    return weights

weights = LogisticRegression(X_train, y_train, 1000, 0.001)

# accuracy on training set
predictions = np.round(sigmoid(X_train @ weights))
train_accuracy = np.mean(predictions == y_train)

# accuracy on validation set
predictions = np.round(sigmoid(X_valid @ weights))
valid_accuracy = np.mean(predictions == y_valid)

# accuracy on test set
predictions = np.round(sigmoid(X_test @ weights))
test_accuracy = np.mean(predictions == y_test)

print('Train accuracy = ', train_accuracy)
print('Validation accuracy = ', valid_accuracy)
print('Test accuracy = ', test_accuracy)"
Develop a design algorithm in Python that randomly generates a unique snowflake pattern.  ,"import random

def generate_snowflake():
  # Generate random numbers between 0 and 1
  a = random.random()
  b = random.random()
  c = random.random()

  # Generate the snowflake
  snowflake = [] 
  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))
  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))
  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))

  return snowflake"
"Use Python to build a random number generator in the range [0, 10).  ","import random
 
x = random.randint(0, 9)
print(x)"
"Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number.  Not applicable","class Employee:
    def __init__(self, name, job_title, job_number):
        self.name = name
        self.job_title = job_title
        self.job_number = job_number"
Develop a system that finds similarities between given strings.  ,"def get_jaccard_similarity(str1, str2):
    a = set(str1.split()) 
    b = set(str2.split())
    c = a.intersection(b)
    return float(len(c)) / (len(a) + len(b) - len(c))

# Driver code 
str1 = ""python programming""
str2 = ""java programming""
print(get_jaccard_similarity(str1, str2))"
"Write a python program that selects five random elements from a list and prints them.  my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]","import random

my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]
random.shuffle(my_list)

for i in range(5):
    print(my_list[i])"
"Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.  [2, 8, 5, 2, 6, 3, 4]","my_list = [2, 8, 5, 2, 6, 3, 4]
my_list = list(dict.fromkeys(my_list))
my_list.sort()
print(my_list) # [2, 3, 4, 5, 6, 8]"
Create a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them.  8 and 20,"def prime_numbers(x, y):
 
 prime_nums = {}
 
 for i in range(x, y+1):
 if(i > 1):
 for j in range(2, i):
 if(i % j == 0):
 break
 else:
 prime_nums[i] = i
 
 return prime_nums
 
print(prime_numbers(8, 20))
# { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }"
Develop a Python script to print the first 10 cubes of natural numbers.  ,"for i in range(1, 11):
    print(i**3)"
"Create a python function that takes in two strings and output their combined length.  string_1 = ""Hello""
string_2 = ""World""","def get_string_length(string_1, string_2):
    return len(string_1 + string_2)"
"Develop a function in Python to randomly select one element from a given array.  [1, 2, 3, 4]","import random

def randomElement(arr):
    return random.choice(arr)"
Develop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.  Not applicable,"# import libraries 
from keras.models import Sequential 
from keras.layers import Dense, Dropout 
import numpy 

# load the dataset 
dataset = numpy.loadtxt(""mnist.csv"", delimiter="","") 

# split into input (X) and output (Y) variables 
X = dataset[:,0:784] 
Y = dataset[:,784] 

# Create model
model = Sequential() 
model.add(Dense(784, input_dim=784, activation='relu'))
model.add(Dense(256, activation='relu')) 
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compile model 
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) 

# Fit the model 
model.fit(X, Y, epochs=10, batch_size=128, verbose=2)

# Evaluate the model 
scores = model.evaluate(X, Y) 
print(""\n%s: %.2f%%"" % (model.metrics_names[1], scores[1]*100))"
"Sort a list of dictionaries in Python by a given key.  [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]","list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]

# Sort list by given key
sorted_list = sorted(list_of_dicts, key=lambda item:item['color'])

print(sorted_list)"
"Create a Python script to scrape tweets with a particular hashtag from Twitter.  ""#100DaysOfCode""","import tweepy

# Replace the API_KEY and API_SECRET with your application's key and secret.
auth = tweepy.AppAuthHandler(API_KEY, API_SECRET)

api = tweepy.API(auth, wait_on_rate_limit=True,
 wait_on_rate_limit_notify=True)

# Replace the hashtag with your hashtag of interest.
hashtag = '#100DaysOfCode'

# Fetch the tweets
tweets = tweepy.Cursor(api.search, q=hashtag, lang=""en"").items()

# Print out the tweets
for tweet in tweets:
 print(tweet.text)"
"Design an algorithm in Python to find the number of occurrences of a given string in another string.  haystack = ""Hello World""
needle = ""l""","def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count"
"Generate Python code to print the sum of two user-defined variables.  var1 = 3 
var2 = 7","var1 = 3
var2 = 7

sum = var1 + var2
print('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'"
Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.  Not applicable,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2) 
  
# Driver Program 
    print(fibonacci(10))"
Create a web application using Django and Python. This application should allow users to register and login to view a list of quotes.  Not applicable,"# projects/quotes/models.py

class Quote(models.Model):
    author = models.CharField(max_length=255)
    quote_text = models.TextField()


class UserQuote(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)

# projects/quotes/views.py

def index(request):
    if not request.user.is_authenticated:
        return redirect('login')
    quotes = request.user.userquote_set.all()
    return render(request, 'quotes/index.html', {'quotes': quotes})

def login(request):
    if request.user.is_authenticated:
        return redirect('index')

    if request.method == 'POST':
        form = AuthenticationForm(request.POST)
        if form.is_valid():
            user = form.get_user()
            django_login(request, user)
            return redirect('index')
    else:
        form = AuthenticationForm()
    return render(request, 'quotes/login.html', {'form': form})"
Create a program in Python 3 to simulate the rolling of two dice.  ,"import random

def roll_dice():
    '''This function simulates rolling two dice.'''
    die_1 = random.randint(1, 6)
    die_2 = random.randint(1, 6)
    print(""Die 1: {}"".format(die_1))
    print(""Die 2: {}"".format(die_2))
    return (die_1, die_2)"
"Create a Python script to format the following string with proper new lines and indentation.  '{ ""name"":""John"", ""age"":30, ""city"":""New York""}'","formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'"
Implement a Python function to generate the Fibonacci sequence of a given length.  6,"def generate_fibonacci(length):
    # Initialize
    n1, n2 = 0, 1

    # Check if length is valid
    if length <= 0:
        print('Invalid length. Positive numbers only.')
    elif length == 1:
        print(n1)
    else:
        print(n1, n2, end=' ')
    
    # Generate sequence
    for i in range(2, length):
        n3 = n1 + n2
        print(n3, end=' ')
        n1 = n2
        n2 = n3

# Show output
generate_fibonacci(6)
# Output: 0 1 1 2 3 5"
"Create a python program to calculate the sum of odd numbers within a given range.  range(1, 10)","total = 0
for i in range(1, 10):
    if i % 2 != 0:
        total += i
print(total)"
"Optimize a function written in Python that calculates the mean of a given sequence of numbers  import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    sum = 0
    for number in sequence:
        sum += number
    return sum / len(sequence)","import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    return np.mean(sequence)"
Write a Python program to create a dictionary mapping letters to numbers and numbers to letters.  ,"letters_numbers = {
 'a': 1, 'b': 2, 'c': 3,  'd': 4, 'e': 5,
 'f': 6, 'g': 7, 'h': 8,  'i': 9, 'j': 10,
 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,
 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,
 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26
}
numbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys()))
print(numbers_letters)"
"Develop a script in Python to find the longest common subsequence of two given strings.  AGGTAB
GXTXAYB","def lcs(X, Y, m, n):
    if m == 0 or n == 0:
        return 0
    elif X[m-1] == Y[n-1]:
        return 1 + lcs(X, Y, m-1, n-1)
    else:
        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))

X = ""AGGTAB""
Y = ""GXTXAYB""
m = len(X)
n = len(Y)
print(""The length of LCS is "" + lcs(X, Y, m, n))"
"Create a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements.  list1 = [2, 3, 5, 8]
list2 = [4, 6, 7]","def merge_sorted_lists(list1, list2):
    new_list = []

    i1 = 0
    i2 = 0
    while i1 < len(list1) and i2 < len(list2):
        if list1[i1] < list2[i2]:
            new_list.append(list1[i1])
            i1 += 1
        else:
            new_list.append(list2[i2])
            i2 += 1
    
    while i1 < len(list1):
        new_list.append(list1[i1])
        i1 += 1
    
    while i2 < len(list2):
        new_list.append(list2[i2])
        i2 += 1

    return new_list

list1 = [2, 3, 5, 8]
list2 = [4, 6, 7]

merged = merge_sorted_lists(list1, list2)
print(merged)"
Find the 5 most frequent words in the given text.  Text: Python is a high-level programming language.,"from collections import Counter

text = "" Python is a high-level programming language.""
words = text.split()

frequencies = Counter(words)

# printing five most frequent words 
frequent_words = frequencies.most_common(5)

print(frequent_words)"
Design a python program that calculates a person's BMI (body mass index).  ,"def calculate_bmi(weight, height):
    bmi = weight/(height**2)
    return bmi"
"Generate Python code to print the smallest number in a given list of numbers.  [24, 14, 67, 89, 34, 52]","list_of_numbers = [24, 14, 67, 89, 34, 52]
print(min(list_of_numbers))"
"Write a Python program to quickly search for a substring in a larger string.  string = ""hello world"" substring = ""or""","def search_substring(string, substring):
    index = string.find(substring)
    return index 

result = search_substring(""hello world"", ""or"")
print(result)"
Develop a Python program to fetch the website users of an online store.  Website URL: www.example.com,"import requests

url = 'https://www.example.com/users'
response = requests.get(url)
data = response.json()

for user in data:
    print(user['name'])"
Write a python program that will generate a password containing numbers and letters from an entered string.  Hello,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))"
"Generate a Python program to delete an item from a given list.  Item: 5 
List: [8, 4, 5, 9, 2]","def remove_item(item, list): 
    list.remove(item) 
    return list
  
list_org = [8, 4, 5, 9, 2]
  
result = remove_item(5, list_org)
print(result)"
"Write a Python code snippet that takes a list of numbers as argument and prints the average.  [2, 3, 4, 5, 6]","def average(numbers: list):
    if numbers:
        return sum(numbers) / len(numbers)
    else:
        return 0
    
numbers = [2, 3, 4, 5, 6]
print(f""Average of {numbers} is {average(numbers)}"")"
Write a Python program to check whether a number is in a given range  ,"def is_in_range(n, lower, upper):
    return lower <= n <= upper"
"Design and implement a function in Python that takes a list of numbers as input and checks if any of the numbers are prime.  [2, 3, 5, 7, 8, 11, 13, 15]","def is_prime(list_of_numbers):
    # Iterate over the list of numbers
    for num in list_of_numbers:
        # Check if the number is divisible by any number
        # other than 1 and the number itself
        for divisor in range(2, num):
            if num % divisor == 0:
                # If there is any divisor, the
                # number is not a prime number
                return False
    # All the numbers in the list are prime numbers
    return True

list_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]
outcome = is_prime(list_of_numbers)
print(outcome)"
"Create an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.  list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]","def quicksort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)

list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    
print(quicksort(list))

# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]"
Write a script in Python to detect the sentiment of a given text.  ,"import textblob

def detect_sentiment(text):
    analysis = textblob.TextBlob(text)
    if analysis.sentiment.polarity > 0:
        return 'positive'
    elif analysis.sentiment.polarity == 0:
        return 'neutral'
    else:
        return 'negative'"
Write a Python program to check if a given number is divisible by 3 and 5 or not.  10,"def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
        return True
    else:
        return False

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
else:
    print(""%d is not divisible by 3 and 5"" %num)"
Design a Python program to stop a loop after some specific iterations  ,"for i in range(100):
    if (i > 10):
        break
    print(i)"
"Create a REST API in Python Flask for the following model.  class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email","from flask import Flask, jsonify, request

# Class
class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email

# Create the application instance
app = Flask(__name__)

# Create a URL route in our application for ""/""
@app.route('/', methods=['GET', 'POST'])
def index():

    # POST request
    if request.method == 'POST':
        json_data = request.get_json(force=True)
        if not json_data:
            return jsonify({'message': 'No input data provided'}), 400
        user_name = json_data['name']
        user_email = json_data['email']
        user = User(name=user_name, email=user_email)

        return jsonify({
            'name': user.name,
            'email': user.email
        })
    
    # GET request
    if request.method == 'GET':
        # Get user list
        users = [user.__dict__ for user in users]
        return jsonify({'users': users}), 200

# Run the application
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)"
Create a neural network with two hidden layers in Python.  ,"import numpy as np #importing the libraries 
from sklearn.neural_network import MLPClassifier #importing the neural network classifier

#defining the input values
X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])

#Creating the model
model = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.
model.fit(X,y)

#Testing the model with a new input
test_data = np.array([[1,1]])
prediction = model.predict(test_data) 
print(""The model predicts the output as:"",prediction[0])"
Create a Python program that takes a positive integer as an input and prints all its prime factors.  ,"def prime_factors(num):
 prime_list = []
 i = 2
 while i * i <= num:
 if num % i:
 i += 1
 else:
 num //= i
 prime_list.append(i)
 if num > 1:
 prime_list.append(num)
 return prime_list

n = int(input('Enter a positive integer: '))
print(prime_factors(n))"
Write an algorithm to implement a trie data structure in Python.  ,"""""""
Write an algorithm to implement a trie data structure in Python
""""""

class TrieNode(object):
    """"""Trie node class""""""
    def __init__(self):
        """"""Constructor for trie node""""""
        self.children = {}
        self.end_of_word = False

class Trie(object):
    """"""Trie class""""""

    def __init__(self):
        """"""Constructor for Trie""""""
        self.root = TrieNode()

    def insert(self, word):
        """"""Inserts the given word into the trie""""""
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]

        node.end_of_word = True

    def search(self, word):
        """"""Searches if the given word is present in the trie""""""
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.end_of_word

# Test code
trie = Trie() 
words = [""apple"", ""application"", ""hi""]

# Insert words into the trie
for word in words:
    trie.insert(word)

# Test search
if trie.search(""apple""):
    print(""Word Found"")
else:
    print(""Word Not Found"")"
Create a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum.  ,"import unittest

def add(a, b):
    return a + b

class myTests(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(2, 3), 5)
        self.assertEqual(add(-1, 7), 6)

    def test_type(self):
        self.assertRaises(TypeError, add, 'a', 'b')

if __name__ == '__main__':
    unittest.main()"
"Write a Python program to sort a list of tuples by their second element.  [(1, 3), (3, 2), (4, 1), (2, 4)]","def sortBySecondElement(lst):
    # Sort the list of tuples by their second elements
    return sorted(lst, key=lambda x : x[1])

# Testing
lst = [(1, 3), (3, 2), (4, 1), (2, 4)]

sortedLst = sortBySecondElement(lst)

print(sortedLst)

# Output
# [(4, 1), (3, 2), (1, 3), (2, 4)]"
"Create a Python module for a contact book application. This module should include classes for User (with fields for name, age, address, and email) and Contact (with fields for name, age, phone number).  Not applicable","class User:
 """"""A class representing a user.""""""
 def __init__(self, name, age, address, email):
 self.name = name
 self.age = age
 self.address = address
 self.email = email

class Contact:
 """"""A class representing a contact.""""""
 def __init__(self, name, age, phone_number):
 self.name = name
 self.age = age
 self.phone_number = phone_number"
"Generate Python classes from the given JSON.  {
""name"": ""Employee"",
""attributes"": {
""emp_id"": {
""type"": ""int""
},
""name"": {
""type"": ""string""
},
""department"": {
""type"": ""string""
},
""salary"": {
""type"": ""float""
}
}
}","class Employee:
    def __init__(self, emp_id, name, department, salary):
        self.emp_id = emp_id
        self.name = name
        self.department = department
        self.salary = salary"
Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.  ,"def count_substring(S, T):
  count = 0
  for i in range(len(S)):
    for j in range(len(T)):
      if(S[i:i+j+1] == T):
        count += 1
  return count"
Develop a Python script that can query a SQL database and return the total number of entries in all the tables  SQL database,"import sqlite3

conn = sqlite3.connect(""example.db"")
cur = conn.cursor()

sql = ""SELECT name FROM sqlite_master WHERE type='table';""
cur.execute(sql)
tables = cur.fetchall()

count = 0
for table in tables:
    sql = f""SELECT COUNT(*) FROM {table[0]};""
    cur.execute(sql)
    count += cur.fetchone()[0]

print(f""Number of entries: {count}"")"
"Write a Python program to filter out strings from a list of strings containing specific characters.  list_of_strings = [""Hello"", ""World"", ""1"", ""0"", ""This is a string.""]","def filter_strings(list_of_strings):
    return list(filter(lambda x: x.isalpha(), list_of_strings))

print (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']"
Create a function in Python to calculate the sum of the cubes of the first n positive integers.  n = 4,"def sum_cubes(n): 
    sum = 0
    for i in range(1,n+1): 
        sum += i**3 
    return sum"
Write a Python function that takes a string as input and checks if it is a palindrome or not.  Not applicable,"def is_palindrome(string):
   # reverse the string
   rev_string = string[::-1] 
   
   # check if the string is equal to its reverse
   if (string == rev_string): 
     return True
   return False

# Example usage:

result = is_palindrome('racecar')
# result = True"
Create a Python script that pulls data from an API and stores it in a database.  Not applicable,"import requests
import json
import sqlite3

# Make a GET request to the API
response = requests.get(url)
data = response.json()

# Save the data to a database
conn = sqlite3.connect('data.db')
c = conn.cursor()
for item in data:
    c.execute(""INSERT INTO items VALUES (?, ?)"", (item['id'], item['name']))
conn.commit()
conn.close()"
"Generate a Python program to iterate over a list of numbers and print out only the even numbers.  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
 if num % 2 == 0:
 print(num)"
"Modify the following Python code to use a loop instead of recursion.  def GCD(x, y):
if y == 0:
 return x
 else:
 return GCD(y, x%y)","def GCD(x, y):
    while(y != 0):
        temp = y
        y = x % y
        x = temp
    return x"
"Write a Python function to transpose a given matrix of size (m x n).  [[1, 2], 
 [3, 4], 
 [5, 6]]","def transposeMatrix(matrix): 
 m = len(matrix) 
 n = len(matrix[0]) 
  
 # Create a new matrix 
 transpose = [[0 for x in range(m)] for y in range(n)] 
  
 # Iterate through the original matrix 
 for i in range(m): 
 for j in range(n): 
 transpose[j][i] = matrix[i][j] 
 return transpose"
Generate a python program that multiplies two matrices.  ,"def matrix_multi(A, B):
    rows_A = len(A)
    cols_A = len(A[0])
    rows_B = len(B)
    cols_B = len(B[0])

    if cols_A != rows_B:
        print(""Cannot multiply the given matrices."")
        return

    C = [[0 for row in range(cols_B)] for col in range(rows_A)]

    for i in range(rows_A):
        for j in range(cols_B):
            for k in range(cols_A):
                C[i][j] += A[i][k] * B[k][j]

    return C"
Create a basic calculator in Python  ,"def calculator():
  while True:
    try:
      userInput = input('Input equation (type ""quit"" to exit): ')

      if userInput == ""quit"":
        break
        
      result = eval(userInput)
      print(result)

    except:
      print('Invalid equation')

calculator()"
"Design a solution in Python for determining the frequency of characters in a given string.  ""A quick brown fox jumps over the lazy dog.""","text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += 1
    else: 
            count[character] = 1
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))"
Write a Python program to create a class for managing a linked list.  ,"""""""
Write a Python program to create a class for managing a linked list.
""""""

# Create the Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
    
# Create the LinkedList class
class LinkedList:
    def __init__(self):
        self.head = None
        
    def addNode(self, data):
        node = Node(data)
        if self.head == None:
            self.head = node
        else:
            curr = self.head
            while curr.next != None:
                curr = curr.next
            curr.next = node
            
    def printList(self):
        curr = self.head
        while curr != None:
            print(curr.data)
            curr = curr.next"
"Write a Python function to remove all consecutive duplicates of a given number.  [1,1,2,3,3,3,4,4,4,4]","def remove_duplicates(lst):
  result = []
  curr = lst[0]

  for num in lst:
    if num != curr:
      result.append(num)
      curr = num
  return result"
"Create a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.  Not applicable","import sys

def factorial(n):
 if n == 1 or n == 0:
 return 1
 else:
 return n * factorial(n-1)

if __name__ == '__main__':
 if len(sys.argv) > 1 and sys.argv[1] == '--number':
 try:
 number = int(input('Please enter a number: '))
 print(f'{number}! = {factorial(number)}')
 except ValueError:
 print('Please enter a valid number.')
else:
 print('Please provide a single argument --number')"
Implement the PageRank algorithm in Python.  Not applicable,"import networkx as nx

def page_rank(G, alpha=0.85, personalization=None, 
 max_iter=100, tol=1.0e-6, nstart=None, weight='weight', 
 dangling=None):

""""""
Return the PageRank of the nodes in the graph. 

G: graph
alpha: damping parameter for PageRank, default=0.85
personalization: 
    dict, optional 
    The ""personalization vector"" consists of a dictionary with a 
    key for every graph node and nonzero personalization value for each node. 
max_iter: 
    int, optional 
    Maximum number of iterations in power method eigensolve.
tol: float, optional
    Error tolerance used to check convergence in power method eigensolve.
nstart: 
    dict, optional 
    Starting value of PageRank iteration for each node.
weight: 
    key, optional 
    Edge data key to use as weight. 
dangling: 
    dict, optional 
    The outedges to be assigned to any ""dangling"" nodes, i.e., nodes without any outedges. 

Returns:
    Dictionary of nodes with PageRank as value.
""""""

# Initialize results vector with (1-alpha)/N, 
# where N is the number of nodes in the graph.
N = G.number_of_nodes()
x = dict.fromkeys(G, (1 - alpha) / N)

# Check if personalization vector was passed in; if so, update results vector
if personalization is None:
    p = dict.fromkeys(G, 1 / N)
else:
    missing = set(G) - set(personalization)
    if missing:
        raise NetworkXError('Personalization dictionary '
                            'must have a value for every node. '
                            'Missing nodes %s' % missing)
    p = personalization
   p = p.copy()
    s = float(sum(p.values()))
    for k in p:
        x[k] = p[k] / s
        p[k] = p[k] / s

if dangling is None:
    # Use personalization vector if dangling vector not specified
    dangling_weights = p
else:
    # Dangling nodes are nodes with no outedges.
    # Use personalization vector if dangling vector is specified but
    # doesn't have an entry for every node
    missing = set(G) - set(dangling)
    if missing:
        raise NetworkXError('Dangling node dictionary '
                            'must have a value for every node. '
                            'Missing nodes %s' % missing)
    s = float(sum(dangling.values()))
    for k in dangling:
        dangling[k] /= s
    dangling_weights = dangling

# power iteration: make up to max_iter iterations
for _ in range(max_iter):
    xlast = x
    x = dict.fromkeys(xlast.keys(), 0)
    danglesum = alpha * sum(xlast[n] for n in dangling_weights)
    for n in x:

# this matrix multiply looks odd because it is
# doing a left multiply x^T=xlast^T*W
        for nbr in G[n]:
            x[nbr] += alpha * xlast[n] * G[n][nbr].get(weight, 1)
        x[n] += danglesum * dangling_weights.get(n, 0) + (1.0 - alpha) * p.get(n, 0)

# check convergence
err = sum([abs(x[n] - xlast[n]) for n in x])
if err < N*tol:
    return x
return x"
Generate a Python function to calculate the area of a triangle given the three sides.  ,"def triangle_area(side1, side2, side3):
    s = (side1 + side2 + side3) / 2
    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
    return area"
Code a python function to combine two lists into a single list of tuples.  ,"def combine_lists(list1, list2):
    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]
    return combined_list"
"Generate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.  [8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]","import numpy as np
import pandas as pd

def bitcoinPricePrediction(data):
# convert data to numpy array
data = np.array(data)

# define the model
model = keras.Sequential([
keras.layers.Dense(64, activation='relu'),
keras.layers.Dense(64, activation='relu'),
keras.layers.Dense(64, activation='relu'),
keras.layers.Dense(1)])

# compile and train the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(data, epochs=50, verbose=1)

# predict the tomorrow's bitcoin price
prediction = model.predict(data)[0][0]

return prediction"
"Code a Python program that takes two integers and checks if they are co-prime numbers.  num1 = 34
num2 = 21","def is_coprime(num1, num2):
        while num1 != 0 and num2 != 0: 
            if(num1 > num2): 
                num1 %= num2 
            else: 
                num2 %= num1
                  
        if(num1 == 0): 
            gcd = num2 
        else: 
            gcd = num1 
        if(gcd == 1):
            return True
        else:
            return False

if __name__ == ""__main__"":
    num1 = 34
    num2 = 21
    result = is_coprime(num1, num2)
    print(result)"
"Compose a Python class that creates a list of unique elements in the input.  ['a','b','b','c','a','c']","class ListUnique:
    
    def __init__(self,list1):
        # set up empty list
        self.list1 = []
        
        # loop through input list
        for x in list1:
            # add element to list if it is not already in the list
            if x not in self.list1:
                self.list1.append(x)
                
    # returns the modified list
    def get_list(self):
        return self.list1

list1 = ['a','b','b','c','a','c']

# create instance of ListUnique
lu = ListUnique(list1)

# print the modified list
print(lu.get_list()) # prints ['a', 'b', 'c']"
"Develop a code to sort the following  Python dictionary by its values from low to high.  students = {
    'Jacob': 95.5, 
    'Leah': 91.8,
    'Sebastian': 98.4,
    'David': 95.1,
    'Joseph': 90.4
}","def sort_dict_by_values(students):
    sorted_students = sorted(students, key=students.get)
    return [sorted_students, [students[key] for key in sorted_students]]

print(sort_dict_by_values(students))"
Construct a machine learning model in Python for predicting the prices of apartments in your city.  ,"#Import Data
import pandas as pd
data = pd.read_csv(‘data.csv’)

#Prepare Data
X = data[['size', 'location', 'bedrooms']]
y = data['price']

#Train Model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X,y)

#Test Model
test_X = [[1500, 'downtown', 3]]
test_y = model.predict(test_X)
print(test_y)"
Generate a code to print the stack trace in Python when an exception occurs.  ,"import traceback

try:
    # some code that might generate exceptions
    pass
except Exception as e:
    print(traceback.format_exc())"
"Create a Python program to read a list of strings and display the same strings in a reverse order.  [""Apple"", ""Banana"", ""Mango"", ""Orange""]","def reverse_strings(string_list):
 reversed_string_list = []
 for string in string_list:
 reversed_string_list.insert(0, string)
 return reversed_string_list

string_list = [""Apple"", ""Banana"", ""Mango"", ""Orange""]
print(reverse_strings(string_list))"
Devise an algorithm in Python to determine if a given number is even or odd.  ,"def is_even(num):
    if num % 2 == 0:
        return True
    else:
        return False"
Create a machine learning model to classify text documents into two different categories.  Provide a sample dataset contains text from two different categories.,"from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Sample dataset
docs = [
 ""The sky is blue."",
 ""Violets are red."",
 ""I love programming."",
 ""JavaScript is fun.""
 ""Python is great!""
]

labels = [0, 0, 1, 1, 1]

# Create the vectorizer
vectorizer = CountVectorizer()

# Vectorize the documents
X = vectorizer.fit_transform(docs).toarray()

# Create a Naive Bayes model
model = MultinomialNB()

# Fit the model to the dataset
model.fit(X, labels)

# Make a prediction
prediction = model.predict([X[3]])

# Print the prediction
print(prediction) # prints [1]"
Train a model to classify spam emails using Python.  ,"import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# loading dataset
df = pd.read_csv(""spam_classification.csv"")

# splitting dataset
X = df[""Message""]
y = df[""Label""]
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# creating a model
model = MultinomialNB()
model.fit(X_train, y_train)

# evaluating the model
score = model.score(X_test, y_test)
print(""Model score: {}"".format(score))"
Design a web application in Django that fetches tweets with the #python hashtag.  Not applicable,"import os
import tweepy
from django.shortcuts import render

# Create your views here.
def index(request):
    consumer_key = os.environ['TWITTER_CONSUMER_KEY']
    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']
    access_key = os.environ['TWITTER_ACCESS_KEY']
    access_secret = os.environ['TWITTER_ACCESS_SECRET']
 
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    api = tweepy.API(auth)
 
    hashtags = [""#python""]
    tweets = api.search(q=hashtags, lang='en')
 
    args = {'tweets': tweets}
    return render(request, 'index.html', args)"
Design an object-oriented program in Python for playing a game of tic-tac-toe.  No Input,"class Game:
    def __init__(self):
        self.board = [[""-"", ""-"", ""-""], 
                      [""-"", ""-"", ""-""], 
                      [""-"", ""-"", ""-""]]
        self.current_player = ""X""

    def display_board(self):
        for i in range(len(self.board)):
            for j in range(len(self.board[i])):
                print(self.board[i][j], end="" "")
            print()

    def move(self, current_player, row, col):
        if self.board[row][col] == ""-"": 
            self.board[row][col] = current_player
        else:
            print(""invalid move, row and col has already been taken"")

    def check_winner(self):
        winner = None
        for row in self.board:
            if row[0] == row[1] == row[2]:
                winner = row[0]
                break
        for col in range(len(self.board[0])):
            if self.board[0][col] == self.board[1][col] == self.board[2][col]:
                winner = self.board[0][col]
                break
        if self.board[0][0] == self.board[1][1] == self.board[2][2]:
            winner = self.board[0][0]
        if self.board[0][2] == self.board[1][1] == self.board[2][0]:
            winner = self.board[0][2]

        if winner == None:
            return False
        else:
            return winner"
Implement an algorithm in Python to reverse a given string.  ,"def reverse_string(string): 
    return string[::-1]"
"Compare two strings using Python and output the similarity score between them.  String 1: hello world 
String 2: hey world","import difflib

def compare_strings(str1, str2):
 score = difflib.SequenceMatcher(None, str1, str2).ratio() 
 print(""Similarity score is:"", score)

compare_strings(""hello world"", ""hey world"") # Output: Similarity score is: 0.909"
"Write a function in Python to create a dictionary from two lists, one of keys and the other one of values.  keys = [1,2,3]
values = ['a','b','c']","def createDict(keys, values):
  dict = {}
  for i in range(len(keys)):
    dict[keys[i]] = values[i]
  return dict"
Creat a Python program to find the sum of the digits of an arbitrary number.  345,"def sum_of_digits(num):
    total = 0
    while num > 0:
        total += num % 10
        num = num // 10
    return total

total = sum_of_digits(345)
print(f'Sum of the digits of the number is {total}')"
"Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.  [1, 2, 3, 4, 5]","def squareList(inputList): 
	# Returns a list of the squares of all the elements in inputList
	squaredList = [] 

	for num in inputList:
		squaredList.append(num ** 2) 

	return squaredList

# Example 
inputList = [1, 2, 3, 4, 5] 

squaredList = squareList(inputList) 

print(squaredList)

# Output: [1, 4, 9, 16, 25]"
"Write a Python script to parse a JSON string and convert it into a dictionary.  '{""name"": ""GPT"", ""type"": ""AI""}'","import json

json_str = '{""name"": ""GPT"", ""type"": ""AI""}'

dict_x = json.loads(json_str)
print(dict_x)"
Come up with a solution to parse an HTML document using Python.  ,"Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:

from bs4 import BeautifulSoup

Then, we can create a BeautifulSoup object with the contents of the HTML document:

soup = BeautifulSoup(html, 'html.parser')

We can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document."
"Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object.  {""name"": ""John"", ""age"": 30}","@app.route('/api', methods=['POST'])
def api():
 data = request.get_json()
 data['age'] = data['age'] + 2
 return jsonify(data)"
"Write a python program that sorts the list using insertion sort algorithm.  unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]","def insertion_sort(input_list):
    # creating a copy of input list so that the original list is not modified
    sorted_list = input_list.copy()
    # Iterating through input list and inserting elements in the right place in the sorted list
    for i in range(1, len(sorted_list)):
        j = i-1
        key = sorted_list[i] 
        while sorted_list[j] > key and j >= 0:
            sorted_list[j+1] = sorted_list[j]
            j -= 1
        sorted_list[j+1] = key

    return sorted_list

sorted_list = insertion_sort(unsorted_list)"
"Create an algorithm in Python to separate numbers below 10 and above 5.  array = [4, 7, 10, 8, 12, 6]","below_ten = [] # Separated numbers
above_five = [] # Separated numbers

# Iterate over array
for n in array:
    if n > 5:
        above_five.append(n)
    else:
        below_ten.append(n)

# Print results
print(""Below 10: "", below_ten)
print(""Above 5: "", above_five)"
Write a Python function to check if a given list contains any duplicate elements.  ,"def check_duplicates(A):
    seen = set()
    for elem in A:
        if elem in seen:
            return True
        seen.add(elem)
    return False"
"Make a Python program that reads a 3x3 matrix and prints the sum of all elements.  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

total = 0

for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        total += matrix[i][j]

print(total)"
"Can you create a Python script to extract email addresses from a raw text?  ""John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com""","import re

text = ""John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com""

emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"",
                    text)

print(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']"
Write a class in Python that will allow users to input their name and will return different sentences depending on the length of the name.  ,"class NameGame:
    def __init__(self, name):
        self.name = name

    def play_game(self):
        if len(self.name) == 0:
            return ""Are you playing games with me ?""
        elif len(self.name) == 1:
            return ""Is that all you are ?""
        elif len(self.name) == 2:
            return ""That's quite a name !""
        else:
            return ""What an interesting name !"""
Create a basic Twitter bot using Python and Tweepy for publishing tweets.  Not applicable,"import tweepy

# authentication
consumer_key = 'YOUR_CONSUMER_KEY'
consumer_secret = 'YOUR_CONSUMER_SECRET'
access_token = 'YOUR_ACCESS_TOKEN'
access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

# Tweeting
text = 'Hello, world!'
api.update_status(text)"
Implement a queue data structure in python  ,"class Queue(object):

    def __init__(self):
        self.queue = []
 
    def enqueue(self, item):
        self.queue.insert(0, item)
 
    def dequeue(self):
        if len(self.queue)>0:
            return self.queue.pop()
        else:
            return None
 
    def size(self):
        return len(self.queue)"
"Generate a program in Python to compare two strings and output true if one string is a permutation of another.  String 1: abc
String 2: cba","def is_permutation(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        dict_str1 = {}
        dict_str2 = {}
        for i in range(len(str1)):
            if str1[i] not in dict_str1:
                dict_str1[str1[i]] = 1
            else:
                dict_str1[str1[i]] += 1
            if str2[i] not in dict_str2:
                dict_str2[str2[i]] = 1
            else:
                dict_str2[str2[i]] += 1
        return dict_str1 == dict_str2

print(is_permutation(str1, str2))"
Use the NumPy library to generate a 3x3 identity matrix in Python.  Not applicable,"import numpy as np

identity_matrix = np.identity(3)
print(identity_matrix)"
"Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.  ","def Fibonacci(n): 
    a, b = 0, 1
    while a < n: 
        print(a, end = ' ') 
        a, b = b, a + b
    print() 
  
n = 10
Fibonacci(n) 

Output: 0 1 1 2 3 5 8"
Gather the information about all Python library released by the Mozilla foundation  ,"The Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page."
Configure a web-server in Python using Flask.  ,"from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def hello():
    return ""Hello World!""

app.run()"
Create a graphical user interface using Tkinter in Python that allows the user to input numbers and calculate the sum.  ,"# Create the window
window = tk.Tk()

# Create two entry fields in the window
entry1 = tk.Entry(window)
entry2 = tk.Entry(window)

# Create a function to get inputs from the entry fields and calculate sum
def get_sum():
    num1 = entry1.get()
    num2 = entry2.get()
    sum = int(num1) + int(num2)
    label.config(text=""Sum is "" + str(sum))

# Create a button to execute the function
button = tk.Button(window, text=""Calculate"", command=get_sum)

# Create a label to display the result
label = tk.Label(window)

# Pack all widgets
entry1.pack()
entry2.pack()
button.pack()
label.pack()

# Main loop
window.mainloop()"
"Compute the product of two matrices using Python.  Matrix A:
[2 3]
[4 7]
Matrix B:
[6 5]
[1 4]","# Matrix multiplication in Python

matrix_A = [[2, 3], [4, 7]] 
matrix_B = [[6, 5], [1, 4]] 
  
# result matrix
result = [[0, 0], [0, 0]] 
  
# iterating by row of Matrix A 
for i in range(len(matrix_A)): 
  
    # iterating by coloum of Matrix B  
    for j in range(len(matrix_B[0])): 
  
        # iterating by rows of Matrix B 
        for k in range(len(matrix_B)): 
            result[i][j] += matrix_A[i][k] * matrix_B[k][j] 
  
for r in result: 
    print(r)"
"Develop a Python Program to determine if two given strings are an anagram or not.  string1 = ""abcd""
string2 = ""cbad""","def is_anagram(string1, string2):
    # check if strings have equal length 
    if len(string1) != len(string2): 
        return False 
    sorted1 = sorted(string1); 
    sorted2 = sorted(string2); 
    # check if sorted strings are the same 
    if sorted1 == sorted2:
        return True 
    return False"
"Develop a Python script to extract the specific keyword from the given URL.  URL: https://www.test.com/where-is-the-key
Keyword: key","import re

url = ""https://www.test.com/where-is-the-key""
keyword = ""key""

match = re.search(f'{keyword}', url)
if match:
    print(f'{keyword} found at starting index: {match.start()}')
else:
    print(f'{keyword} not found')"
"Optimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.  import threading
import time

def mining(difficulty, start):
    nonce = start

    # Main mining loop
    while True:
        hash = generate_hash(nonce)
 
        # Check if the hash meets the difficulty
        if hash[:difficulty] == '0' * difficulty:
            print('Hash found!')
            return nonce
 
        nonce = nonce + 1","import threading
import time

def mining(difficulty, start):
    threads = []
    nonce = start

    # Create threads
    for _ in range(10):
        t = threading.Thread(target=mining_thread,
        args=(difficulty, nonce))
        threads.append(t)
        nonce = nonce + 100

    # Start threads
    for thread in threads:
        thread.start()
  
    # Join threads
    for thread in threads:
        thread.join()

    # Main mining loop
def mining_thread(difficulty, start):
    nonce = start
    while True:
        hash = generate_hash(nonce)
  
        # Check if the hash meets the difficulty
        if hash[:difficulty] == '0' * difficulty:
            print('Hash found!')
            return nonce
  
        nonce = nonce + 1"
"Provide an algorithm in Python to merge two sorted arrays into a single sorted array.  [3, 8, 11] and [1, 4, 9]","def merge_arrays(arr1, arr2):
    merged_arr = []
    # Make copies of arrays
    arr1_copy = arr1[:]
    arr2_copy = arr2[:]
    
    # add elements from both array in sorted order
    while arr1_copy and arr2_copy:
        if arr1_copy[0] <= arr2_copy[0]:
            merged_arr.append(arr1_copy.pop(0))
        else:
            merged_arr.append(arr2_copy.pop(0))
            
    # add remaining elements of array
    if arr1_copy:
        merged_arr.extend(arr1_copy)
    else:
        merged_arr.extend(arr2_copy)
    
    # return merged array
    return merged_arr

arr1 = [3, 8, 11]
arr2 = [1, 4, 9]

print(merge_arrays(arr1, arr2))"
Create a Python script that takes an array with n elements and shuffles it.  n = 10,"import random

def shuffle(lst):
    random.shuffle(lst)
    return lst

arr = [i for i in range(10)]
print(shuffle(arr))"
"Write a Python class that implements a binary search tree. It should have methods for adding nodes to the tree, searching the tree, and obtaining the size of the tree.  Not applicable","class BinarySearchTree:

 def __init__(self):
  self.root = None

 def add_node(self, value):
  if not self.root:
   self.root = Node(value)
  else: 
   self._add_node(self.root, value)

 def _add_node(self, node, value):
  if value <= node.value:
   if node.left:
    self._add_node(node.left, value)
   else:
    node.left = Node(value)
  else:
   if node.right:
    self._add_node(node.right, value)
   else:
    node.right = Node(value)

 def search(self, value):
  return self._search(self.root, value)

 def _search(self, node, value):
  if node is None:
   return False
  if node.value == value:
   return True
  else:
   if value <= node.value:
    return self._search(node.left, value)
   else: 
    return self._search(node.right, value)

 def get_size(self):
  return self._get_size(self.root)

 def _get_size(self, node):
  if not node:
   return 0
  return self._get_size(node.left) + 1 + self._get_size(node.right)"
"Given a list of strings, write a Python program to sort the strings according to the length of each string.  strings = ['abc', 'def', 'ghi', 'jkl', 'mno']","def sort_strings_by_length(strings):
  return sorted(strings, key=len)"
Write a Python program to construct a spam filter using Naïve Bayes.  Not applicable,"from sklearn.naive_bayes import MultinomialNB
import pandas as pd

# Read the data into a dataframe
df = pd.read_csv('spam.csv', header=None)

#Split data into features and target
X = df[df.columns[:-1]]
y = df[df.columns[-1]]

# Create a multinomial naive bayes classifier
model = MultinomialNB()

#Train the model
model.fit(X,y)

# Use the trained model to predict the class for the new data
predicted_classes = model.predict(X)

# Calculate the accuracy of the model
print(""Accuracy:"", model.score(X,y))"
Design an algorithm in Python that checks if a given number is even or odd.  ,"def is_even(n):
   if n % 2 == 0:
    return True
   else:
    return False"
Create a text-based adventure game in Python  Not applicable,"import textwrap 

class TextGame(object):
    def __init__(self):
        self.level = 1
        self.is_playing = True

    def start_game(self):
        self.print_intro()
        while self.is_playing:
            self.level_one()

    def print_intro(self):
        # Introduction text
        intro = textwrap.dedent('''
            You awaken in a strange place, and it seems you have no memory of how you got there.
            You can feel cold dampness of the stone walls and ground beneath your feet.
            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move
            towards it.
        ''')
        print(intro)

    def level_one(self):
        # Level one text
        level_one = textwrap.dedent('''
            As you make your way towards the light, you come across a fork in the path.
            You hear a soft whisper coming from the left path.
        ''')
        print(level_one)

        action = raw_input('''Do you choose to take the left or right path? ''')
        if action.upper() == ""LEFT"":
            self.level_two_left()
        elif action.upper() == ""RIGHT"":
            self.level_two_right()
        else:
            self.level_one()

    def level_two_left(self):
        # Level two left text
        level_two_left = textwrap.dedent('''
            The whisper gets louder as you take the left path. Eventually, you reach a small room.
            In the center of the room is a hooded figure standing in front of a pedestal.
            There is a strange looking artifact on the pedestal.
        ''')
        print(level_two_left)

        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')
        if action.upper() == ""APPROACH"":
            print(""You approach the figure and it removes its hood to reveal a face you recognize"")
        elif action.upper() == ""FLEE"":
            print(""You turn and run, taking the right path"")
            self.level_two_right()
        else:
            self.level_two_left()

# Create instance and start the game. 
game = TextGame()
game.start_game()"
"Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.  ","def double_list(lst):
    return [x * 2 for x in lst]"
"Write a python program to which given a list of numbers, will calculate the mean value  ","def mean(nums):
    total = 0
    for num in nums:
        total += num
    # Return the mean by dividing by the number of elements 
    return total / len(nums)"
"Write a Python program to sort the values of a dictionary by its keys in alphabetical order.  dictionary = {""c"": 3, ""a"": 1, ""b"": 2}","def sort_dictionary_by_keys(dictionary):
    result = {}
    for key in sorted(dictionary.keys()):
        result[key] = dictionary[key]
    return result

dictionary = {""c"": 3, ""a"": 1, ""b"": 2}
sorted_dictionary = sort_dictionary_by_keys(dictionary)

print(sorted_dictionary)"
Create a Tic Tac Toe game in Python.  ,"# define the game board
board = [""_"" for i in range(9)]

# define the player and computer symbols
player = ""X""
computer = ""O""

def display_board():
    row1 = ""| {} | {} | {} |"".format(board[0], board[1], board[2])
    row2 = ""| {} | {} | {} |"".format(board[3], board[4], board[5])
    row3 = ""| {} | {} | {} |"".format(board[6], board[7], board[8])

    print()
    print(row1)
    print(row2)
    print(row3)
    print()

# check for a win
def check_win():
    # check rows
    row1 = board[0] == board[1] == board[2] != ""_""
    row2 = board[3] == board[4] == board[5] != ""_""
    row3 = board[6] == board[7] == board[8] != ""_""
    # if any row does have a match, flag that there is a win
    if row1 or row2 or row3:
        game_over = True
    # check columns
    col1 = board[0] == board[3] == board[6] != ""_""
    col2 = board[1] == board[4] == board[7] != ""_""
    col3 = board[2] == board[5] == board[8] != ""_""
    # if any column does have a match, flag that there is a win
    if col1 or col2 or col3:
        game_over = True
    # check diagonals
    diag1 = board[0] == board[4] == board[8] != ""_""
    diag2 = board[2] == board[4] == board[6] != ""_""
    # if any diagonal does have a match, flag that there is a win
    if diag1 or diag2:
        game_over = True
    # if any condition is true, there is a win
    if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2:
        winner = player
    else:
        game_over = False
    return game_over, winner

# play the game
while True:
    # display the game board
    display_board()
    # get player input
    while True:
        try:
            player_choice = int(input(""Pick a number between 1-9: ""))
            if player_choice >= 1 and player_choice <= 9:
                if board[player_choice - 1] == ""_"":
                    board[player_choice - 1] = player
                    break
            else:
                print(""Sorry, please try again"")
        except:
            print(""Sorry, please try again"")

    # check for a win
    game_over, winner = check_win()
    if game_over:
        display_board()
        print(""Congratulations! You win! "")
        break
    # check for a tie
    if ""_"" not in board:
        print(""It's a tie"")
        break"
"Design a program in Python that takes a list of strings and returns a list containing the length of each of the strings.  ['hello', 'world']","def string_lengths(arr):
    lengths = [len(s) for s in arr]
    return lengths

result = string_lengths(['hello', 'world'])
print(result)"
"Write a Python script that takes as input a list of random numbers and returns only the even numbers from the list  A list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]","""""""Generate a python script that takes a list of random numbers as input and return only the even numbers from the list""""""

# Take a list as input
lst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]

# Create a new list that will contain only the even numbers from the input list
even_numbers = []

# Iterate through input list and append only even numbers to the new list 
for num in lst:
    if num % 2 == 0:
        even_numbers.append(num)
        
# Print out the new list containing only even numbers
print(even_numbers)"
"Generate a Python function that takes an matrix as input and raises each element of it to the power of 3.  [[1,2,3], [4,5,6], [7,8,9]]","def power_of_3(matrix):
    for i in range(len(matrix)):
       for j in range(len(matrix[0])): 
            matrix[i][j] = matrix[i][j] ** 3
    return matrix"
"Create a Python program to find the total number of elements in a stack.  Stack: [1, 2, 3, 4, 5]","def findNumOfElements(stack): 
    return len(stack)"
"Write a Python program to create a dataframe from a given dictionary of lists.  data = {
    'name': ['John', 'Mark', 'Tom'],
    'age': [21, 18, 20]
}","import pandas as pd

data_df = pd.DataFrame(data)

print(data_df)"
"Generate a Python program to output the most frequently occurring word in a given string.  sentence = ""Code Generation is an important task in the AI research""","import collections

def most_frequent_word(string): 
 counts = collections.Counter(string.split()) 
   
 max_count = max(counts.values()) 
   
 most_frequent = [word for word, count in counts.items() 
     if count == max_count] 
   
 print(most_frequent) 
   
if __name__ == ""__main__"": 
    sentence = ""Code Generation is an important task in the AI research""
    most_frequent_word(sentence) 
  
# Output
# ['Generation']"
Construct a function in Python to calculate the volume of a sphere.  ,"def sphere_volume(radius): 
    return (4/3) * 3.14 * (radius*radius*radius) 

# Program to test above function
radius = 3
volume = sphere_volume(radius)
print(""Volume of a sphere with radius %d = %.2f"" %(radius, volume))"
Generate a python program to find the shortest path between two given nodes  ,"def find_path(start, end, graph):
    # Initialize an empty list to store path
    path = []
    # Initialize a queue with start node
    q = [start]
    # Initialize a visited list
    visited = set()

    # Iterate until we get to the end node
    while q:
        node = q.pop(0)
        if node == end:
            path.append(node)
            return path
        elif node not in visited:
            visited.add(node)
            for neighbour in graph[node]:
                q.append(neighbour)
                path.append(node)
    return path"
"Write a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.  example_string = ""This i$n't a siMPle StrinG""","import string

example_string = ""This i$n't a siMPle StrinG""
new_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()
print(new_string)

Output:
thisisntasimplestring"
Generate a Python code to calculate the value of the nth Fibonacci number.  6,"def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(""The requested Fibonacci number is: "" + str(fib(6)))"
"Build a Python script for deleting all characters from a string  string = ""Hello world!""","newString = string.replace("""", """")
print(newString)"
Create a Python function that takes the words in the string and returns the frequency of each word.  ,"def count_words(string):
    words = string.split()
    count_words = {}
    for word in words:
        if word in count_words:
            count_words[word] += 1
        else:
            count_words[word] = 1

    return count_words"
"Write a machine learning model in Python to detect the sentiment of a text document.  The text document is ""This movie was horrible and I never want to watch it again.""","def sentiment_model(text):
 pred = model.predict([text])
 
 if pred == 0:
  sentiment = 'Positive'
 elif pred == 1:
  sentiment = 'Negative'
 
 return sentiment

sentiment = sentiment_model(""This movie was horrible and I never want to watch it again."")
print(sentiment) # Output: Negative"
"Write a Python program to generate an SQL query from a given set of parameters.  Table Name: users

Fields: id, name, age

Filter: age > 18","def generate_sql_query(table_name, fields, filter_clause):
 query = ""SELECT ""
 for i in range(len(fields)-1):
 query += fields[i] + "", ""
 query += fields[-1]
 query += "" FROM "" + table_name + "" WHERE "" + filter_clause
 return query"
Create a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen.  Not applicable,"import random

print(random.randint(1000,9999))"
Define a Python class to model an appointment.  ,"class Appointment:
    def __init__(self, title, time, location):
        self.title = title
        self.time = time
        self.location = location

    def get_title(self):
        return self.title
    
    def get_time(self):
        return self.time
    
    def get_location(self):
        return self.location"
Automate the process of pulling data from a website using Python.  Website URL: http://www.example.com,"import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com'

# Use requests to get website HTML
resp = requests.get(url)

# Parse the HTML using BeautifulSoup
soup = BeautifulSoup(resp.text, 'lxml')

# Extract data from HTML
data = []
for item in soup.find_all('div'):
 data.append(item.text)

# Print the data
for d in data:
 print(d)"
Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values  Not applicable,"import json

def parse_json_object(request):
 # Parse the incoming JSON object
 data = json.loads(request.data)
 
 # Extract the values
 param1 = data['param1']
 param2 = data['param2']
 
 return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)"
"Write a function in Python that takes two arrays of the same size and performs elementwise addition.  arr1 = [1, 2, 3]
arr2 = [3, 4, 5]","def add_arrays(arr1, arr2):
 if len(arr1) != len(arr2):
  raise Exception(""Arrays are not of the same size!"")
 return [x + y for x, y in zip(arr1, arr2)]

add_arrays(arr1, arr2)  # [4, 6, 8]"
"Create a Python program to retrieve and list all the books in a given category in an online book store.  Category = ""Computer Science""","# define category variable
category = ""Computer Science""
# import JSON library for retrieving the data
import json
# import HTTP library for fetching the data
import urllib.request

# create the target url
url = ""https://www.example.com/books/category/"" + category

# fetch the data
response = urllib.request.urlopen(url)
# read the data
data = json.loads(response.read())

# print the books
for book in data:
 print(book['title'])"
"Create a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database.  Not applicable","import sqlite3

class StudentDatabase:
 def __init__(self, db):
  self.conn = sqlite3.connect(db)
  self.cur = self.conn.cursor()
  self.cur.execute(""CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)"")
  self.conn.commit()
  
 def add_student(self, name, email, age):
  self.cur.execute(""INSERT INTO students VALUES (NULL, ?, ?, ?)"", (name, email, age))
  self.conn.commit()
  
 def delete_student(self, id):
  self.cur.execute(""DELETE FROM students WHERE id=?"", (id,))
  self.conn.commit()
  
 def update_student(self, id, name, email, age):
  self.cur.execute(""UPDATE students SET name=?, email=?, age=? WHERE id=?"", (name, email, age, id))
  self.conn.commit()
  
 def list_students(self):
  self.cur.execute(""SELECT * FROM students"")
  rows = self.cur.fetchall()
  return rows
  
def main():
 db = StudentDatabase('students.db')
 db.add_student('John Doe', 'john@doe.com', 30)
 db.add_student('Adam Smith', 'adam@smith.com', 25)
 db.delete_student(2)
 db.update_student(1, 'John Smith', 'john@smith.com', 40)
 print(db.list_students())
 
if __name__ == '__main__':
 main()"
Write a Python program to delete a node from a linked list  head = 5 -> 2 -> 1 -> 4 -> 3,"# Node class
class Node: 
    # Function to initialize the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 
  
  
# Linked List class
class LinkedList: 
  
    # Function to initialize the Linked  
    # List object 
    def __init__(self):  
        self.head = None
  
    # Deletes the node at position n
    def deleteNode(self, position): 
  
        # If linked list is empty 
        if self.head == None: 
            return 
  
        # Store headnode 
        temp = self.head 
  
        # If head needs to be removed 
        if position == 0: 
            self.head = temp.next
            temp = None
            return 
  
        # Find previous node of the node to be deleted 
        for i in range(position-1): 
            temp = temp.next
            if temp is None: 
                break
  
        # If position is more than number of nodes 
        if temp is None: 
            return 
        if temp.next is None: 
            return 
  
        # Node temp.next is the node to be deleted 
        # store pointer to the next of node to be deleted 
        next = temp.next.next
  
        # Unlink the node from linked list 
        temp.next = None
  
        temp.next = next"
"Create a Python script to format a string containing email addresses. The script should remove special characters and extra spaces, and format the email addresses according to their domain.  List of email addresses with special characters [ ""Mike@example.co    m"" , ""Jane#gmail.com"", ""Mason*yahoo.com""]","import re

emails = [ ""Mike@example.co    m"" , ""Jane#gmail.com"", ""Mason*yahoo.com""]
result = []

for email in emails:
 email = re.sub('[^A-Za-z0-9@.+-_]', '', email)
 email = email.replace(' ', '')
 if 'gmail' in email:
 email = email.replace('gmail', 'google')
 elif 'yahoo' in email:
 email = email.replace('yahoo', 'ymail')
 result.append(email)

print(result)"
Create a function in Python to extract all words from a sentence that are greater than 3 chars in length.  This is a sample sentence,"def extract_long_words(s):
 words = s.split()
 filtered = [w for w in words if len(w) > 3]
 return filtered"
Create a Python function to remove all the characters of a specified string that appear more than once.  ,"def remove_duplicates(string):
    result = """"
    for char in string:
        if string.count(char) == 1:
            result += char
    return result"
"Create an optimized sorting alogirthm in Python.  unsorted_list = [5, 2, 3, 1, 4]","def optimized_sort(unsorted_list):
    length = len(unsorted_list)
    for i in range(length):
        min_index = i
        for j in range(i+1, length):
            if unsorted_list[j] < unsorted_list[min_index]: 
                min_index = j
                
        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] 
    
    return unsorted_list

sorted_list = optimized_sort(unsorted_list)
print(sorted_list)"
Create a Python program to compute the primes between 1 and n  n = 15,"import math
 
def primes(n):
    if n < 2:
        return []
    
    size = int(math.sqrt(n)) + 1
    sieve = bytearray([True]) * size
    for i in range(2, size):
        if sieve[i]:
            for j in range(i*i, size, i):
                sieve[j] = False
  
    primes = [i for i in range(2, size) if sieve[i]]
    return [p for p in primes if p <= n]
 
if __name__ == '__main__':
    n = 15
    print(primes(n))

# Output: [2, 3, 5, 7, 11, 13]"
"Create a function in Python that takes a string, removes all non-alphanumeric characters, and prints the result to console.  Not applicable","def clean_string(s):
 clean_s = ''.join(c for c in s if c.isalnum())
 print(clean_s)"
Develop an algorithm in Python to generate a Fibonacci series up to the nth value.  n = 10,"# Program to generate a Fibonacci series using an algorithm

# function to generate Fibonacci series
def generate_fibonacci_series(n):
    a, b = 0, 1 
    result = [] 
    while b < n:
        result.append(b)
        a, b = b, a + b 
    return result

# Driver code 
n = 10
result = generate_fibonacci_series(n)
print(""The Fibonacci number up to"", n, ""is"", result)"
"Develop a program to implement a linear search in Python.  [7, -3, 10, 13, -6], -3","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [7, -3, 10, 13, -6]
target = -3
print(""Index of"", target, "" is "", linear_search(arr, target)) # 1"
"Write a Python script that will take an array of numbers and output the distinct elements.  [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]","my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]
new_list = []

for item in my_list:
 if item not in new_list:
 new_list.append(item)

print(new_list)
# Output: [1, 3, 4, 5, 6, 7, 8, 9]"
"Design a function in Python that takes in a list and returns its reverse.  [1, 2, 3, 4]","def reverse_list(list):
    return list[::-1]

result = reverse_list([1,2,3,4])
print(result)"
"Create a class in Python that models a contact with details such as singlename, lastname, email, address, and phone number.  ","class Contact:
    def __init__(self, single_name, last_name, email, address, phone_number):
        """"""
        This is the constructor for the contact class.
        """"""
        self.single_name = single_name
        self.last_name = last_name
        self.email = email
        self.address = address
        self.phone_number = phone_number

    def get_full_name(self):
        """"""
        This method returns the full name of the contact.
        """"""
        return self.last_name + "", "" + self.single_name

    def get_email(self):
        """"""
        This method returns the email of the contact.
        """"""
        return self.email

    def get_address(self):
        """"""
       This method returns the address of the contact.
        """"""
        return self.address

    def get_phone_number(self):
        """"""
        This method returns the phone number of the contact.
        """"""
        return self.phone_number"
Implement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.  10,"def fibonacci(n):
    arr = [0, 1]
    for i in range(2, n+1):
        arr.append(arr[i-2] + arr[i-1])
    return arr[:n+1]

print(fibonacci(10))"
"Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.  Not applicable","class Node:
  def __init__(self, data):
   self.data = data
   self.next = None

  def add(self, new_node):
   self.next = new_node"
Create a Python script to generate a n by n multiplication table.  3,"# Function to generate multiplication table  
def multiplication_table(n): 
    # set the initial value and iters
    num = 1
    iters = n + 1
      
    # outer loop
    for i in range(1, iters): 
          
        # inner loop 
        for j in range(1, iters): 
              
            # print statement 
            print(num, end = "" "") 
              
            num = num + 1
        print()
  
# Driver code
n = 3
multiplication_table(n)"
"Create a web crawler in Python to automatically scrape data from a given web page.  url = ""http://www.example.com""","import requests
from bs4 import BeautifulSoup

# URL to be scraped
url = ""http://www.example.com""

# Make a GET request to fetch the raw HTML content
html_content = requests.get(url).text

# Parse the html content
soup = BeautifulSoup(html_content, ""lxml"")

# Scrape data from the HTML using beautiful soup
data = soup.find_all('p')

# Print the scraped data
for item in data:
 print(item.text)"
"Write a code snippet in Python to print out the contents of a given dictionary.  {""apple"": 1, ""banana"": 2, ""carrot"": 3}","dictionary = {""apple"": 1, ""banana"": 2, ""carrot"": 3}

for item in dictionary:
  print(""{}: {}"".format(item, dictionary[item]))"
"This code defines an abstract class called `Domain` that represents an abstract domain. The class has various attributes and methods, including `from_expr`, `to_expr`, `convert_from`, `convert`, `unify`, `poly_ring`, and `frac_field`. To use this class, create a subclass and implement the abstract methods `from_expr` and `to_expr`. You can also use the `convert` method to convert elements to the domain, and the `unify` method to construct a minimal domain that contains elements of two given domains. The `poly_ring` and `frac_field` methods can be used to create polynomial rings and fraction fields, respectively.  ","""""""Implementation of :class:`Domain` class.""""""

import abc
import inspect

from ..core import Expr
from ..core.compatibility import HAS_GMPY
from ..polys.orderings import lex
from ..polys.polyerrors import CoercionFailed, UnificationFailed
from ..polys.polyutils import _unify_gens
from ..printing.defaults import DefaultPrinting
from .domainelement import DomainElement


class Domain(DefaultPrinting, abc.ABC):
    """"""Represents an abstract domain.""""""

    is_Ring = False
    is_Field = False

    has_assoc_Ring = False

    is_FiniteField = False
    is_IntegerRing = False
    is_RationalField = False
    is_RealField = False
    is_ComplexField = False
    is_AlgebraicField = False
    is_RealAlgebraicField = False
    is_ComplexAlgebraicField = False
    is_PolynomialRing = False
    is_FractionField = False
    is_ExpressionDomain = False

    is_Exact = True
    is_Numerical = False

    def __hash__(self):
        return hash((self.__class__.__name__, self.dtype))

    def __call__(self, *args):
        """"""Construct an element of ``self`` domain from ``args``.""""""
        return self.dtype(*args)

    def __getstate__(self):
        return {}

    @abc.abstractmethod
    def from_expr(self, expr):
        """"""Convert Diofant's expression ``expr`` to ``dtype``.""""""
        raise NotImplementedError

    @abc.abstractmethod
    def to_expr(self, element):
        """"""Convert domain ``element`` to Diofant expression.""""""
        raise NotImplementedError

    def convert_from(self, element, base):
        """"""Convert ``element`` to ``self.dtype`` given the base domain.""""""
        for superclass in inspect.getmro(base.__class__):
            method = '_from_' + superclass.__name__

            convert = getattr(self, method, None)

            if convert:
                result = convert(element, base)

                if result is not None:
                    return result

        raise CoercionFailed(f""can't convert {element} of type {type(element)} ""
                             f'from {base} to {self}')

    def convert(self, element, base=None):
        """"""Convert ``element`` to ``self.dtype``.""""""
        if base is not None:
            return self.convert_from(element, base)

        if isinstance(element, self.dtype):
            return element

        from . import ComplexField, PythonRational, RealField
        from .expressiondomain import ExpressionDomain
        from .integerring import GMPYIntegerRing, PythonIntegerRing
        from .rationalfield import GMPYRationalField, PythonRationalField

        if isinstance(element, int):
            return self.convert_from(element, PythonIntegerRing())

        if isinstance(element, PythonRational):
            return self.convert_from(element, PythonRationalField())

        if HAS_GMPY:
            integers = GMPYIntegerRing()
            if isinstance(element, integers.dtype):
                return self.convert_from(element, integers)

            rationals = GMPYRationalField()
            if isinstance(element, rationals.dtype):
                return self.convert_from(element, rationals)

        if isinstance(element, float):
            parent = RealField(tol=False)
            return self.convert_from(parent(element), parent)

        if isinstance(element, complex):
            parent = ComplexField(tol=False)
            return self.convert_from(parent(element), parent)

        if isinstance(element, DomainElement):
            return self.convert_from(element, element.parent)

        if isinstance(element, ExpressionDomain.Expression):
            return self.convert_from(element, ExpressionDomain())

        if isinstance(element, Expr):
            try:
                return self.from_expr(element)
            except (TypeError, ValueError):
                pass

        raise CoercionFailed(f""can't convert {element} of type {type(element)} to {self}"")

    def __contains__(self, a):
        """"""Check if ``a`` belongs to this domain.""""""
        try:
            self.convert(a)
            return True
        except CoercionFailed:
            return False

    def _from_PolynomialRing(self, a, K0):
        if a.is_ground:
            return self.convert(a.LC, K0.domain)

    def _from_FractionField(self, a, K0):
        if a.numerator.is_ground and a.denominator == 1:
            return self.convert(a.numerator.LC, K0.domain.ring)

    def unify(self, K1, symbols=()):
        """"""
        Construct a minimal domain that contains elements of ``self`` and ``K1``.

        Known domains (from smallest to largest):

        - ``GF(p)``
        - ``ZZ``
        - ``QQ``
        - ``RR(prec, tol)``
        - ``CC(prec, tol)``
        - ``ALG(a, b, c)``
        - ``K[x, y, z]``
        - ``K(x, y, z)``
        - ``EX``
        """"""
        from .compositedomain import CompositeDomain

        if symbols:
            if any(isinstance(d, CompositeDomain) and (set(d.symbols) & set(symbols))
                   for d in [self, K1]):
                raise UnificationFailed(f""Can't unify {self} with {K1}, ""
                                        f'given {symbols} generators')

            return self.unify(K1)

        if self == K1:
            return self

        if self.is_ExpressionDomain:
            return self
        if K1.is_ExpressionDomain:
            return K1

        if any(isinstance(d, CompositeDomain) for d in (self, K1)):
            if isinstance(self, CompositeDomain):
                self_ground = self.domain
                self_symbols = self.symbols
                order = self.order
            else:
                self_ground = self
                self_symbols = ()
                order = K1.order

            if isinstance(K1, CompositeDomain):
                K1_ground = K1.domain
                K1_symbols = K1.symbols
            else:
                K1_ground = K1
                K1_symbols = ()

            domain = self_ground.unify(K1_ground)
            symbols = _unify_gens(self_symbols, K1_symbols)

            if ((self.is_FractionField and K1.is_PolynomialRing or
                 K1.is_FractionField and self.is_PolynomialRing) and
                    (not self_ground.is_Field or not K1_ground.is_Field) and domain.has_assoc_Ring):
                domain = domain.ring

            if isinstance(self, CompositeDomain) and (not isinstance(K1, CompositeDomain) or self.is_FractionField or K1.is_PolynomialRing):
                cls = self.__class__
            else:
                cls = K1.__class__

            return cls(domain, symbols, order)

        def mkinexact(cls, K0, K1):
            prec = max(K0.precision, K1.precision)
            tol = max(K0.tolerance, K1.tolerance)
            return cls(prec=prec, tol=tol)

        if self.is_ComplexField and K1.is_ComplexField:
            return mkinexact(self.__class__, self, K1)
        if self.is_ComplexField and K1.is_RealField:
            return mkinexact(self.__class__, self, K1)
        if self.is_RealField and K1.is_ComplexField:
            return mkinexact(K1.__class__, K1, self)
        if self.is_RealField and K1.is_RealField:
            return mkinexact(self.__class__, self, K1)
        if self.is_ComplexField or self.is_RealField:
            return self
        if K1.is_ComplexField or K1.is_RealField:
            return K1

        if self.is_AlgebraicField and K1.is_AlgebraicField:
            return self.__class__(self.domain.unify(K1.domain), *_unify_gens(self.gens, K1.gens))
        elif self.is_AlgebraicField:
            return self
        elif K1.is_AlgebraicField:
            return K1

        if self.is_RationalField:
            return self
        if K1.is_RationalField:
            return K1

        if self.is_FiniteField and self.domain == K1:
            return self
        if K1.is_FiniteField and K1.domain == self:
            return K1

        raise NotImplementedError

    def __eq__(self, other):
        """"""Returns ``True`` if two domains are equivalent.""""""
        return isinstance(other, Domain) and self.dtype == other.dtype

    def get_exact(self):
        return self

    def poly_ring(self, *symbols, **kwargs):
        """"""Returns a polynomial ring, i.e. `K[X]`.""""""
        from ..polys import PolynomialRing
        return PolynomialRing(self, symbols, kwargs.get('order', lex))

    def frac_field(self, *symbols, **kwargs):
        """"""Returns a fraction field, i.e. `K(X)`.""""""
        from ..polys import FractionField
        return FractionField(self, symbols, kwargs.get('order', lex))
"
"Given a set of data, develop a Python program to classify the data into two categories: low and high.  [8, 5, 9, 1, 3, 10]","# Define the threshold
threshold = 5

def classify(data):
  result = []
  for item in data:
    if item <= threshold:
      result.append('low')
    else:
      result.append('high')
  return result

print(classify([8, 5, 9, 1, 3, 10]))
# Output: ['high', 'low', 'high', 'low', 'low', 'high']"
"Create an HTML page that displays a table containing a list of books with their ISBN and title.  [{""ISBN"": ""978-0134813071"", ""title"": ""Python Programming"" }, 
{""ISBN"": ""978-1590595377"", ""title"": ""Advanced Python"" },
 {""ISBN"": ""978-0302005945"", ""title"": ""PHP Programming"" }]","<html>
<head>
  <title>Book List</title>
</head>
<body>
  <h1>Book List</h1>
  <table>
    <thead>
      <tr>
        <th>ISBN</th>
        <th>Title</th>
      </tr>
      <tbody>
        <tr>
          <td>978-0134813071</td>
          <td>Python Programming</td>
        </tr>
        <tr>
          <td>978-1590595377</td>
          <td>Advanced Python</td>
        </tr>
        <tr>
          <td>978-0302005945</td>
          <td>PHP Programming</td>
        </tr>
    </thead>
    <tbody>
  </table>
</body>
</html>"
"Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.  [12, 23, 45, 22, 50]","# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
numbers.sort()

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)"
"Write a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree.  Not applicable","class Node:
 def __init__(self, val):
 self.val = val
 self.left = None
 self.right = None
 
class BinarySearchTree:
 def __init__(self):
 self.root = None
 
 def insert(self, val):
 newNode = Node(val)
 if self.root == None:
 self.root = newNode
 else:
 curr = self.root
 while curr:
 if val < curr.val:
 if curr.left == None:
 curr.left = newNode
 break
 else:
 curr = curr.left
 else:
 if curr.right == None:
 curr.right = newNode
 break
 else:
 curr = curr.right
 
 def delete(self, val):
 curr = self.root
 parent = None
 isLeftChild = True
 
 while curr.val != val:
 parent = curr
 if val < curr.val:
 curr = curr.left
 isLeftChild = True
 else:
 curr = curr.right
 isLeftChild = False
 
 if curr == None:
 return
 
 # if node has no children
 if curr.left == None and curr.right == None:
 if isLeftChild:
 parent.left = None
 else:
 parent.right = None
 
 # if node has one child
 elif curr.left == None:
 if isLeftChild:
 parent.left = curr.right
 else:
 parent.right = curr.right
 
elif curr.right == None:
 if isLeftChild:
 parent.left = curr.left
 else:
 parent.right = curr.left
 
 # if node has two children
 else:
 succParent = curr
 succ = curr.right
 
 while succ.left != None:
 succParent = succ
 succ = succ.left
 
 # if successor is a direct right child
 if succParent == curr:
 succParent.right = succ.right
 else:
 succParent.left = succ.right
 
 curr.val = succ.val
 
 def traverse(self):
 if self.root is None:
 return
 curr = self.root
 self.traverseInOrder(curr)
 
 def traverseInOrder(self, curr):
 if curr.left != None:
 self.traverseInOrder(curr.left)
 print(curr.val)
 if curr.right != None:
 self.traverseInOrder(curr.right)"
"Create a Python program for sorting a list of numbers in increasing order.  [3, 1, 8, 5, 7]","def sort_list(list):
 for _ in range(len(list)):
 for j in range(len(list)-1):
 if list[j] > list[j+1]:
 list[j], list[j+1] = list[j+1], list[j]
 return list

# Testing the function
example_list = [3, 1, 8, 5, 7]
sorted_list = sort_list(example_list)

print(sorted_list)
# Output: [1, 3, 5, 7, 8]"
Write a function to create a JSON object from a given Python list.  ,"import json

def list_to_json(data):
    return json.dumps(data)"
"Create a Python script to generate a password that meets the following criteria: length of 8 characters, includes at least one uppercase, one lowercase and one numeric character.  ","import string
import random

def generate_password():
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase 
    digits = string.digits

    characters = lowercase + uppercase + digits
    password = ''.join(random.sample(characters,8))
    return password

print(generate_password())"
"Determine the performance of a given Python function by seeing how long it takes to run.  def count_words(text):
    words = text.split(' ')
    return len(words)","import time

def count_words(text):
    start_time = time.time()
    words = text.split(' ')
    result = len(words)
    end_time = time.time()
    duration = end_time - start_time
    return result, duration

if __name__ == '__main__':
    text = 'This sentence has five words'
    result, duration = count_words(text)
    print(f'The result is {result} and it took {duration} seconds!')"
"Write a Python program to filter a list of words by their length.  word_list = [""apple"", ""banana"", ""pear"", ""grape"", ""mango""]","def filter_by_length(word_list, length):
    filtered_list = []
    for word in word_list:
        if len(word) == length:
            filtered_list.append(word)
    return filtered_list

result = filter_by_length(word_list, 5)
print(result)"
Create a Python program to parse a sentence and identify all named entities mentioned in the sentence.  The founder of Apple Steve Jobs passed away.,"import nltk
from nltk import word_tokenize

sentence = ""The founder of Apple Steve Jobs passed away.""

tokenized_text = word_tokenize(sentence)

tagged = nltk.pos_tag(tokenized_text)

namedEnt = nltk.ne_chunk(tagged, binary=False)

for ne in namedEnt:
 if type(ne) == nltk.tree.Tree:  
    entity_name = ' '.join(c[0] for c in ne.leaves())
    print(entity_name)"
"Write a Python program that can detect the language of a given piece of text.  The text is: ""Bonjour tout le monde""","import detect_language

text = ""Bonjour tout le monde""
language = detect_language.detect(text)
print(language) # fr"
Write a blank Python program to convert celsius to fahrenheit.  ,"def celsius_to_fahrenheit(celsius):
    """"""
    This function converts the given celsius value to its corresponding fahrenheit value
    """"""
    fahrenheit = (celsius * (9/5)) + 32
    return fahrenheit"
"Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request.  <html>
<body>
<h1>Hello, World!</h1>
</body>
</html>","import http.server
from http.server import SimpleHTTPRequestHandler

class MyHandler(SimpleHTTPRequestHandler):
  def do_GET(self):
    self.send_response(200)
    self.send_header('Content-type', 'text/html')
    self.end_headers()

    html = b""""""
        <html>
        <body>
        <h1>Hello, World!</h1>
        </body>
        </html>
    """"""

    self.wfile.write(html)
 
server = http.server.HTTPServer(('', 8080), MyHandler)
server.serve_forever()"
Generate a code to send an email using Python.  ,"import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart 

subject = ""Your Subject""
body = ""Your message here""
sender = ""from@fromdomain.com""
receivers = [""to@todomain.com""]

msg = MIMEMultipart()
msg['from'] = sender
msg['To'] = "", "".join(receivers)
msg['Subject'] = subject

msg.attach(MIMEText(body, 'plain'))

server = smtplib.SMTP('smtp.gmail.com', 587)
server.starttls()
server.login(""username"", ""password"")
text = msg.as_string()
server.sendmail(sender, receivers, text)
server.quit()"
"Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input.  [1, 2, 3, 4, 4, 5, 5]","def distinct_numbers(arr):
 return list(set(arr))"
Design a data structure in Python that implements a Stack.  Not applicable,"class Stack: 
 def __init__(self): 
 self.items = [] 

 def push(self, item): 
 self.items.append(item) 

 def pop(self):
 if not self.is_empty(): 
 return self.items.pop()

 def is_empty(self):
 return len(self.items) == 0

 def peek(self):
 if not self.is_empty(): 
 return self.items[-1]

 def size(self):
 return len(self.items)"
Create a unit test for an existing Python function. The function should take a single argument and return the square of the argument.  Not Applicable,"import unittest

def square(x):
   return x * x

class TestSquareFunction(unittest.TestCase):
   def test_square(self):
       self.assertEqual(square(3), 9)
       self.assertEqual(square(5), 25)
       self.assertEqual(square(7), 49)

if __name__ == '__main__':
     unittest.main()"
Create a python program to reverse a string passed as input.  Hello World!,"def reverse_string(stringToReverse):
    reversedString = """"
    for i in reversed(stringToReverse):
        reversedString += i
    return reversedString
    
stringToReverse = input(""Enter string to reverse: "")
result = reverse_string(stringToReverse)
print(result)"
"Create a class in Python to represent a Person which contains attributes like name, age, height and address.  ","class Person:
    def __init__(self, name, age, height, address):
        self.name = name
        self.age = age
        self.height = height
        self.address = address
    
    def describe(self):
        print('Name:', self.name)
        print('Age:', self.age)
        print('Height:', self.height)
        print('Address:', self.address)"
"Create a function in Python that takes a string as input and prints out a list of all the words containing at least five letters.  ""The quick brown fox jumps over the lazy dog""","def five_letter_words(string):
    words = string.split()
    output_list = []
    for word in words:
        if len(word) >= 5:
            output_list.append(word)
    print(output_list)

five_letter_words(""The quick brown fox jumps over the lazy dog"")
# Output [""quick"", ""brown"", ""jumps"", ""over"", ""lazy""]"
"Write a Python program for finding the longest subarray with a given sum.  arr: [1, 2, 3, 4, 5], sum: 9","def longest_subarray_with_sum(arr, given_sum):
  max_len = 0
  curr_sum = 0
  start_index = 0
  n = len(arr)
  for end_index in range(n):
    curr_sum += arr[end_index]
    while curr_sum > given_sum:
      curr_sum -= arr[start_index]
      start_index += 1
    if curr_sum == given_sum and (end_index-start_index+1) > max_len:
      max_len = end_index-start_index+1
  return max_len

arr = [1, 2, 3, 4, 5]
given_sum = 9
print(longest_subarray_with_sum(arr, given_sum))"
Write a Python class that will generate an output in JSON format from a provided input.  ,"class JSONGenerator:
    def __init__(self, input):
        self.input = input
 
    def generate(self):
        return json.dumps(self.input)"
"Write a Python program to calculate the hypotenuse of a right-angled triangle.  a = 5, b = 12","import math

# calculate the hypotenuse
def calc_hypotenuse(a, b):
    hyp = math.sqrt(a**2 + b**2)
    print(""The length of the hypotenuse is"", hyp)

# input lengths of triangle sides
a = 5
b = 12

# call the function
calc_hypotenuse(a, b)"
Generate random numbers between 1 and 2 using the random module in Python.  ,"import random

random_number = random.uniform(1, 2)
print(random_number)"
"Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?  “Python”, “Programming”","def new_string(s1, s2):
    new_str = """"
    for char in s2:
        if char not in s1:
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig"""
"Generate a Python function to validate a credit card billing address.  Credit card billing address example

Ann Smith
1234 Main St.
Anytown, CA 99999","def validate_billing_address(address):
    # Split address into individual elements
    street, city_state_zip = address.split(""\n"")

    # Check street element
    if not street:
        return False
    
    # Check city_state_zip element
    elements = city_state_zip.split("","")
    if len(elements) != 2:
        return False
    city, state_zip = elements
    state, zip = state_zip.split("" "")
    if len(zip) != 5 or not zip.isdigit():
        return False
    
    return True"
Create a RESTful web service in Python which can add and subtract two numbers and return the result.  Not applicable,"from flask import Flask, request

app = Flask(__name__)

@app.route(""/"", methods=['GET', 'POST'])
def math():
 if request.method == 'POST':
  num1 = int(request.form.get('num1'))
  num2 = int(request.form.get('num2'))
  operation = request.form.get('operation')

  if operation == 'add':
   result = num1 + num2
  elif operation == 'subtract':
   result = num1 - num2

  return {'result': result}

if __name__ == '__main__':
 app.run(debug=True)"
"Design a Python script for merging two sorted lists.  list1 = [1, 5, 9]
list2 = [2, 6, 8]","def merge_lists(list1, list2):
 merged_list = []

 # Iterate over both the lists 
 # and compare their elements 
 while len(list1) > 0 and len(list2) > 0:
  if list1[0] < list2[0]:
   merged_list.append(list1.pop(0))
  else:
   merged_list.append(list2.pop(0))

# Check to see if any elements remain in one of the lists
# and add them to the end of the merged list
 merged_list += list1
 merged_list += list2

 return merged_list

list1 = [1, 5, 9]
list2 = [2, 6, 8]

merged_list = merge_lists(list1, list2)
print(merged_list) # prints [1, 2, 5, 6, 8, 9]"
"Create a Python program to loop through a given list and print each item on a new line.  my_list = [""apples"", ""oranges"", ""bananas""]","for item in my_list:
    print(item)"
"Implement a Genetic Algorithm in Python to find the maximum possible fitness score given a set of parameters.  Number of paramters = 3 
Range of values for each parameter = [0, 1] 
Fitness function = x1 * x2 + x3","import numpy as np

def fitness_function(X):
 return X[0] * X[1] + X[2]

def generate_genes(n, lower, upper):
 return np.random.uniform(lower, upper, n)

def GA(genes, fitness, lower, upper, mutation_rate, max_iterations):
 max_fitness = -float('inf')
 max_genes = None
 n = len(genes)
 for iteration in range(max_iterations):
 if max_fitness >= fitness_function(genes):
 break
 # Generate new population
 parent_generation = []
 for _ in range(int(n/2)):
 parent_generation.append((genes, fitness_function(genes)))
 parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents 
 # Select the best
 elite_genes, elite_fitness = parent_generation[0]
 # Crossover
 child_generation = []
 for _ in range(int(n/2)):  # Breed new population
 parent_1 = np.random.choice(parent_generation)
 parent_2 = np.random.choice(parent_generation)
 child_1, child_2 = crossover(parent_1, parent_2, n)
 child_generation.append(child_1)
 child_generation.append(child_2)
 # Mutate
 mutants = []
 for child in child_generation:
 if np.random.uniform(0, 1) < mutation_rate:
 mutants.append(mutation(child, lower, upper))
 else:
 mutants.append(child)
 # Update 
 for gene in mutants:
 genes = gene
 fitness = fitness_function(genes)
 if fitness > max_fitness:
 max_fitness = fitness
 max_genes = gene
 return max_fitness, max_genes

def crossover(parent_1, parent_2, n):
 n_split = np.random.randint(1, n)  # Split 
 child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])
 child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])
 return child_1, child_2

def mutation(gene, lower, upper):
 for i, gene_value in enumerate(gene):
 if np.random.uniform(0, 1) < mutation_rate:
 gene[i] = np.random.uniform(lower, upper)
 return gene

# Run GA
n = 3
lower = 0
upper = 1
genes = generate_genes(n, lower, upper)
mutation_rate = 0.1
max_iterations = 1000
max_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)

# Print results
print(""Maximum fitness score:"", max_fitness)
print(""Parameters:"", max_genes)"
"Write a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table.  A database table with columns item_id, item_name, price
An Excel spreadsheet with the same columns","import pandas as pd
import pyodbc

# Connect to database
server = '<yourserver>'
database = '<yourdatabase>'
username = '<yourusername>'
password = '<yourpassword>'
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
cursor = conn.cursor()

# Read Excel file
df = pd.read_excel('<yourfilename>')

# Insert values into database
for index, row in df.iterrows():
 item_id = row['item_id']
 item_name = row['item_name']
 price = row['price']
 cursor.execute(f""INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})"")
conn.commit()"
"Calculate the correlation between artists using the Last.fm dataset. Intermediate datasets will be saved in an HDF5 file and the final dataset will be saved in a database. The artist correlation matrix will be saved only for the single selected artist, used in the final step for the similarity comparison. Run the provided Python code to execute the calculation.  ","#!/usr/bin/env python

''' Calculate the correlation between the artists. Intermediate datasets are
    saved in the HDF5 file and the final dataset is saved in the database as
    well. The artist correlation matrix is saved only for the single
    selected artist, used in the final step for the similarity comparison.

    #--------------------------------------------------------------------------#
    Copyright (C) 2014, Zlatko Prpa <zprpa.ca@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    #--------------------------------------------------------------------------#
'''

#-- standard libs
import os, sys, sqlite3, time, locale, itertools as it

#-- add-on libs
import numpy, h5py

#-- custom libs
import utils

#==============================================================================#
#--------------------------------- SETUP --------------------------------------#
#==============================================================================#

log  = utils.ZpLog(   'logs/' + os.path.basename(__file__) + '.log')
elog = utils.ZpErrLog('logs/' + os.path.basename(__file__) + '.ERROR-traceback.log')
log.write(''.ljust(150,'*'), skip_line=1, add_line=1)

#-- setup number formatting
locale.setlocale( locale.LC_ALL, """" )
fmt = locale.format

#-- open the HDF5 file for the storage of the intermediate datasets
h5f = h5py.File('data/artist-correlation-datasets.h5','w')
vlen_dtype = h5py.special_dtype(vlen=str)

#==============================================================================#
#------------------------- Load and process data ------------------------------#
#==============================================================================#

#--------------------------------------#
#-- load data and apply basic filter   #
#--------------------------------------#
''' Load the records from the artist/tag table.
    There is no reason to apply any filter to this basic dataset, as opposite
    to the tag correlation procedure. We do not need to generalize any
    specific artist, as we had to do with tag data.
    Otherwise, the whole processing logic is very much the same.
'''
log.write('Load data.')
dbs = sqlite3.connect('data/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)
cur = dbs.cursor()
cur.execute(""SELECT t.artist_name, t.tag, t.count FROM top_artist_tags t"")
recs = numpy.array([r for r in cur],dtype=[('art','O'),('tag','O'),('count','i4')])
cur.close()
dbs.close()
log.write('Loaded %s records.'%fmt('%12d',recs.shape[0],True).strip())

#--------------------------------------#
#-- prepare data for correlation calc  #
#--------------------------------------#

log.write('Prepare data for the correlation calc.')

#-- Get unique list of artists and tags.
unique_art  = numpy.unique( recs['art'] )
unique_tags = numpy.unique( recs['tag'] )

''' Create 2d array to hold the vector for each artist. The vector size is 2x
    the length of the list of the unique tags. First part will have the
    value 0/1, depending if the given artist is associated with the given tag.
    The second part will have the tag ranking (count) value, at the same
    position for the given tag.

    Assuming the following tuples in the basic dataset [recs]:
    (art1,tag1,90), (art1,tag2,80), (art1,tag3,60),
    (art2,tag1,80),                 (art2,tag3,90),
                    (art3,tag2,90), (art3,tag3,80),
    (art4,tag1,50), (art4,tag2,70), (art4,tag3,70)

    The ""unique_art""  list is:  [art1,art2,art3,art4]
    The ""unique_tags"" list is:  [tag1,tag2,tag3]
    offset = 3
    Single artist vector is [0,0,0,0,0,0], with logical mask as
    [tag1,tag2,tag3,rank1,rank2,rank3].

    Based on the above described data, the complete matrix ""tags_mx""
    will have 4 vectors with following values:
    [[1,1,1,90,80,60],
     [1,0,1,80, 0,90],
     [0,1,1, 0,90,80],
     [1,1,1,50,70,70]]

    The sample data (tags for 1000 artists) is very small and this executes
    fast, otherwise this loop would be a strong candidate for parallel
    execution.
'''
offset = unique_tags.shape[0]
art_mx = numpy.zeros((unique_art.shape[0],offset*2),'i4')

for i in xrange(unique_art.shape[0]):
    #-- find indicies for all records in the basic dataset for given artist
    idx = numpy.where( recs['art']==unique_art[i] )[0]
    #-- get all tags and counts for the given artist
    tags   = recs['tag'].take(idx)
    counts = recs['count'].take(idx)
    #-- find the index positions in the tag unique list, for all tag artists
    idx = unique_tags.searchsorted(tags)
    #-- fill in the first part of the artist vector with 1, for each tag found
    numpy.put( art_mx[i], idx, 1 )
    #-- fill in the tag count (rank) in the second part of the artist vector
    numpy.put( art_mx[i], idx+offset, counts )

ds = h5f.create_dataset('unique_art', unique_art.shape, dtype=vlen_dtype)
ds[...] = unique_art
ds = h5f.create_dataset('unique_tags', unique_tags.shape, dtype=vlen_dtype)
ds[...] = unique_tags
ds = h5f.create_dataset('art_mx', art_mx.shape, dtype=art_mx.dtype)
ds[...] = art_mx
h5f.flush()
log.write('Saved following datasets:')
log.write('unique_art:  shape->%s\tdtype->%s'%(unique_art.shape, unique_art.dtype))
log.write('unique_tags: shape->%s\tdtype->%s'%(unique_tags.shape,unique_tags.dtype))
log.write('art_mx:      shape->%s\tdtype->%s'%(art_mx.shape,     art_mx.dtype), add_line=1)

#--------------------------------------#
#-- calculate artist correlation       #
#--------------------------------------#

log.write('Calculate artist correlation.')

''' Calculate correlation for each distinct pair of artist vectors.
    Again, in case of high data volume, this could be executed in parallel
    using the pool of worker processes.
    For the present dataset, the approx size of the artist correlation matrix
    is around 500K recs.
'''
#-- first iterator to get the matrix size
itr  = ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0]))
size = sum(1 for _ in itr)
corr = numpy.empty( size, dtype=[('art1','O'),('art2','O'),('c','f8')] )
#-- full iterator
itr = it.izip(  ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0])),
                (k for k in xrange(size)) )
t = time.time()
for (x,y),z in itr:
    c = numpy.corrcoef( art_mx[x], art_mx[y] )[0,1]
    corr[z] = (unique_art[x], unique_art[y], c)
    #-- update progres every 10K recs
    if z%10000==0:
        log.write_timing1( z, size, t, time.time(), out_type='TTY')

''' Because the full dataset is somewhat big, save only the sample used later
    in the ""similar artist"" comparison.
    Comment out if you want to re-run and get all records.
'''
log.write('Full artist correlation matrix: [corr] shape->%s\tdtype->%s'%(corr.shape,corr.dtype))
sample_artist = 'Cyndi Lauper'
i = numpy.where( (corr['art1']==sample_artist)|(corr['art2']==sample_artist) )[0]
corr = corr.take(i)
log.write('Sample artist correlation matrix: [corr] shape->%s\tdtype->%s'%(corr.shape,corr.dtype))

ds = h5f.create_dataset('corr', corr.shape, dtype=[('art1',vlen_dtype),('art2',vlen_dtype),('c','f8')])
ds[...] = corr
h5f.close()
log.write('Saved sample artist correlation matrix: [corr] shape->%s\tdtype->%s'%(corr.shape,corr.dtype),add_line=1)

#-- save the records in the database as well
dbs = sqlite3.connect('data/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)
cur = dbs.cursor()
cur.execute(""DELETE FROM artist_correlation"")
cur.executemany(""INSERT INTO artist_correlation VALUES (?,?,?)"",(r for r in corr))
log.write('Loaded %s records in the database.'%fmt('%6d',cur.rowcount,True))
dbs.commit()
cur.close()
dbs.close()

log.write(''.ljust(150,'*'), add_line=1)
log.close()

#==============================================================================#
#------------------------------------------------------------------------------#
#==============================================================================#
"
"Create a Python dictionary structure that stores a warning message for each item in the following list.  ['apple', 'orange', 'banana']","{
 'apple': 'This apple is not fresh.',
 'orange': 'This orange has gone bad.',
 'banana': 'This banana is too ripe.'
}"
"Create a python program to find the maximum value of an array using divide and conquer technique.  arr = [1, 4, 9, 2, 6]","def find_max_Using_Divide_and_Conquer(arr):
    # Base case 
    if len(arr) == 1: 
        return arr[0] 
    if len(arr) == 2: 
        return max(arr[0], arr[1]) 
  
    # Recursive case 
    mid = len(arr)//2 
    max_left_sublist = find_max_Using_Divide_and_Conquer(arr[:mid]) 
    max_right_sublist = find_max_Using_Divide_and_Conquer(arr[mid:]) 
  
    return max(max_left_sublist, max_right_sublist)"
"Develop an algorithm for calculating the sum of two numbers, in Python.  2, 20","def add_numbers(a, b):
    return a + b

print(""The sum of 2 and 20 is: "", add_numbers(2, 20))"
Design a function to tell if a number is even or odd using Python.  x = 5,"def isEven(x):
    if x % 2 == 0:
        return True
    else:
        return False

x = 5

if isEven(x):
    print(""It is even"")
else:
    print(""It is odd"")"
Compose a Python Code to swap two numbers without using a temporary variable.  ,"# Input two numbers
a = 10
b = 5

# Swapping using bitwise operator
a = a ^ b 
b = a ^ b 
a = a ^ b 

# Printing output
print(""a ="", a) 
print(""b ="", b)"
Construct a recursive Python program that computes the factorial of an integer.  ,"def factorial(n): 
    if n == 0: 
        return 1 
    else: 
        return n * factorial(n-1)"
"Write a Python program to differentiate the following equation:
y = 5*x^2 + 3*x + 1  Not applicable","def differentiate(x):
  return 10*x + 3;

# Test
x = 2 
print(""The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:"", differentiate(x)) # Output: 17"
Develop a basic cloud-based application using Google App Engine.  Not applicable,"# main.py
# The Google App Engine entry point with requests and responses

from google.appengine.ext import ndb
from flask import Flask

# Define the Flask application
app = Flask(__name__)

@app.route('/api/v1/ persons/<id>', methods=['GET'])
def get_person_by_id(id):
    person = ndb.Key(""Person"", id).get()
    if person is not None:
        data = person.to_dict()
        return json.dumps(data)
    else:
        # Return an error code if person with the provided ID was not found
        return '{""error"": ""Person not found""}'

if __name__ == '__main__':
    # This is used when running locally only. When deploying to Google App
    # Engine, a webserver process such as Gunicorn will serve the app.
    app.run(host='127.0.0.1', port=8080, debug=True)

# app.yaml

# [START gae_python_app]
runtime: python27
api_version: 1
threadsafe: true

# app.yaml
env_variables:
  # Replace the placeholder below with your GCP project ID and make sure
  # the variable is named `GCP_PROJECT`
  GCP_PROJECT: <YOUR_PROJECT_ID>

# app.yaml
handlers:
- url: /.*
  script: main.app

# [END gae_python_app]"
Create a Python function for computing the Fibonacci sequence up to the nth number.  Number n: 10,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

print(fibonacci(10)) # outputs 55"
"Write a Python program that takes a list of numbers and creates a new list of even numbers only.  lst = [2, 3, 5, 6, 7, 8, 10, 11]","def get_even_numbers(lst):
    even_lst = []
    for num in lst:
        if num % 2 == 0:
            even_lst.append(num)
    return even_lst"
"In Python, debug the following program and explain what was the issue?  def greet(name):
    if name == ""John"":
        msg = ""Hello, John""
    else:
        msg = ""Name not found""

print(greet(""John""))","The issue with the program is that it is not printing the message stored in the ""msg"" variable. To fix this, the program can be modified as follows:

def greet(name):
    if name == ""John"":
        msg = ""Hello, John""
    else:
        msg = ""Name not found""
    print(msg)

greet(""John"")"
"Suggest a method to improve the efficiency of the following Python program.  s = 'abcdefghijklmnopqrstuvwxyz'

def func(s):
    s_list = []
    for c in s:
        if c not in s_list:
            s_list.append(c)
    
    return s_list","s = 'abcdefghijklmnopqrstuvwxyz'

def func(s):
    s_list = set()
    for c in s:
        s_list.add(c)
    
    return list(s_list)"
Can you create a program in Python which reverses a number?  Number = 12345,"# Using Python

def reverseNumber(number):
    reversed = 0
    while(number > 0):
        digit = number%10
        reversed = reversed*10 + digit
        number = number//10
    
    return reversed

number = 12345
reverse = reverseNumber(number)
print(reverse) 
# Output: 54321"
"Create a function in Python that takes two numbers as arguments and returns their average.  2, 3","def average(a, b): 
    return (a + b) / 2

print(average(2, 3))"
"In Python, create a method to generate a random string.  ","import random
import string

def generateRandomString(length):
    chars = string.ascii_letters + string.digits
    randStr = """".join(random.choice(chars) for i in range(length))
    return randStr

print(generateRandomString(8))"
Design an algorithm in Python to simulate a game of rock paper scissors.  ,"# We define the possible winning combination of the game
WINNING_COMBINATION = {
  ""rock"": ""scissors"",
  ""paper"": ""rock"",
  ""scissors"": ""paper""
}

def playRockPaperScissors():
  # Player 1's turn
  player1_choice = input(""Player 1: Choose rock, paper or scissors: "")
  # Player 2's turn
  player2_choice = input(""Player 2: Choose rock, paper or scissors: "")

  # Find the winner
  if WINNING_COMBINATION[player1_choice] == player2_choice:
    print(""Player 1 has won."")
  elif WINNING_COMBINATION[player2_choice] == player1_choice:
    print(""Player 2 has won."")
  else:
    print(""It's a tie!"")

playRockPaperScissors()"
"Generate a Python script for a query to fetch data from a given MySQL table.  Table Name: Products
Columns: product_id, name, price","import mysql.connector

db = mysql.connector.connect(
 host=""localhost"",
 user=""root"",
 passwd=""password"",
 database=""dbname""
)

mycursor = db.cursor()

sql = ""SELECT product_id, name, price FROM Products""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for row in myresult:
  print(row)"
Create a Python script to send an email.  ,"import smtplib

# Set up the SMTP server
s = smtplib.SMTP(host='your_host_address_here', port=your_port_here)
s.starttls()
s.login(""your_username_here"", ""your_password_here"")

# Send the mail
message = ""A message""
s.sendmail(""from@example.com"", ""to@example.com"", message)

# Terminate the SMTP session and close the connection
s.quit()"
"Create an algorithm in Python to make a prediction given a list of features.  features = ['feature1', 'feature2', 'feature3']","def predict(features):
    # Use the features to make a prediction
    prediction = 0
    
    # Iterate through each feature to calculate the prediction
    for feature in features:
        prediction += calculate_feature(feature)
    
    return prediction

def calculate_feature(feature):
    # Use a suitable algorithm to calculate the prediction
    # Value of the feature
    return value"
"Rewrite the code from this Python2 code to be compatible with Python3 code.  #This code prints the numbers from 0 to 5.
for i in range(6):
    print i","#This code prints the numbers from 0 to 5.
for i in range(6):
    print(i)"
Create a class in Python that represents a vector in a 3-dimensional space.  ,"class Vec3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return ""({}, {}, {})"".format(self.x, self.y, self.z)"
"Using Python, create a program to filter out all non-prime numbers from a list.  myList = [2, 4, 5, 20, 44]","def filterPrimes(myList):
    result = []
    for i in myList:
        is_prime = True
        for j in range(2,i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            result.append(i)
    return result

print(filterPrimes(myList)) #[2, 5]"
"Create a python program to calculate the compound interest for a given principal amount and a given interest rate.  Principal amount = 1000
Interest rate = 9%","# Python program to calculate the compound interest  
  
def compound_interest(principal, rate, time): 
  
    # Calculates compound interest  
    CI = principal * (pow((1 + rate / 100), time)) 
    print(""Compound interest is"", CI) 
  
# Driver Code  
compound_interest(1000, 9, 2)"
"Write a Python script to generate all possible permutations of a set of input strings.  ['a', 'b', 'c']","def permute(input):
 res = []
 for i in range(len(input)):
 for result in permute(input[:i] + input[i + 1:]):
 res.append([input[i]] + result)    
 return res

inputValues = ['a', 'b', 'c']
permutations = permute(inputValues)

for perm in permutations:
 print(perm)"
"Generate a python code that adds a delimiter string between every list item.  [""apple"", ""orange"", ""mango""]","def join_list_items(my_list, delimiter):
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango"
Optimize a given Python script by running in parallel.  ,"import concurrent.futures

def thread_function(script):
  // Code to run the given script in parallel

with concurrent.futures.ThreadPoolExecutor() as executor:
  executor.map(thread_function, scripts)"
Create a Python function that converts an integer into a binary representation as a string.  13,"def to_binary(num):
  result = """"
  while num > 0:
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'"
Write an example of a class definition in Python.  ,"class Employee:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def set_age(self, age):
        self.age = age"
"Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.  [25, 15, 20]","def find_GCD(input_list): 
 gcd = input_list[0] 
 for num in input_list[1:]: 
 gcd = find_GCD(gcd, num) 
 return gcd

def find_GCD(a, b):
 while(b != 0): 
 a, b = b, a%b 
 return a"
"Design a Python program to find out the number of unique keywords used in documents.  A list of documents: 

['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']","documents = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']

# Get the words from the documents
words = []
for doc in documents:
 words += doc.split()

# Get the unique words
unique_words = set(words)

# Print the number of unique words
print(f'The number of unique words is {len(unique_words)}')"
Design and implement an API in Python for an online store application.  ,"from flask import Flask, jsonify, request
 
app = Flask(__name__)

@app.route('/products', methods=['GET'])
def get_all_products():
    # query database
    products = []
    # format result
    return jsonify(products)

@app.route('/products/<int:product_id>', methods=['GET'])
def get_product(product_id):
    # query database
    product = {}
    # format result
    return jsonify(product)

@app.route('/products', methods=['POST'])
def create_product():
    # get data from request
    data = request.get_json()
    # save to database
    # format result
    return jsonify({'message': 'Product added successfully.'}), 201

@app.route('/products/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    # get data from the request
    data = request.get_json()
    # update data in the database
    # format the result
    return jsonify({'message': 'Product successfully updated.'})

@app.route('/products/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    # delete data from the database
    # format the result
    return jsonify({'message': 'Product successfully deleted.'})"
"Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.  Not applicable","import random

def generate_password(length):
    password = """"
    for i in range(length):
        x = random.randint(1,3)
        if x == 1:
            password += chr(random.randint(48,57))
        elif x == 2:
            password += chr(random.randint(65,90))
        else:
            password += chr(random.randint(97,122))
    return password"
Generate the Python code for a pipelie of KMeans and GaussianMixture clustering models.  n_clusters = 10,"from sklearn.cluster import KMeans, GaussianMixture
cluster = KMeans(n_clusters=n_clusters).fit(X)
pipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)"
Build a Naive Bayes classifier in Python.  ,"import numpy as np

class NaiveBayesClassifer():

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.classes = np.unique(y)

    def fit(self):
        n_samples, n_features = self.x.shape
        self.class_priors = np.zeros(len(self.classes))

        self.means, self.stds = [], []

        # calculate class prior probability
        for i, c in enumerate(self.classes):
            x_class = self.x[self.y == c]
            self.class_priors[i] = x_class.shape[0]/float(n_samples)
            # sample mean and std for each feature
            self.means.append(x_class.mean(axis=0))
            self.stds.append(x_class.std(axis=0))

    def predict(self, X):
        prediction = []
        for x in X:
            posteriors = []
            for i, c in enumerate(self.classes):
                # calculate prior probability
                prior = np.log(self.class_priors[i])
                # calculate conditional probability
                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))
                posteriors.append(prior + posterior)

            # print posteriors
            prediction.append(self.classes[np.argmax(posteriors)])
        return prediction

    # calculate probability density function
    def pdf(self, x, mean, std):
        # probabilities
        probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2)))
        return probabilities"
"The given code is a Python script that contains functions to deregister HiveServer2 in preparation for an upgrade and to complete an upgrade. To use these functions, import the necessary modules and call the functions with the required parameters. The pre_upgrade_deregister() function runs the ""hive --service hiveserver2 --deregister <version>"" command to de-provision the server in preparation for an upgrade. The post_upgrade_deregister() function runs the same command to complete the upgrade. Both functions obtain the Kerberos ticket if security is enabled.  ","""""""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
""License""); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

""""""

import os
import re
from resource_management.core.logger import Logger
from resource_management.core.exceptions import Fail
from resource_management.core.resources.system import Execute
from resource_management.core import shell
from resource_management.libraries.functions import format
from resource_management.libraries.functions import stack_select
from resource_management.libraries.functions.version import format_stack_version
from resource_management.libraries.functions.version import compare_versions


def pre_upgrade_deregister():
  """"""
  Runs the ""hive --service hiveserver2 --deregister <version>"" command to
  de-provision the server in preparation for an upgrade. This will contact
  ZooKeeper to remove the server so that clients that attempt to connect
  will be directed to other servers automatically. Once all
  clients have drained, the server will shutdown automatically; this process
  could take a very long time.
  This function will obtain the Kerberos ticket if security is enabled.
  :return:
  """"""
  import params

  Logger.info('HiveServer2 executing ""deregister"" command in preparation for upgrade...')

  if params.security_enabled:
    kinit_command=format(""{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; "")
    Execute(kinit_command,user=params.smokeuser)

  # calculate the current hive server version
  current_hiveserver_version = _get_current_hiveserver_version()
  if current_hiveserver_version is None:
    raise Fail('Unable to determine the current HiveServer2 version to deregister.')

  # fallback when upgrading because /usr/iop/current/hive-server2/conf/conf.server may not exist
  hive_server_conf_dir = params.hive_server_conf_dir
  if not os.path.exists(hive_server_conf_dir):
    hive_server_conf_dir = ""/etc/hive/conf.server""

  # deregister
  hive_execute_path = params.execute_path
  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.
  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.
  if ""upgrade"" == params.upgrade_direction:
    # hive_bin
    upgrade_target_version = format_stack_version(params.version)
    if upgrade_target_version and compare_versions(upgrade_target_version, ""4.1.0.0"") >= 0:
      upgrade_target_hive_bin = format('/usr/iop/{version}/hive/bin')
      if (os.pathsep + params.hive_bin) in hive_execute_path:
        hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + upgrade_target_hive_bin)
    # hadoop_bin_dir
    upgrade_target_hadoop_bin = stack_select.get_hadoop_dir(""bin"", upgrade_stack_only=True)
    upgrade_source_hadoop_bin = params.hadoop_bin_dir
    if upgrade_target_hadoop_bin and len(upgrade_target_hadoop_bin) > 0 and (os.pathsep + upgrade_source_hadoop_bin) in hive_execute_path:
      hive_execute_path = hive_execute_path.replace(os.pathsep + upgrade_source_hadoop_bin, os.pathsep + upgrade_target_hadoop_bin)

  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)
  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )


def _get_current_hiveserver_version():
  """"""
  Runs ""hive --version"" and parses the result in order
  to obtain the current version of hive.

  :return:  the hiveserver2 version, returned by ""hive --version""
  """"""
  import params

  try:
    command = 'hive --version'
    return_code, iop_output = shell.call(command, user=params.hive_user, path=params.execute_path)
  except Exception, e:
    Logger.error(str(e))
    raise Fail('Unable to execute hive --version command to retrieve the hiveserver2 version.')

  if return_code != 0:
    raise Fail('Unable to determine the current HiveServer2 version because of a non-zero return code of {0}'.format(str(return_code)))

  match = re.search('^(Hive) ([0-9]+.[0-9]+.\S+)', iop_output, re.MULTILINE)

  if match:
    current_hive_server_version = match.group(2)
    return current_hive_server_version
  else:
    raise Fail('The extracted hiveserver2 version ""{0}"" does not matching any known pattern'.format(iop_output))

def post_upgrade_deregister():
  """"""
  Runs the ""hive --service hiveserver2 --deregister <version>"" command to
  de-provision the server in preparation for an upgrade. This will contact
  ZooKeeper to remove the server so that clients that attempt to connect
  will be directed to other servers automatically. Once all
  clients have drained, the server will shutdown automatically; this process
  could take a very long time.
  This function will obtain the Kerberos ticket if security is enabled.
  :return:
  """"""
  import params

  Logger.info('HiveServer2 executing ""deregister"" command to complete upgrade...')

  if params.security_enabled:
    kinit_command=format(""{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; "")
    Execute(kinit_command,user=params.smokeuser)

  # calculate the current hive server version
  current_hiveserver_version = _get_current_hiveserver_version()
  if current_hiveserver_version is None:
    raise Fail('Unable to determine the current HiveServer2 version to deregister.')

  # fallback when upgrading because /usr/hdp/current/hive-server2/conf/conf.server may not exist
  hive_server_conf_dir = params.hive_server_conf_dir
  if not os.path.exists(hive_server_conf_dir):
    hive_server_conf_dir = ""/etc/hive/conf.server""

  # deregister
  hive_execute_path = params.execute_path
  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.
  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.
  # By now <stack-selector-tool> has been called to set 'current' to target-stack
  if params.downgrade_from_version is not None:
    hive_execute_path = _get_hive_execute_path(params.downgrade_from_version)

  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)
  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )

def _get_hive_execute_path(stack_version):
  """"""
  Returns the exact execute path to use for the given stack-version.
  This method does not return the ""current"" path
  :param stack_version: Exact stack-version to use in the new path
  :return: Hive execute path for the exact hdp stack-version
  """"""
  import params

  hive_execute_path = params.execute_path
  formatted_stack_version = format_stack_version(stack_version)
  if formatted_stack_version and compare_versions(formatted_stack_version, ""4.1"") >= 0:
    # hive_bin
    new_hive_bin = format('/usr/iop/{stack_version}/hive/bin')
    if (os.pathsep + params.hive_bin) in hive_execute_path:
      hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + new_hive_bin)
    # hadoop_bin_dir
    new_hadoop_bin = stack_select.get_hadoop_dir_for_stack_version(""bin"", stack_version)
    old_hadoop_bin = params.hadoop_bin_dir
    if new_hadoop_bin and len(new_hadoop_bin) > 0 and (os.pathsep + old_hadoop_bin) in hive_execute_path:
      hive_execute_path = hive_execute_path.replace(os.pathsep + old_hadoop_bin, os.pathsep + new_hadoop_bin)
  return hive_execute_path
"
Design a neural network in Python to identify the characters in a given alphanumeric string.  ,"# Imports 
import numpy as np 
import pandas as pd 
import tensorflow as tf

# Data 
data = pd.DataFrame(columns=['string'])
data = data.append({'string':'3aF5yD'}, ignore_index=True)

# Neural Network Architecture 
model = tf.keras.models.Sequential([
 tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),
 tf.keras.layers.LSTM(256, return_sequences=True),
 tf.keras.layers.Dense(32),
 tf.keras.layers.Dense(len(data), activation='softmax')
])

# Optimizer
model.compile(optimizer='adam', loss='mse')

# Train 
model.fit(data.values, epochs=10)

# Prediction
predictions = model.predict(data.values)
print(predictions)"
Generate Python code to implement a binary search algorithm.  Not applicable,"def binary_search(arr, target):
 left = 0
 right = len(arr)-1
 while left <= right:
 mid = (left + right) // 2
 if arr[mid] > target:
 right = mid - 1
 elif arr[mid] < target:
 left = mid + 1
 else:
 return mid
 return -1"
"Generate the following sequence using a while loop in Python.  0, 1, 2, 4, 7, 11, ...","a, b = 0, 1
while b < 100:
    print(a)
    a, b = b, a + b"
"Write a Python code snippet that creates a dictionary with keys 1,2,3 and string ""One"",""Two"" and ""Three"" as the corresponding values  ","myDict = {1: ""One"", 2:""Two"", 3:""Three""}"
"Refactor the following code to be more pythonic  def print_all(sequences):
    for sequence in sequences:
        print(sequence)","def print_all(sequences):
    [print(sequence) for sequence in sequences]"
Create a simple game using Python and Pygame.  ,"import pygame
import random
 
# Define some colors
black    = (   0,   0,   0)
white    = ( 255, 255, 255)
green    = (   0, 255,   0)
red      = ( 255,   0,   0)
 
# This sets the width and height of each grid location
width=20
height=20
 
# This sets the margin between each cell
margin=5
 
# Create a 2 dimensional array. A two dimensional
# array is simply a list of lists.
grid=[]
for row in range(10):
    # Add an empty array that will hold each cell
    # in this row
    grid.append([])
    for column in range(10):
        grid[row].append(0) # Append a cell
 
# Set row 1, cell 5 to one. (Remember rows and
# column numbers start at zero.)
grid[1][5] = 1
 
# Initialize pygame
pygame.init()
  
# Set the height and width of the screen
size=[255,255]
screen=pygame.display.set_mode(size)
 
# Set title of screen
pygame.display.set_caption(""Array Backed Grid"")
 
# Loop until the user clicks the close button.
done=False
  
# Used to manage how fast the screen updates
clock=pygame.time.Clock()
 
# -------- Main Program Loop -----------
while done==False:
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
            done=True # Flag that we are done so we exit this loop
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                grid[1][5] = 0
    # Set the screen background
    screen.fill(white)
 
    # Draw the grid
    for row in range(10):
        for column in range(10):
            color = white
            if grid[row][column] == 1:
                color = green
            pygame.draw.rect(screen,
                             color,
                             [(margin+width)*column+margin,
                              (margin+height)*row+margin,
                              width,
                              height])
                              
    # Limit to 20 frames per second
    clock.tick(20)
 
    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()
      
# Be IDLE friendly. If you forget this line, the program will 'hang'
# on exit.
pygame.quit ()"
Generate a program using Python to calculate the factorial of a positive number.  Number = 4,"#Calculate the Factorial of a Positive Number

#Get input
factNum = 4

#Calculate and print result
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)

print(""The factorial of 4 is:"", factNum)"
"Write a Python program to complete the implementing of a searching algorithm.  List: [1, 2, 3, 4, 5, 6, 7, 8, 9]
Target item: 7","""""""
Write a Python program to complete the implementing of a searching algorithm
""""""

# Function to implement searching algorithm 
def search(list, item): 
    # traverse through all list elements
    for i in range(len(list)): 
        if list[i] == item: 
            return i 
      
    # item not found
    return -1
  
# main 
if __name__ == ""__main__"": 
    # Given list 
    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    item = 7
  
    # Calling Function 
    index = search(list, item) 
  
    if index != -1: 
        print(""Item found at index"", index) 
    else:
        print(""Item is not found in list"")"
"Write a Python script to extract data from a web page using Regular Expressions (RegEx).  <div class=""data"">
<h1>Name: John Doe</h1>
<h3>Age: 25</h3>
<h3>Location: Los Angeles, CA</h3>
</div>","import re

html = ""<div class=\""data\""> \
 <h1>Name: John Doe</h1> \
 <h3>Age: 25</h3> \
 <h3>Location: Los Angeles, CA</h3> \
</div>""

pattern = '<h1>Name: (.*)</h1>.*<h3>Age: (.*)</h3>.*<h3>Location: (.*)</h3>'

data = re.search(pattern, html)

name = data.group(1)
age = data.group(2)
location = data.group(3)

print('Name: {}'.format(name))
print('Age: {}'.format(age))
print('Location: {}'.format(location))"
"Create a command-line tool for voting on git commands. The tool should have the following sub-commands: ""vote"", ""list"", ""tally"", and ""elect"". The ""vote"" sub-command should allow a user to vote for a specific commit. The ""list"" sub-command should list all votes. The ""tally"" sub-command should tally all votes. The ""elect"" sub-command should elect a commit based on the number of votes. The tool should be implemented using Python and the Git command-line tool.  ","import argparse
import collections
import re
import subprocess


NOTES_REF = 'refs/notes/votes'


Vote = collections.namedtuple('Vote', ['commit', 'user'])



def vote(args):
	assert args.user, 'TODO: determine user automatically'
	vote = 'vote:%s' % args.user
	subprocess.check_call([
		'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT],
		cwd=args.repo_dir)
	# TODO: prevent voting twice as same user


def get_all_votes(repo_dir):
	output_bytes = subprocess.check_output([
		'git', 'notes', '--ref', NOTES_REF, 'list'],
		cwd=repo_dir)
	output = output_bytes.decode('utf-8')
	for line in output.splitlines():
		if not line:
			continue
		votenote_ref, commit_id = line.split()
		# TODO use dulwich or something more efficient here
		votenote_bytes = subprocess.check_output(
			['git', 'show', votenote_ref],
			cwd=repo_dir)

		votenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes
		for voteline in votenote_content.splitlines():
			if not voteline:
				continue
			m = re.match(r'^vote:(?P<user>[a-z0-9@._]+)$', voteline.strip()) # TODO check re for user spec
			if not m:
				print('Skipping crap %r' % voteline)
				continue
			user = m.group('user')

			yield Vote(commit=commit_id, user=user)


def print_list(args):
	all_votes = get_all_votes(args.repo_dir)
	all_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user))
	for v in all_votes_sorted:
		print('%s: +1 from %s' % (v.commit, v.user))


def tally(all_votes):
	"""""" Returns a dict commit id => set of users """"""
	res = collections.defaultdict(set)
	for v in all_votes:
		res[v.commit].add(v.user)
	return res


def print_tally(args):
	all_votes = get_all_votes(args.repo_dir)
	for commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])):
		print('%s: %d votes' % (commit, len(votes)))


def print_elect(args):
	all_votes = get_all_votes(args.repo_dir)
	winner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items())
	# TODO more algorithms
	print('%s won the election with %d votes' % (winner_commit, winner_vcount))


def main():
	parser = argparse.ArgumentParser('Vote on git commands')
	parser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify')
	subparsers = parser.add_subparsers(dest='cmd')
	vote_parser = subparsers.add_parser('vote', help='Vote for commit')
	vote_parser.add_argument('--user', metavar='USER_ID', help='ID of the user to vote as')
	vote_parser.add_argument('COMMIT', help='reference to the commit to vote for')
	subparsers.add_parser('list', help='List all votes')
	subparsers.add_parser('tally', help='Tally all votes')
	subparsers.add_parser('elect', help='Elect a commit')

	args = parser.parse_args()
	if args.cmd == 'vote':
		vote(args)
	elif args.cmd == 'list':
		print_list(args)
	elif args.cmd == 'tally':
		print_tally(args)
	elif args.cmd == 'elect':
		print_elect(args)
	else:
		parser.print_help()

if __name__ == '__main__':
	main()
"
"Write a Python function to calculate the product of elements in a list.  [1, 2, 3, 4]","def product(arr):
    product = 1
    for num in arr:
        product *= num
    return product

product([1, 2, 3, 4])"
Design an interface for a Python program that parses HTML documents.  Not applicable,"from bs4 import BeautifulSoup


class HTMLParser:
    def __init__(self, html_doc):
        self.html_doc = html_doc

    def parse(self):
        soup = BeautifulSoup(self.html_doc, 'html.parser')
        return soup"
"Convert a given code snippet from Swift to Python.  let username = ""John""
let score = 123","username = ""John""
score = 123"
Create a Python script to optimize search engine queries.  ,"import requests
from bs4 import BeautifulSoup

def get_keywords_from_page(url):
    headers = {
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'
    }

    response = requests.get(url, headers = headers)
    soup = BeautifulSoup(response.content, 'html.parser')
    keywords = soup.find('meta', attrs={'name':'keywords'})
    if keywords:
        return keywords['content']
    else:
        return """"

# Optimize search queries by finding keywords from a given website
def optimize_query(url):
    keywords = get_keywords_from_page(url)
    if keywords:
        return keywords
    else:
        return url"
Compile a function to calculate the difference of two date objects in Python.  ,"import datetime

def date_diff(date1, date2):
    """"""Returns the difference between two date objects in days""""""
    diff_date = date2 - date1
    return diff_date.days"
"Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list.  lst=[5,3,1,7,9]","def first_last(lst):
    first_element = lst[0]
    last_element = lst[-1]
    return [first_element, last_element]

print(first_last([5,3,1,7,9]))"
Design a Python class to store customer purchase histories.  ,"class CustomerHistory:
  def __init__(self, customer_id):
    self.customer_id = customer_id
    self.purchase_history = []

  def add_purchase(self, product):
    self.purchase_history.append(product)

  def get_purchase_history(self):
    return self.purchase_history"
"Create a python script that can find the longest common substring between two strings.  FIRST STRING = “abcdaf”
SECOND STRING = “zbcdf”","def lcs(X , Y): 
    # find the length of the strings 
    m = len(X) 
    n = len(Y) 
  
    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 
  
    """"""Following steps build L[m+1][n+1] in bottom up fashion 
    Note: L[i][j] contains length of LCS of X[0..i-1] 
    and Y[0..j-1]""""""
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 
  
# Driver program to test the above function 
X = ""abcdaf""
Y = ""zbcdf""

print(""The length of LCS is "", lcs(X, Y))"
Design a neural network model in Python for text classification.  ,"from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D

model = Sequential()
model.add(Embedding(input_dim=1000, output_dim=64, input_length=50))
model.add(SpatialDropout1D(0.2))
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2, activation=""softmax""))

model.compile(loss=""categorical_crossentropy"", optimizer=""adam"", metrics=[""accuracy""])"
"Create a function in Python to perform a binary search on a sorted array.  A sorted array arr = [1, 3, 5, 7, 8, 9, 12]","def binary_search(arr, target):
  start = 0
  end = len(arr) -1
  while start <= end:
    mid = (start + end) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] > target:
      end = mid - 1
    else:
      start = mid + 1
  return -1"
Construct a Python function to insert a node at the head of a given linked list.  Not applicable,"class Node:
 def __init__(self, data):
  self.data = data
  self.next = None

class LinkedList:
 def __init__(self):
  self.head = None
  
 # Recursive function to insert a node at the beginning of the linked list 
 def insert_at_head(self, new_node): 
  current_head = self.head 
  new_node.next = current_head
  self.head = new_node

list = LinkedList()
list.insert_at_head(Node(1))"
Write a Python program to find the minimum number of coins that sum up to a given amount.  ,"def find_min_coins(amount, denominations):
    min_coins = [float(""inf"")] * (amount + 1)
    min_coins[0] = 0

    for i in range(1, amount + 1):
        for c in denominations:
            if i - c >= 0:
                min_coins[i] = min(min_coins[i - c] + 1, min_coins[i])

    return min_coins[amount]"
"Create a program in Python for performing a linear search on a given list.  [1, 2, 3, 4, 5, 6], 5","def linear_search(list, n): 
  
    for i in range(len(list)): 
  
        if list[i] == n: 
            return i 

list = [1, 2, 3, 4, 5, 6] 
n = 5

x = linear_search(list, n) 

if x == None: 
    print(""Element is not present in the list"") 
else: 
    print(""Element is present at index"", x)"
Create an algorithm to replace all the vowels in a string with the character '$'.  Python,"def replace_vowels(s): 
    # Initialize an empty string 
    new_s = '' 
  
    # Iterate through each character
    for ch in s: 
        # Check if the character is a vowel 
        if (ch == 'a' or ch == 'e' or ch == 'i' 
            or ch == 'o' or ch == 'u'): 
            # Replace it with '$'
            new_s = new_s + '$' 
        else: 
            # Copy the same character 
            new_s = new_s + ch 

    return new_s 


str = 'Python'
result = replace_vowels(str)
print(result)"
"Write a Python program to calculate the sum of two numbers (input in separate lines) and print it.  2
3","num1 = int(input())
num2 = int(input())
sum_of_nums
print(sum_of_nums)"
"Using the given data, create a class in Python and add some methods to the class.  class File:
    def __init__(self, name, size, type):
        self.name = name
        self.size = size
        self.type = type","class File:
    """"""A simple file class""""""
    def __init__(self, name, size, type):
        self.name = name
        self.size = size
        self.type = type

    def get_name(self):
        return self.name

    def get_size(self):
        return self.size

    def get_type(self):
        return self.type"
Can you convert a given HTML page into PDF using Python?  ,"from xhtml2pdf import pisa
 
# open the page
with open('input.html', 'r') as f:
    html = f.read()
 
# convert to PDF
pdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))
 
# print the result
if not pdf.err:
    print('PDF created successfully')
else:
    print('Error creating PDF')"
Generate a password strength checker in Python that follows the NIST guidelines.  ,"import re

def check_password_strength(password):
    '''This function checks if the given password is strong according to NIST guidelines'''
    # check if password is atleast 8 characters long
    if len(password) < 8:
        return False
    
    # check if password contains atleast one lowercase letter
    if not re.search('[a-z]', password):
        return False
    
    # check if password contains atleast one uppercase letter
    if not re.search('[A-Z]', password):
        return False
    
    # check if password contains atleast one number
    if not re.search('[0-9]', password):
        return False
    
    return True"
Create two functions in Python to capitalize and uncapitalize each character of a string.  string = 'hello world',"def capitalize_each_character(string):
  result = ''
  for char in string:
    result += char.capitalize()
  return result

def uncapitalize_each_character(string):
  result = ''
  for char in string:
    result += char.lower()
  return result"
Generate a script in Python that can make a given webpage mobile-friendly.  ,"import bs4
from urllib.request import urlopen

def make_webpage_mobile_friendly(url):
    html = urlopen(url)
    soup = bs4.BeautifulSoup(html, 'html.parser')
    head_html = soup.find('head')
    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}
    meta_tag = soup.new_tag('meta', attrs=meta_attribute)
    head_html.append(meta_tag)
    html_body = soup.find('body')
    for element in html_body.find_all('div', {'class': 'large-wrapper'}):
        element['style'] = 'max-width:100% !important'
        element['width'] = '100% !important'
    for element in html_body.find_all('img'):
        element['style'] = 'max-width:100% !important'
        element['width'] = '100% !important'

    return soup.prettify()"
Write a function to implement Bubble Sort in Python.  ,"def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n-1): 
    # range(n) also work but outer loop will repeat one time more than needed. 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
"Write a Python program to filter a list of strings so that strings containingthe substring ""bad"" are removed.  list_of_string = [""good"",""bad"",""weird"",""great"",""amazing""]","list_of_string = [""good"",""weird"",""great"",""amazing""]

filtered_list = [s for s in list_of_string if ""bad"" not in s]

print(filtered_list)"
"Write a python program to add two matrices.  X = [[1, 2, 3], 
    [3, 4, 5], 
    [6, 7, 8]]
Y = [[2, 3, 4],
    [5, 6, 7],
    [8, 9, 10]]","def add_matrices(X, Y): 
  
    result = [[0, 0, 0], 
            [0, 0, 0], 
            [0, 0, 0]] 
  
    # iterate through rows 
    for i in range(len(X)): 
      
        # iterate through columns 
        for j in range(len(X[0])): 
            result[i][j] = X[i][j] + Y[i][j] 
  
    for r in result: 
        print(r)"
"Given a multi-dimensional array, write a python code snippet to find the sum of its elements.  arr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]","# Use nested list comprehension to calculate the sum 
total_sum = sum([sum(row) for row in arr])"
"Given the following Python code, determine how many lines of code are in the code.  def foo(x):
    y = x/2
    z = x/3
    return x+y-z",4
"Create a program in Python that takes an integer n as input and prints out n lines of ""Hello World!""  5","def hello_world_lines(n):
    for i in range(n):
        print(""Hello World!"")"
Write a code to define a class object in Python.  ,"class Object:
  def __init__(self,attr1,attr2,attr3):
    self.attr1 = attr1
    self.attr2 = attr2
    self.attr3 = attr3"
"Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.  ""Hello,@ $World.""","import re

def remove_non_alphanum(s):
  return re.sub('[^a-zA-Z0-9 \n\.]', '', s)

string = ""Hello,@ $World.""
res = remove_non_alphanum(string) 

print(res)"
Create a Python application for running a text-based adventure game. The application should support user input and provide a textual feedback for each action.  Not applicable,"import random
import os

# define the characters
villain = { ""name"": ""Evil Wizard"", ""hp"": 100 }
hero = { ""name"": ""Hero"", ""hp"": 100 }

def fight_evil_wizard():
    print(""You attack the Evil Wizard!"")
    # randomly choose to either hit or miss the target
    is_hit = random.choice([True, False])
    if is_hit:
        print(""You hit the Evil Wizard!"")
        villain[""hp""] -= 10
    else:
        print(""You missed!"")
    # print out the hp of each character 
    print(""Your HP: {}"".format(hero[""hp""]))
    print(""Evil Wizard HP: {}"".format(villain[""hp""]))

def manage_hp(target, value):
    target[""hp""] += value
    print(""Your HP: {}"".format(hero[""hp""]))
    print(""Evil Wizard HP: {}"".format(villain[""hp""]))

while True:
    os.system(""cls"")  # clear the terminal output
    # check if either character is alive
    if hero[""hp""] <= 0:
        print(""You have been defeated!"")
        break
    if villain[""hp""] <= 0:
        print(""You have slain the Evil Wizard!"")
        # you won!
        break

    # show the user the options
    print(""What would you like to do?"")
    print(""1. Fight Evil Wizard"")
    print(""2. Heal (HP +10)"")
    print(""3. Run away"")
    user_input = int(input("">> ""))

    if user_input == 1:
        fight_evil_wizard()
    elif user_input == 2:
        manage_hp(hero, 10)
    elif user_input == 3:
        print(""You run away from the Evil Wizard!"")
        break
    else:
        print(""Invalid input!"")"
Create a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.  ,"# Non-recursive algorithm
num_1 = int(input('Please enter the first number: '))
num_2 = int(input('Please enter the second number: '))

def prod_non_recursive(num_1, num_2):
    product = 1
    while num_2 > 0:
        product = product * num_1
        num_2 = num_2 - 1
    return product

product_non_recursive = prod_non_recursive(num_1, num_2)
print('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))


# Recursive algorithm
def prod_recursive(num_1, num_2):
    if num_2 == 0:
        return 1
    else:
        return num_1 * prod_recursive(num_1, num_2 - 1)

product_recursive = prod_recursive(num_1, num_2)
print('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))"
"Construct a SQL query to find all the authors whose book titles contain ""python"" in a given database.  ","SELECT author 
FROM books 
WHERE title LIKE '%python%';"
"Build a function in Python to test whether a string is a palindrome.  ""aba""","def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")"
"Write a python program to search through a list of integers and find the smallest number.  int_list = [25, 64, 11, 43, 7]","def find_smallest(int_list):
    # set the minimum value to the first item in the list initially
    min_val = int_list[0]
    # loop over the list and compare each item to the minimum value
    for num in int_list:
        if num < min_val:
            min_val = num
    # return the minimum value
    return min_val"
"Create a Python function that takes two strings as input and returns the total of the lengths of the two strings.  string1 = ""example""
string2 = ""string""","def string_length_sum(string1, string2):
    return len(string1) + len(string2)

result = string_length_sum(string1, string2)"
Write a Python program to create a Tic Tac Toe game.  ,"""""""
Write a Python program to create a Tic Tac Toe game
""""""

# global variables 
board = [""-"", ""-"", ""-"", 
         ""-"", ""-"", ""-"", 
         ""-"", ""-"", ""-""] 
game_is_still_going = True 
  
# who is the winner 
winner = None
  
 # whose turn is it 
current_player = ""X""


# display board
def display_board(): 
    print(board[0] + "" | "" + board[1] + "" | "" + board[2])
    print(board[3] + "" | "" + board[4] + "" | "" + board[5]) 
    print(board[6] + "" | "" + board[7] + "" | "" + board[8])
  
  
# play a game of tic tac toe 
def play_game(): 
    
    # display initial board 
    display_board() 
  
    # while game is still going 
    while game_is_still_going: 
  
        # assign handle turn to a variable 
        handle_turn(current_player) 
  
        # check if game is finished 
        check_if_game_over()
  
        # flip to another player 
        flip_player() 
          
    # check if winner  
    if winner == ""X"" or winner == ""O"": 
        print(""Winner is: "" + winner) 
    elif winner == None: 
        print(""Tie."") 

# handle a single turn of a player 
def handle_turn(player): 
  
    position = input(""Choose a position from 1-9: "") 
    position = int(position) - 1
  
    board[position] = player 
  
    display_board() 
  
  
# check win
def check_if_game_over(): 
    check_if_win() 
    check_if_tie() 
  
# check rows, columns and diagonals for a win 
def check_if_win(): 
    # set global variables 
    global winner 
    # check rows 
    row_winner = check_rows() 
    # check columns 
    column_winner = check_columns() 
    # check diagonals 
    diagonal_winner = check_diagonals() 
    if row_winner: 
        # there is a win 
        winner = row_winner 
    elif column_winner: 
        # there is a win 
        winner = column_winner 
    elif diagonal_winner: 
        # there is a win 
        winner = diagonal_winner 
    else: 
        # there is no win 
        winner = None
    return 
  
# check rows for a win 
def check_rows(): 
    # set global varibales 
    global game_is_still_going 
    # check if any of the rows have all the same values (and is not empty) 
    row_1 = board[0] == board[1] == board[2] != ""-"" 
    row_2 = board[3] == board[4] == board[5] != ""-"" 
    row_3 = board[6] == board[7] == board[8] != ""-"" 
    # if any row does have a match, flag that there is a win 
    if row_1 or row_2 or row_3: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if row_1: 
        return board[0] 
    elif row_2: 
        return board[3] 
    elif row_3: 
        return board[6] 
    # or return None if there was no win 
    else: 
        return None
  
# check columns for a win 
def check_columns(): 
    # set global variables 
    global game_is_still_going 
    # check if any of the columns have all the same values (and is not empty) 
    column_1 = board[0] == board[3] == board[6] != ""-"" 
    column_2 = board[1] == board[4] == board[7] != ""-"" 
    column_3 = board[2] == board[5] == board[8] != ""-"" 
    # if any column does have a match, flag that there is a win 
    if column_1 or column_2 or column_3: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if column_1: 
        return board[0] 
    elif column_2: 
        return board[1] 
    elif column_3: 
        return board[2] 
    # or return None if there was no win 
    else: 
        return None
  
# check diagonals for a win 
def check_diagonals(): 
    # set global variables 
    global game_is_still_going 
    # check if any of the diagonals have all the same values (and is not empty) 
    diagonal_1 = board[0] == board[4] == board[8] != ""-"" 
    diagonal_2 = board[2] == board[4] == board[6] != ""-"" 
    # if any diagonal does have a match, flag that there is a win 
    if diagonal_1 or diagonal_2: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if diagonal_1: 
        return board[0] 
    elif diagonal_2: 
        return board[2] 
    # or return None if there was no win 
    else: 
        return None
  
# check if there is a tie 
def check_if_tie(): 
    # set global variables 
    global game_is_still_going 
    # if board is full 
    if ""-"" not in board: 
        game_is_still_going = False 
    # return true if there is a tie, false if not 
    return

# flip to another player
def flip_player(): 
    # global variables we need 
    global current_player 
    # if current player was x, make it o 
    if current_player == ""X"": 
        current_player = ""O""
    # if current player was o, make it x 
    elif current_player == ""O"": 
        current_player = ""X""

if __name__ == '__main__':
    play_game()"
"Write a Python program to remove all duplicate items from a list.  [1, 2, 2, 4, 5]","def remove_duplicates(lst): 
	return list(dict.fromkeys(lst)) 

result = remove_duplicates([1, 2, 2, 4, 5]) 
print(result)"
"Given a string as an argument, write a Python function to find the longest palindrome in the string.  ","def longest_palindrome(s):  
    longest_p = 0
    for i in range(len(s)):
        for j in range(i+1,len(s)+1):
            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:
                longest_p = len(s[i:j])
    return longest_p"
"Optimize a given Python code to find all prime numbers up to a given limit.  n = 10
for num in range(2, n+1): 
	for i in range(2, num): 
		if num % i == 0: 
			break
	else: 
		print(num, end = ' ')","# Optimized Python code to find prime numbers in a range
# using primality tests

def is_prime(num):
    if num <= 1:
        return False

    for i in range(2, num):
        if (num % i) == 0:
            return False

    return True


# Generate a range of consecutive numbers 
# and check for each if it is prime
def prime_numbers(n):
    for num in range(2, n+1):
        if is_prime(num):
            print(num, end=' ')


# Driver code
if __name__ == '__main__':
    n = 10
    prime_numbers(n)"
"Write a Python code to find the second most frequent value in the given array.  [1, 2, 3, 3, 3, 2, 4, 4, 1, 5]","def second_most_frequent(arr):
 counts = {}
 # Count the frequency of the elements
 for item in arr:
 if item in counts:
 counts[item] += 1
 else:
 counts[item] = 1
 # Sort the list by frequency
 sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True)
 # Return the second most frequent element
 return sorted_count[1][0]
 
print(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))"
"Optimize the following python code array to get the maximum value from it in one pass.  [-5, 2, 3, 4, 6, -8]","def find_max(arr):
  max_so_far = arr[0]
  current_max = arr[0]
  
  for i in range(1, len(arr)):
    current_max = max(arr[i], current_max + arr[i])
    max_so_far = max(max_so_far, current_max)
  
  return max_so_far

arr = [-5, 2, 3, 4, 6, -8]
max_val = find_max(arr)

print(max_val) # 10"
"Write a python program to print the least common multiple of two integers  6, 8","def lcm(x, y):
  if x > y:
    greater = x
  else:
    greater = y
  while(True):
    if((greater % x == 0) and (greater % y == 0)):
      lcm = greater
      break
    greater += 1
  return lcm"
Create a Python program to edit a string and remove the vowels from it.  Hello world,"def remove_vowels(string):
    vowels = ""aeiouAEIOU""
    result = """"
    for character in string: 
        if character not in vowels: 
            result += character
    return result
  
print (remove_vowels(""Hello world""))"
Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.  No Input,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width
    def perimeter(self):
        return (2 * self.length) + (2 * self.width)"
"Optimize a given code in Python to run faster.  def factorial(n):
    fact = 1
    while n > 0:
        fact *= n
        n -= 1
    return fact","def factorial(n):
    fact = 1
    while n > 1:
        fact *= n
        n -= 1
    return fact

# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster."
"Convert the given JSON object to a Python list.  {""name"": ""John"", ""age"": 25, ""hobby"": ""programming""}","data = {""name"": ""John"", ""age"": 25, ""hobby"": ""programming""}

list = list(data.values())
 
print(list)
# Output: [""John"", 25, ""programming""]"
Train a linear regression model using Python to predict the prices of houses.  ,"import pandas as pd
from sklearn.linear_model import LinearRegression

#load dataset
df = pd.read_csv(""housing_data.csv"")

#split dataset
X = df.drop(""price"", axis=1)
y = df[""price""]

#train model
model = LinearRegression()
model.fit(X, y)"
Write a Python program to perform sentiment analysis using a pre-trained model.  Not applicable,"import torch

# Load the pre-trained model
model = torch.load('model.pt')

# Get the input data
input_data = ""This movie was amazing!""

# Convert the input data into a tensor
input_tensor = torch.tensor([input_data])

# Make a prediction with the pre-trained model
prediction = model(input_tensor)

# Get the results
if prediction[0][0].item() > 0.5:
  print('Positive sentiment')
else:
  print('Negative sentiment')"
"Design a function in Python that takes two lists as input and returns the elements in common.  list1 = [2, 3, 4, 5]
list2 = [1, 2, 4, 5]","list1 = [2, 3, 4, 5]
list2 = [1, 2, 4, 5]

def common_elements(list1, list2):
    result = []
    for item in list1:
        if item in list2:
            result.append(item)
    return result

print(common_elements(list1, list2))"
"Write a short Python script to compute the average temperature of a given set of temperatures.  temperatures = [71,77,82,81,75,72,78]","def average(temperatures):
    total = 0
    for temp in temperatures:
        total += temp
    return total/len(temperatures)

print(average(temperatures))"
"This code is a Python script that renders a stereo scene using OpenGL. To use it, follow these steps:

1. Install Python and OpenGL.
2. Run the script in a Python environment.
3. Wait for the scene to render in a new window.
4. Use the arrow keys to move the objects in the scene.
5. Press the ESC key to quit the program.  ","#!/usr/bin/python
'''Test for an openGL based stereo renderer - test binocular rendering to a single window

David Dunn
Feb 2017 - created

www.qenops.com

'''
__author__ = ('David Dunn')
__version__ = '1.0'

import OpenGL
OpenGL.ERROR_CHECKING = False      # Uncomment for 2x speed up
OpenGL.ERROR_LOGGING = False       # Uncomment for speed up
#OpenGL.FULL_LOGGING = True         # Uncomment for verbose logging
#OpenGL.ERROR_ON_COPY = True        # Comment for release
import OpenGL.GL as GL
import math, os
import numpy as np
import dGraph as dg
import dGraph.ui as ui
import dGraph.cameras as dgc
import dGraph.shapes as dgs
import dGraph.materials as dgm
import dGraph.shaders as dgshdr
import dGraph.config as config
import dGraph.util.imageManip as im
import time

MODELDIR = '%s/data'%os.path.dirname(__file__)
WINDOWS = [{
    ""name"": 'Test 5',
    ""location"": (0, 0),
    #""location"": (2436, 1936), # px coordinates of the startup screen for window location
    #""size"": (1920, 1080),
    ""size"": (1600,800), # px size of the startup screen for centering
    ""center"": (400,400), # center of the display
    ""refresh_rate"": 60, # refreshrate of the display for precise time measuring
    ""px_size_mm"": 0.09766, # px size of the display in mm
    ""distance_cm"": 20, # distance from the viewer in cm,
    #""is_hmd"": False,
    #""warp_path"": 'data/calibration/newRight/',
    },
]

def loadScene(renderStack, file=None, cross=False):                
    '''Load or create our sceneGraph'''
    scene = dg.SceneGraph(file)
    stereoCam = dgc.StereoCamera('front', scene)
    stereoCam.setResolution((renderStack.width/2, renderStack.height))
    stereoCam.setTranslate(0.,-.06,0.)
    stereoCam.setRotate(20.,0.,0.)
    stereoCam.setFOV(50.)
    stereoCam.IPD = .062
    crosses = [
        #np.array((.031,.0,-10.)),
        #np.array((-.031,.0,-10.)),
        np.array((-.2,-.2,-10.)),
        np.array((-.2,.0,-10.)),
        np.array((-.2,.2,-10.)),
        np.array((.0,-.2,-10.)),
        np.array((.0,.0,-10.)),
        np.array((.0,.2,-10.)),
        np.array((.2,-.2,-10.)),
        np.array((.2,.0,-10.)),
        np.array((.2,.2,-10.)),
    ]
    for idx, position in enumerate(crosses):
        cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s/cross.obj'%MODELDIR)
        cross.setScale(.01,.01,.01)
        cross.translate = position
        renderStack.objects[cross.name] = cross
        print(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.)
        material = dgm.Material('material%s'%idx,ambient=(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.), amb_coeff=.5)
        #material = dgm.Lambert('material%s'%idx,ambient=(1,0,0), amb_coeff=.5, diffuse=(1,1,1), diff_coeff=1)
        cross.setMaterial(material)
    renderStack.cameras = [stereoCam]
    renderStack.append(stereoCam)
    return True 

def animateScene(renderStack, frame):
    ''' Create motion in our scene '''
    # infinity rotate:
    y = 1
    x = math.cos(frame*math.pi/60)
    for obj in renderStack.objects.itervalues():
        obj.rotate += np.array((x,y,0.))

def addInput():
    for rs in renderStack:
        ui.add_key_callback(arrowKey, ui.KEY_RIGHT, renderStack=rs, direction=3)
        ui.add_key_callback(arrowKey, ui.KEY_LEFT, renderStack=rs, direction=2)
        ui.add_key_callback(arrowKey, ui.KEY_UP, renderStack=rs, direction=1)
        ui.add_key_callback(arrowKey, ui.KEY_DOWN, renderStack=rs, direction=0)

def arrowKey(window,renderStack,direction):
    for o in renderStack.objects:
        if direction == 3:    # print ""right""
            o.rotate(np.array((0.,5.,0.)))
        elif direction == 2:    # print ""left""
            o.rotate(-np.array((0.,5.,0.)))
        elif direction == 1:      # print 'up'
            o.translate(np.array((0.,.01,0.)))
        else:                   # print ""down""
            o.translate(-np.array((0.,.01,0.)))

def drawScene(renderStack):
    ''' Render the stack '''
    myStack = list(renderStack)                                     # copy the renderStack so we can pop and do it again next frame
    temp = myStack.pop()
    temp.render(renderStack.width, renderStack.height, myStack)     # Render our warp to screen

def setup():
    winData = WINDOWS[0]
    renderStack = ui.RenderStack()
    renderStack.display = ui.Display(resolution=winData['size'])
    ui.init()
    mainWindow = renderStack.addWindow(ui.open_window(winData['name'], winData['location'][0], winData['location'][1], renderStack.display.width, renderStack.display.height))
    if not mainWindow:
        ui.terminate()
        exit(1)
    ui.make_context_current(mainWindow)
    ui.add_key_callback(ui.close_window, ui.KEY_ESCAPE)
    scenes = [loadScene(renderStack) for renderStack in renderStacks]
    for rs in renderStacks:
    	rs.graphicsCardInit()
    return renderStacks, scenes, windows

def runLoop(renderStack, mainWindow):
    # Print message to console, and kick off the loop to get it rolling.
    print(""Hit ESC key to quit."")
    frame = 0
    start = time.time()
    while not ui.window_should_close(mainWindow):
        ui.make_context_current(mainWindow)
        drawScene(renderStack)
        now = time.time()
        time.sleep(max((frame+1)/config.maxFPS+start-now,0))
        ui.swap_buffers(mainWindow)
        ui.poll_events()
        #animateScene(renderStack, frame)
        frame += 1
    ui.terminate()
    exit(0)

if __name__ == '__main__':
    renderStack, scene, windows = setup()
    addInput()
    runLoop(renderStack, windows[0])
"
Update the existing code in the following Python program to generate a list of prime numbers in a given range.  ,"def generate_prime_numbers(start, end):
    for i in range(start, end + 1):
        is_prime = True
        # check for all numbers from 2 to (i - 1)
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            print(i, end="" "")"
"Create a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major.  ","class Student:
 def __init__(self, name, age, grade, major):
  self.name = name
  self.age = age
  self.grade = grade
  self.major = major"
"Write a Python program to compute the readability score of a given text.  text = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""","def compute_readability(text):
    """"""Compute the readability score of a given text""""""
    words = 0
    sentences = 0
    syllables = 0
    for word in text.split():
        words += 1
        syllables += count_syllables(word)

    for sentence in text.split("".""):
        sentences += 1

    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))
    return score

def count_syllables(word):
    """"""Count the number of syllables in a given word""""""
    vowels = ""aeiouAEIOU""
    syllables = 0
    for letter in word:
        if letter in vowels:
            syllables += 1
    if len(word) >= 3 and word[-3:] == ""ely"" or word[-2:] == ""es"":
        syllables -= 1
    return syllables"
"This code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:
- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)
- `--exclude`: a list of files or directories to exclude from the check
- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)
- `--git-bin`: the path to the git binary (default is `git`)  ","#!/usr/bin/env python

import argparse
import os
import sys
import subprocess


def check_file(filename, excludes, extensions):
    """"""
    Check if a file should be included in our check
    """"""
    name, ext = os.path.splitext(filename)

    if len(ext) > 0 and ext in extensions:
        if len(excludes) == 0:
            return True

        for exclude in excludes:
            if exclude in filename:
                return False

        return True

    return False


def check_directory(directory, excludes, extensions):
    output = []

    if len(excludes) > 0:
        for exclude in excludes:
            if exclude in directory:
                directory_excluded = False
                return output

    for root, _, files in os.walk(directory):
        for file in files:
            filename = os.path.join(root, file)
            if check_file(filename, excludes, extensions):
                print(""Will check file [{}]"".format(filename))
                output.append(filename)
    return output

def get_git_root(git_bin):
    cmd = [git_bin, ""rev-parse"", ""--show-toplevel""]
    try:
        return subprocess.check_output(cmd).strip()
    except subprocess.CalledProcessError, e:
        print(""Error calling git [{}]"".format(e))
        raise

def clean_git_filename(line):
    """"""
    Takes a line from git status --porcelain and returns the filename
    """"""
    file = None
    git_status = line[:2]
    # Not an exhaustive list of git status output but should
    # be enough for this case
    # check if this is a delete
    if 'D' in git_status:
        return None
    # ignored file
    if '!' in git_status:
        return None
    # Covers renamed files
    if '->' in line:
        file = line[3:].split('->')[-1].strip()
    else:
        file = line[3:].strip()

    return file


def get_changed_files(git_bin, excludes, file_extensions):
    """"""
    Run git status and return the list of changed files
    """"""
    extensions = file_extensions.split("","")
    # arguments coming from cmake will be *.xx. We want to remove the *
    for i, extension in enumerate(extensions):
        if extension[0] == '*':
            extensions[i] = extension[1:]

    git_root = get_git_root(git_bin)

    cmd = [git_bin, ""status"", ""--porcelain"", ""--ignore-submodules""]
    print(""git cmd = {}"".format(cmd))
    output = []
    returncode = 0
    try:
        cmd_output = subprocess.check_output(cmd)
        for line in cmd_output.split('\n'):
            if len(line) > 0:
                file = clean_git_filename(line)
                if not file:
                    continue
                file = os.path.join(git_root, file)

                if file[-1] == ""/"":
                    directory_files = check_directory(
                        file, excludes, file_extensions)
                    output = output + directory_files
                else:
                    if check_file(file, excludes, file_extensions):
                        print(""Will check file [{}]"".format(file))
                        output.append(file)

    except subprocess.CalledProcessError, e:
        print(""Error calling git [{}]"".format(e))
        returncode = e.returncode

    return output, returncode


def run_clang_format(clang_format_bin, changed_files):
    """"""
    Run clang format on a list of files 
    @return 0 if formatted correctly.
    """"""
    if len(changed_files) == 0:
        return 0
    cmd = [clang_format_bin, ""-style=file"",
           ""-output-replacements-xml""] + changed_files
    print(""clang-format cmd = {}"".format(cmd))
    try:
        cmd_output = subprocess.check_output(cmd)
        if ""replacement offset"" in cmd_output:
            print(""ERROR: Changed files don't match format"")
            return 1
    except subprocess.CalledProcessError, e:
        print(""Error calling clang-format [{}]"".format(e))
        return e.returncode

    return 0


def cli():
    # global params
    parser = argparse.ArgumentParser(prog='clang-format-check-changed',
                                     description='Checks if files chagned in git match the .clang-format specification')
    parser.add_argument(""--file-extensions"", type=str,
                        default="".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp"",
                        help=""Comma separated list of file extensions to check"")
    parser.add_argument('--exclude', action='append', default=[],
                        help='Will not match the files / directories with these in the name')
    parser.add_argument('--clang-format-bin', type=str, default=""clang-format"",
                        help=""The clang format binary"")
    parser.add_argument('--git-bin', type=str, default=""git"",
                        help=""The git binary"")
    args = parser.parse_args()

    # Run gcovr to get the .gcda files form .gcno
    changed_files, returncode = get_changed_files(
        args.git_bin, args.exclude, args.file_extensions)
    if returncode != 0:
        return returncode

    return run_clang_format(args.clang_format_bin, changed_files)

if __name__ == '__main__':
    sys.exit(cli())
"
Write a function in Python to generate random numbers within a desired range.  ,"import random

# define a function to generate random numbers
def generate_random(start, end):
	return random.randint(start, end)

# generate a random number in the given range
start = 10
end = 15
print(generate_random(start, end))"
"Can you produce a program that demonstrates the basics of how to use object oriented programming in Python?  ""<noinput>""","# Python program to display introduction of 
# Object Oriented Programming

# Creating a class
class Person:

    # Constructor 
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Method
    def introduce_self(self):
        print(""I'm {0} aged {1}."".format(self.name, self.age))

# Instantiating an object
p1 = Person(""John"", 25)

# Calling a method
p1.introduce_self()"
"Create an algorithm in Python to calculate the maximum sum of a sub-array of an int array.  Given an array arr = [2, -1, 3, 5, -7, 3].","def max_sum_subarray(arr): 
    n = len(arr) 
    max_sum = 0
  
    for i in range(n): 
        sum = arr[i] 
        for j in range(i + 1, n): 
            sum += arr[j] 
            if sum > max_sum: 
                max_sum = sum 

    return max_sum 

# Test array 
arr = [2, -1, 3, 5, -7, 3] 

# Function Call 
max_sum = max_sum_subarray(arr) 
  
# Printing maximum sum 
print(""Maximum sum of the sub-array is"", max_sum) 

# Output: Maximum sum of the sub-array is 8"
"Create a Python program that produces the output shown in this example.  3
3
3
3
3
3","def print_grid(grid_size):
    for x in range(grid_size):
        for y in range(grid_size):
            print(grid_size, end="" "")
        print()

grid_size = 3
print_grid(grid_size)"
How can you create a Python function that prints the number of characters in a string?  ,"def char_count(string): 
    count = 0
    for char in string: 
        count += 1
    print(""Number of characters:"", count)"
Create a Python program to generate and print out a calendar for a given month.  ,"import calendar

# Input the year and month
year = int(input('Enter year: '))
month = int(input('Enter month: '))

# Generate the calendar
cal = calendar.month(year, month)

# Print the calendar
print(cal)"
Write a Python program to print a given number in words  123,"def number_to_words(num):
    units_list = {""0"": ""Zero"", ""1"": ""One"", ""2"": ""Two"", ""3"": ""Three"", ""4"":
                  ""Four"", ""5"": ""Five"", ""6"": ""Six"", ""7"": ""Seven"", ""8"": ""Eight"",
                  ""9"": ""Nine""}
    tens_list = { ""10"": ""Ten"", ""11"": ""Eleven"", ""12"": ""Twelve"", ""13"": ""Thirteen"",
                  ""14"": ""Fourteen"", ""15"": ""Fifteen"", ""16"": ""Sixteen"", ""17"":
                  ""Seventeen"", ""18"": ""Eighteen"", ""19"": ""Nineteen"", ""20"":
                  ""Twenty"", ""30"": ""Thirty"", ""40"": ""Forty"", ""50"": ""Fifty"",
                  ""60"": ""Sixty"", ""70"": ""Seventy"", ""80"": ""Eighty"", ""90"":
                  ""Ninety""}
    
    output = """"
    if num in units_list:
        output += units_list[str(num)]
    elif num in tens_list:
        output += tens_list[str(num)]
    else:
        if len(str(num)) >= 3:
            output += units_list[str(num)[0]] + "" Hundred ""
            output += number_to_words(int(str(num)[1:]))
        else:
            output += tens_list[str(num)[0]+""0""] + "" "" 
            output += units_list[str(num)[1]]
    return output

result = number_to_words(123)
print(result)"
"Given a list of words, write a Python program to group the anagrams (words which have the same letters in a different order) together.  [""tea"", ""eat"", ""ate"", ""apple"", ""plea"", ""rat"", ""tar""]","def anagram_grouping(words):
   anagrams = dict()
   #loop through the list and sort each word
   for word in words: 
      sorted_word = ''.join(sorted(word))
      # check if sorted word exists as a key in dictionary
      if sorted_word not in anagrams: 
         anagrams[sorted_word] = [word] #add key and word to dict
      else: 
         anagrams[sorted_word].append(word) #add word to existing anagrams

   #create a list of anagrams
   result = []
   for values in anagrams.values():
      result.append(values)

   return result


words = [""tea"", ""eat"", ""ate"", ""apple"", ""plea"", ""rat"", ""tar""]
ans = anagram_grouping(words)
print(ans)"
"Write an efficient algorithm to optimize the given code in Python.  def my_process(data):
    result = [] 
    for item in data: 
        processed_data = do_process(item) 
        result.append(processed_data) 
    return result","def my_process(data):
    result = [] 
    for item in data: 
        processed_data = do_process(item) 
        result.append(processed_data) 
    return result

def my_optimized_process(data):
    return [do_process(item) for item in data]"
Generate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements.  ,"def rearrange(arr):
    even, odd = [], [] 
    for n in arr:
        if n % 2 == 0:
            even.append(n)
        else:
            odd.append(n)
    return [item for pair in zip(even, odd) for item in pair]"
"Create a class in Python named ""Employee"" with 3 instance variables ""name"", ""salary"", and ""age"".  ","class Employee():
    def __init__(self, name, salary, age):
        self.name = name
        self.salary = salary
        self.age = age"
"Convert the given algorithm written in pseudo code to Python.  Input: Array A
1. from i=1 to i=length[A]
2.  j=i 
3.  min = A[i]
4.  for j = i+1 to length[A]
5.    if min > A[j]
6.      min = A[j] 
7.  swap A[i] with A[j]","def selection_sort(A): 
    for i in range(len(A)): 
        minimum = i 
        for j in range(i+1, len(A)): 
            if A[minimum] > A[j]: 
                minimum = j 
        A[i], A[minimum] = A[minimum], A[i]"
"Build a classifier model in Python to classify text into two categories.  Dataset:
text1: I love cats
label1: 1

text2: I am scared of dogs
label2: 0

Model Instructions:
1. Bring the dataset into the model.
2. Preprocess it.
3. Split the dataset into training and testing set.
4. Build a classification model using an appropriate algorithm.","#import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

#load and allocate dataset
dataset = pd.read_csv(""dataset.csv"")
X = dataset.Text
y = dataset.Label

#Preprocessing
cv = CountVectorizer()
X = cv.fit_transform(X)

#Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)

#Model training
clf = MultinomialNB()
clf.fit(X_train,y_train)


#Evaluate the model
score = clf.score(X_test,y_test)
print(""Accuracy of model: "",score)"
"Edit this code snippet in Python to remove any errors and improve readability.  def remove_arr(arr):
result =[];
for a in arr:
  if a != 'b'
    result.append(a)
return result","def remove_arr(arr):
    result = []
    for a in arr:
        if a != 'b':
            result.append(a)
    return result"
Generate a function which implements a backwards for loop in Python.  ,"def backwards_for_loop(n):
  for i in range(n, 0, -1):
    # Do something with i
    print(i)"
"Create a python program to carry out the following tasks:  Given an array of integers, find the two elements whose sum is closest to 0.","def find_closest_sum_of_two(arr):
    if len(arr) < 2:
        return None
    
    # initialize the closest sum and indicies
    closest_sum = arr[0] + arr[1]
    first_index = 0
    second_index = 1
    
    # loop through the array and check for closer sums
    for i in range(0, len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i] + arr[j]) < abs(closest_sum):
                closest_sum = arr[i] + arr[j]
                first_index = i
                second_index = j
    
    return arr[first_index], arr[second_index], closest_sum"
Write a Python script to simulate a coin toss experiment.  ,"import random

def coin_toss():
    coin_side = random.choice(['Heads', 'Tails'])
    print('The coin landed on', coin_side)

coin_toss()"
Create a python class that implements a stack.  ,"class Stack:
    
    def __init__(self):
        self.items = []
    def push(self, item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def isEmpty(self):
        return self.items == []
    def peek(self):
        return self.items[len(self.items)-1]
    def size(self):
        return len(self.items)"
"Write a python function to parse a list of strings and extract the date that appears at the end of the strings?  list_of_strings = [""April 11th, 2019"", ""July 2nd, 2018"", ""October 16th, 2012""]","def parse_list_of_strings(list_of_strings):
    date_list = []
    for string in list_of_strings:
        date_to_add = datetime.strptime(string, '%B %dth, %Y')
        date_list.append(date_to_add)
    return date_list"
"Design a class in Python for storing employee information. The employee information should include name, age, salary and department.  Not applicable","class Employee:
 def __init__(self, name, age, salary, department):
 self.name = name
 self.age = age
 self.salary = salary
 self.department = department

 def get_name(self):
 return self.name

 def get_age(self):
 return self.age

 def get_salary(self):
 return self.salary

 def get_department(self):
 return self.department"
Create a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers  Not applicable,"from flask import Flask, request, jsonify

app = Flask(name)

@app.route('/calculate_average', methods=['POST'])
def calculate_average():
 numbers = request.json['numbers']

 # calculate the sum
 total = 0
 for number in numbers:
 total += number

 # calculate the average
 average = total / len(numbers)

 return jsonify({'average': average})

if name == 'main':
 app.run(debug=True)"
Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.  ,"def upper_string(str): 
    res = """" 
    for i in range(len(str)): 
        if str[i].isupper(): 
            res += str[i] 
        else: 
            res += chr(ord(str[i])-32) 
    return res"
"Construct a Python script to find the average of three numbers.  10, 20, 30","def find_average(a, b, c):
  return (a + b + c) / 3

result = find_average(10, 20, 30)
print(result) # 20"
"Write an algorithm in Python that calculates the maximum subarray of a given array.  [-2,1,-3,4,-1,2,1,-5,4]","def max_subarray(arr):
 max_so_far = arr[0] 
 max_ending_here = arr[0] 
   
 for i in range(1, len(arr)): 
  max_ending_here = max(arr[i], max_ending_here + arr[i]) 
  max_so_far = max(max_so_far, max_ending_here)  
   
 return max_so_far"
Create a list of ten random numbers in Python.  ,"import random

random_numbers = [random.randint(1,50) for _ in range(10)]"
"Generate a Python program to implement the following feature: Search a phrase in a given string.  Search the phrase ""to be or not to be"" in the string ""Whether 'tis nobler in the mind to suffer"".","def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)"
"Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm  [6, 2, 5, 1, 8, 9, 0]","# Merge Sort Algorithm

def merge(left, right):
  sortedList = []
  i, j = 0, 0
  while i < len(left) and j < len(right):
    if left[i] < right[j]:
      sortedList.append(left[i])
      i += 1
    else:
      sortedList.append(right[j])
      j += 1
  # Check if anything remains
  sortedList += left[i:]
  sortedList += right[j:]
  return sortedList

def mergeSort(arr):
  # Base case, already sorted
  if len(arr) <= 1:
    return arr

  # Split in half
  mid  = len(arr)/2
  left = arr[:mid]
  right = arr[mid:]
  
  # Sort each half and merge
  left  = mergeSort(left)
  right = mergeSort(right)
  return merge(left, right)

# Driver Code
arr = [6,2,5,1,8,9,0]

sortedArr = mergeSort(arr)
print(sortedArr)

# Output: [0, 1, 2, 5, 6, 8, 9]"
Create a version of the game 'Tic-tac-toe' using Python.  ,"# create Tic-tac-toe game
board = [None] * 9

def draw_board(): 
  row1 = ""|{}|{}|{}|"".format(board[0], board[1], board[2])
  row2 = ""|{}|{}|{}|"".format(board[3], board[4], board[5])
  row3 = ""|{}|{}|{}|"".format(board[6], board[7], board[8])
  
  print()
  print(row1)
  print(row2)
  print(row3)
  print()

def get_row_col():
  row = int(input(""Enter row: ""))
  col = int(input(""Enter col: ""))
  index = (row * 3) + col
  return index 

def update_board(icon, index): 
  board[index] = icon

def is_victory(icon): 
  # check victory across row
  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)
  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)
  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)

  # check victory across column
  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)
  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)
  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)

  # check victory across diagonal
  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)
  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)

  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):
    return True
  else:
    return False

while True:
  # player 1 
  index = get_row_col()
  update_board(""X"", index)
  draw_board()

  if(is_victory(""X"")):
    print(""Player 1 wins"")
    break

  # player 2
  index = get_row_col()
  update_board(""O"", index)
  draw_board()

  if(is_victory(""O"")):
    print(""Player 2 wins"")
    break"
Create a Flask Python service that serves an array of strings as JSON using a GET request.  Not applicable,"import json
from flask import Flask, request, jsonify 

app = Flask(__name__)

data = ['Apple', 'Banana', 'Carrot']

@app.route('/data', methods=['GET'])
def serve_data():
 return jsonify(data)

if __name__ == '__main__':
 app.run()"
"Create a web api in Python, using Flask, that takes a search string and returns a collection of books that match that search.  searchTerm: ""cat""","from flask import Flask, jsonify 
import requests 

app = Flask(__name__) 

@app.route('/books/<string:search_term>') 
def search_books(search_term): 
	url = 'https://www.googleapis.com/books/v1/volumes?q={}'.format(search_term)
	r = requests.get(url).json() 
	books = r['items'] 
	return jsonify(books) 

if __name__ == '__main__': 
	app.run(debug=True)"
"Generate a program in Python for sorting the elements of an array in descending order.  [2, 4, 1, 6, 5]","def sort_descending(arr):
    # Sort array from largest to smallest
    arr.sort(reverse=True)

    # Print result
    print(arr)

# Test
arr = [2, 4, 1, 6, 5]
sort_descending(arr)
# Output: [6, 5, 4, 2, 1]"
Normalize the following text using Python.  the     Cat    in  the  hat,"text = ""the Cat in the hat""
text = text.replace('  ', ' ').strip()
print(text)"
"Write a service in Python that can be used to find the closest point to an input in a given set of coordinates.  Input coordinates: (2, 3)

Set of coordinates: [(2.1, 3.1), (1, 1), (0.5, 2.5)]","import math

def find_closest_point(input_coordinates, coordinates_set):
    # Calculate the euclidean distance for each point in the set
    distances = []
    for c in coordinates_set:
        dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2)
        distances.append(dist)
        
    # Find the index of the point with the smallest distance
    idx = distances.index(min(distances))
    
    # Return the closest point
    return coordinates_set[idx]
    
# Input coordinates
input_coordinates = (2, 3)

# Set of coordinates
coordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)]

# Find and print the closest point
closest_point = find_closest_point(input_coordinates, coordinates_set)
print('Closest point: ', closest_point)"
"Develop a Python program to calculate the area of a triangle using the side lengths.  a=5, b=9, c=11","# Calculates the area of a triangle given the three side lengths
def area_triangle(a, b, c): 
    # Calculate the semi-perimeter 
    s = (a + b + c) / 2  
  
    # calculate the area 
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 
    return area 
  
# Driver Code 
a = 5
b = 9
c = 11
print(""Area of triangle is : "", area_triangle(a, b, c))"
Write a Python script that takes a given string and finds the longest palindromic substring in it.  ,"def longest_palindromic_substring(s): 
	n = len(s) 
	L = [[0 for x in range(n)] 
			for y in range(n)] 
	# All substrings of length 1 are palindromes 
	for i in range(n): 
		L[i][i] = 1

	# check all substring of length 2
	for cl in range(2, n + 1): 
		for i in range(n - cl + 1): 
			j = i + cl - 1
			if s[i] == s[j] and cl == 2: 
				L[i][j] = 2
			elif s[i] == s[j]: 
				L[i][j] = L[i + 1][j - 1] + 2
			else: 
				L[i][j] = max(L[i][j - 1],L[i + 1][j]); 

	# start position of the longest palindromic substring 
	start = 0
	length = 1
	for i in range(n): 
		if (length < L[i][n - 1]): 
			length = L[i][n - 1] 
			start = i 
	return s[start - length + 1:start + length] 

print(longest_palindromic_substring(""abracadabra""))"
Write a function in Python to generate n numbers of Fibonacci series.  ,"def fibonacci_series(n): 
    # First two terms 
    a = 0
    b = 1
    c = 0
    print(""Fibonacci Series:"", end = "" "")
    print(a , b , end = "" "")
    for i in range(2,n): 
        c = a + b 
        a = b 
        b = c 
        print(c , end = "" "") 

# Output should come like
# 0 1 1 2 3 5 8 13 21 34"
Write a valid python statement to convert a dict to a list  ,mylist = list(mydict.items())
"Create a python script to calculate the moving average of the given data  Data: [2, 3, 5, 10, 11]","def moving_average(data, num_points):
    moving_average_list = []
    for i in range(0, len(data)-num_points+1):
        window_sum = 0
        for j in range(i, i+num_points):
            window_sum += data[j]
        moving_average_list.append(window_sum/num_points)
    return moving_average_list"
"Implement a Python program to check if a number is divisible by another number.  7, 2","def is_divisible(n, m):
    if (n % m == 0):
        return True
    else:
        return False
    
print(is_divisible(7, 2))  # Outputs False"
"Write a python code to identify outliers in data using Standard Deviation methods.  Data = [2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12]","import numpy as np 

# Create data
data = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12])

# Calculate mean and standard deviation
mean = np.mean(data)
std = np.std(data)

# Set the boundaries
lower_bound = mean - 3*std
upper_bound = mean + 3*std

# Find outliers
outliers = [] 
for i in data: 
    if i < lower_bound or i > upper_bound: 
        outliers.append(i)

# Print the outliers
print(""Outliers:"", outliers) 

""""""
Outliers: [1, 11, 12]
"""""""
"Create a neural network in Python which can classify a given set of food posters as either Italian or Mexican.  Train Data:
Italian:
- Pizza poster
- Lasagna poster
- Spaghetti poster
Mexican:
- Burrito poster
- Enchilada poster
- Taco poster","import tensorflow as tf

# Set up the input and output data
X = tf.placeholder(tf.float32, shape=[None, 3])
y = tf.placeholder(tf.float32, shape=[None, 2])

# Define the model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))

# Train the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X, y, epochs=10)"
"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.  sample_string = ""HelloWorld""","def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)"
"Generate a Python program to filter a list of strings to only return words that have 7 or more characters.  words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']","words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']

def filter_list(words):
  filtered_list = []

  for word in words:
    if len(word) >= 7:
      filtered_list.append(word)

  return filtered_list"
Write a for loop in Python to print out the squared value of the numbers from 0 to 10.  ,"for i in range(0,11):
    print(i**2)"
"Convert a given python data structure into a json string using json package  data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}","import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'"
"Develop a Twitter bot in Python. The bot should search for a given hashtag, like the posts it finds, and follow their authors.  Hashtag: #news","import tweepy

# authentication for twitter api
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)

# create an API instance
api = tweepy.API(auth)

# search for posts with the hashtag
for tweet in tweepy.Cursor(api.search, q='#news').items(10):
 # like post
 api.create_favorite(tweet.id)
 # follow the author
 api.create_friendship(tweet.user.id)"
"Write a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values.  Sample JSON:

{
 ""name"": ""John"",
 ""age"": 24,
 ""hobbies"": [""Soccer"", ""Dance""]
}","import json

# sample json object 
data = {
 ""name"": ""John"",
 ""age"": 24,
 ""hobbies"": [""Soccer"", ""Dance""]
}

# parse the json object 
parsed_data = json.loads(data)

# print the parsed values 
print(""Name: "", parsed_data[""name""])
print(""Age: "", parsed_data[""age""])
print(""Hobbies: "", parsed_data[""hobbies""])"
Create a Python script to help streamline the process of scraping data from a web page.  Not applicable,"import requests
from bs4 import BeautifulSoup

# Get HTML content from target website
r = requests.get('URL')
html_doc = r.text

# Create a beautiful soup object
soup = BeautifulSoup(html_doc)

# Find and extract desired data
data = soup.select('SELECTOR') 

# Print extracted data
for x in data: 
 print(x.text)"
Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.  ,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def print_person(self):
        print('Name:', self.name, ', Age:', self.age)"
"Make an algorithm in Python for printing the maximum frequency of an element in an array.  Data = [1, 4, 2, 6, 2, 1, 2, 9]","#Using Python

def max_frequency_element(data):
    # Create an empty dictionary to store the frequency of each element
    frequency = {}
    
    # Iterate over the list and fill in the frequency dictionary
    for x in data:
        if x in frequency:
            frequency[x] += 1
        else:
            frequency[x] = 1
            
    # Now find the key with the maximum frequency
    maximum_frequency = 0
    max_frequency_element = None
    
    for key, value in frequency.items():
        if value > maximum_frequency:
            maximum_frequency = value
            max_frequency_element = key
            
    return max_frequency_element

data = [1, 4, 2, 6, 2, 1, 2, 9]
max_frequency_element = max_frequency_element(data)
print(max_frequency_element)
# Output: 2"
Design an algorithm in Python that checks whether a given number is a perfect square.  ,"def is_perfect_square(n):
  if n < 0: 
    return False
  x = n
  while x*x > n:
      x = (x + n/x) // 2
  return x*x == n"
Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive).  25,"def print_perfect_numbers(N):
 for val in range(1, N + 1):
   sum = 0
   for testval in range(1, val):
       if (val % testval) == 0:
           sum += testval
   if (sum == val):
       print(val)"
"To start pyHegel, import the module and call the function start_pyHegel(). If starting on Windows with the Console program, call start_console() instead.  ","# -*- coding: utf-8 -*-

########################## Copyrights and license ############################
#                                                                            #
# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #
#                                                                            #
# This file is part of pyHegel.  http://github.com/lupien/pyHegel            #
#                                                                            #
# pyHegel is free software: you can redistribute it and/or modify it under   #
# the terms of the GNU Lesser General Public License as published by the     #
# Free Software Foundation, either version 3 of the License, or (at your     #
# option) any later version.                                                 #
#                                                                            #
# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #
# License for more details.                                                  #
#                                                                            #
# You should have received a copy of the GNU Lesser General Public License   #
# along with pyHegel.  If not, see <http://www.gnu.org/licenses/>.           #
#                                                                            #
##############################################################################

from __future__ import absolute_import

# Use version according to option 5 in https://packaging.python.org/en/latest/single_source_version.html

# make sure that new versions numbers compare properly when using
# pkg_resources.parse_version
__version__ = '1.0.0rc2'
__copyright__ = '2011-2015  Christian Lupien'

def start_pyHegel():
    """""" This is the recommanded way to start pyHegel.
        It starts ipython in a standard way (pylab, autocall enabled,...)
        and then loads and initializes the pyHegel commands.

        If the python session was started with command line arguments
        --console, it will try to start pyHegel in the Console program
        that comes with pythonxy. This is windows only.

        If you later need access to the commands in a module:
            import pyHegel.commands as cmds
            cmds.get(somedevice)
        or
            from pyHegel.commands import *
            get(somedevice)
        or any other variants you want.
    """"""
    import sys
    import os
    if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console':
        start_console()
    else:
        from . import main
        main.main_start()

def start_console():
    from . import win_console_helper
    win_console_helper.start_console()
"
"Design a Python program that predicts a movie's popularity given its genre, rating, and release date.  The input includes three parameters: genre (action), rating (8.5), and release date (2020-02-10).","import pandas as pd

# read the data file
df = pd.read_csv('movie_data.csv')

# feature engineering
df['action'] = (df['genres'].str.contains('Action')) * 1

# define which features to be used
features_df = df[['action','rating']]

# define the target variable
target = df.popularity

# split data into train and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)

# train a RandomForestRegressor model
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(X_train, y_train)

# make prediction
input_data = {
 'action': 1,
 'rating': 8.5,
 'release_date': '2020-02-10'
}
prediction = rf.predict([input_data])

print(prediction) // Outputs the predicted movie popularity"
Design a program that takes a date as input and calculates the day of the week that date falls on.  31/05/2020,"#!/usr/bin/env python3

import datetime

def dayOfWeek(date):
   year,month,day = map(int,date.split('/'))
   dayNumber = datetime.date(year, month, day).weekday()
 
   return [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""][dayNumber]"
"Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.  list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]","list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]

def findDuplicates(list):
 result = []
 seen = set()
 
 for num in list:
 if num not in seen:
 seen.add(num)
 else:
 result.append(num)
 
 return result

print(findDuplicates(list))"
"Create a Python program that will count and print the number of vowels and consonants in a user-provided string.  Declare a variable ""text"" that contains a sample string","text = 'This is a sample string'

# Get the total number of characters 
total = len(text) 

# Count the number of vowels 
vowels = 0 
for character in text: 
 if character in 'aeiou': 
  vowels += 1

# Count the number of consonants 
consonants = 0 
for character in text: 
 if character in 'bcdfghjklmnpqrstvwxyz': 
  consonants += 1

# Print the result 
print(f""Vowels: {vowels}"")
print(f""Consonants: {consonants}"")
print(f""Total: {total}"")"
"Create a Python program that takes in a 2D array and returns the sum of all the elements.  [[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]","def sum_2D_array(arr):
    """"""Return the sum of all the elements in a 2D array.""""""
    sum_arr = 0
    for row in arr:
        for elem in row:
            sum_arr += elem
    return sum_arr"
Implement a logistic regression algorithm in Python to solve a classification task.  Not applicable,"import numpy as np

class LogisticRegression:
    def __init__(self, learning_rate=0.001, max_iter=1000):
        self.learning_rate = learning_rate
        self.max_iter = max_iter
        self.weights = None

    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))


    def fit(self, X, y):
        # add bias term to X
        X = np.hstack([np.ones([X.shape[0], 1]), X])
        num_features = X.shape[1]
        self.weights = np.zeros(num_features)

        for _ in range(self.max_iter):
            # compute the linear combination of the input and weights (z)
            z = np.dot(X, self.weights)
            # compute the model output (a)
            a = self.sigmoid(z)
            # compute the cost of the model output
            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()
            # compute the derivatives of the cost for each weights
            dCost_dw = np.dot(X.T, (a - y)) / len(y)
            # update weights
            self.weights -= self.learning_rate * dCost_dw

    def predict(self, X):
        # add bias term to X
        X = np.hstack([np.ones([X.shape[0], 1]), X])
        z = np.dot(X, self.weights)
        a = self.sigmoid(z) 
        return np.round(a)"
Develop a Python program to convert the following Fahrenheit value to Celsius.  212,"def convert_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) / 1.8

    return celsius

fahrenheit = 212
celsius = convert_to_celsius(fahrenheit)
print(celsius)"
"Create a program in Python to remove duplicates from a list and return the new list.  arr = [1, 2, 3, 1, 4]","def remove_duplicates(arr):
    new_list = []
    for item in arr:
        if item not in new_list:
            new_list.append(item)
    return new_list"
Create a class in Python to manage the expiry dates of products.  ,"class ProductExpiry:
    def __init__(self, product_id, expiry_date):
        self.product_id = product_id
        self.expiry_date = expiry_date

    def is_expired(self):
        """"""Returns True if the product has passed its expiry date, False otherwise""""""
        return datetime.now() > self.expiry_date
    
    def get_time_left(self):
        """"""Returns the number of days left before the product expires""""""
        time_left = (self.expiry_date - datetime.now())
        days_left = time_left.days
        return days_left"
Create a Python script that includes a function that returns the sum of the first n prime numbers.  n = 5,"import math
 
def is_prime(num):
    # Check if the number is 1 or less than 1
    if num <= 1:
        return False
    # Check if the number is divisible by any number between 2 and the square root of the number
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True
 
def sum_primes(n):
    prime_sum = 0
    count = 0
 
    i = 2
    while count < n:
        if is_prime(i):
            prime_sum += i
            count += 1
        i += 1
 
    return prime_sum

sum_primes(n)"
Design and generate a valid Java program that uses Stack Overflow's API to print all of the most recent questions and answers on a specific topic.  Topic - Python,"import java.net.URL;
import java.util.Scanner;
 
public class QueryOverflow {
    public static void main(String[] args) throws Exception {
        URL url = new URL(""https://api.stackexchange.com/2.2/search?order=desc&sort=activity&tags=python&site=stackoverflow"");
        Scanner scan = new Scanner(url.openStream());
        String str = new String();
        while (scan.hasNext())
            str += scan.nextLine();
        scan.close();
 
        JSONObject obj = new JSONObject(str);
        JSONArray items = obj.getJSONArray(""items"");
        for (int i = 0; i < items.length(); i++)
        {
            // print title
            System.out.println(items.getJSONObject(i).getString(""title""));
            // print answer
            System.out.println(items.getJSONObject(i).getJSONObject(""accepted_answer"").getString(""body""));
        }
    }
}"
"Write a Python function to check whether a number is in a given range.  num = 10
lower = 10
upper = 20","def check_range(num, lower, upper):
        return (num >= lower and num <= upper)
 
print(check_range(10, 10, 20)) # prints True"
"Connect to a database, retrieve data, and write it to a JSON file named ""extract.json"". The code is written in Python and requires the SQLite3 library.  ","#!/usr/bin/python
# -*- coding: utf-8 -*-
# TESTING FILE made.by.a.fox. 12.2.15
# Updated by acrule 01.21.16

#FEATURE LIST
#   Y   connect to db
#   Y   write to file
#   Y   Write JSON format
#       Accept input date parameter
#KNOWN ISSUES
#   2. no formatting or conversion of datetime stamps

import re
import os
import sys

import json
import sqlite3 as lite

import collections

import time
import datetime


db_file = os.path.expanduser('~/.traces/traces.sqlite')  #looks for db under ~/.traces
con = lite.connect(db_file)

with con:

    data = []  #master data container
    apps = []  #list of apps
    windows = [] # list of windows
    urls = []
    appevents = []  #list of application events
    windowevents = [] #list of window events
    urlevents = []
    exps = []  #list of experiences
    images = [] #list of screenshots
    words = [] #list of keywords

    cur = con.cursor()

    #SQL query strings
    appsSQL = ""SELECT * FROM app""
    windowsSQL = ""SELECT * FROM window""
    urlSQL = ""SELECT * FROM url""
    activeappSQL = ""SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt""
    activewindowSQL = ""SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt""
    activeurlSQL = ""SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt""
    experienceSQL = ""SELECT * FROM experience""
    wordsSQL = ""SELECT * FROM keys""

    #GET list of applications
    cur.execute(appsSQL)
    rows = cur.fetchall()
    for row in rows:
        a = collections.OrderedDict()
        a['id'] = row[0]
        a['time'] = row[1]
        a['name'] = row[2]
        apps.append(a)

    #GET list of windows
    cur.execute(windowsSQL)
    rows = cur.fetchall()
    for row in rows:
        w = collections.OrderedDict()
        w['id'] = row[0]
        w['time'] = row[1]
        w['name'] = row[2]
        w['app'] = row[3]
        windows.append(w)

    #GET list of urls
    cur.execute(urlSQL)
    rows = cur.fetchall()
    for row in rows:
        u = collections.OrderedDict()
        u['id'] = row[0]
        u['time'] = row[1]
        u['title'] = row[2]
        u['url'] = row[3]
        u['host'] = row[4]
        urls.append(u)

    #GET list intervals for primary application
    cur.execute(activeappSQL)
    rows = cur.fetchall()
    for row in rows:
        a = collections.OrderedDict()
        a['id'] = row[0]
        a['appid'] = row[1]
        a['event'] = row[2]
        a['start'] = row[3]
        a['end'] = row[4]
        appevents.append(a)

    #GET list intervals for primary window
    cur.execute(activewindowSQL)
    rows = cur.fetchall()
    for row in rows:
        w = collections.OrderedDict()
        w['id'] = row[0]
        w['windowid'] = row[1]
        w['appid'] = (item for item in windows if item[""id""] == row[1]).next()['app']
        w['event'] = row[2]
        w['start'] = row[3]
        w['end'] = row[4]
        windowevents.append(w)

    #GET list intervals for urls
    cur.execute(activeurlSQL)
    rows = cur.fetchall()
    for row in rows:
        u = collections.OrderedDict()
        u['id'] = row[0]
        u['urlid'] = row[1]
        u['appid'] = row[2]
        u['windowid'] = row[3]
        u['event'] = row[4]
        u['start'] = row[5]
        u['end'] = row[6]
        urlevents.append(u)

    #GET list of experiences
    cur.execute(experienceSQL)
    rows = cur.fetchall()
    for row in rows:
        a = collections.OrderedDict()
        a['id'] = row[0]
        a['text'] = row[2]
        exps.append(a)

    #GET list of screenshots
    image_dir = os.path.expanduser('~/.traces/screenshots')  #looks for db under ~/.traces
    for y in os.listdir(image_dir):
        y_dir = os.path.join(image_dir,y)
        if not os.path.isdir(y_dir):
            continue
        for m in os.listdir(y_dir):
            m_dir = os.path.join(y_dir, m)
            if not os.path.isdir(m_dir):
                continue
            for d in os.listdir(m_dir):
                d_dir = os.path.join(m_dir, d)
                if not os.path.isdir(d_dir):
                    continue
                for h in os.listdir(d_dir):
                    h_dir = os.path.join(d_dir, h)
                    if not os.path.isdir(h_dir):
                        continue
                    h_images = os.listdir(h_dir)
                    for image in h_images:
                        #make sure the file is an image
                        if image[-4:] == '.jpg':
                            i = collections.OrderedDict()
                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')
                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset
                            i['image'] = os.path.join(""screenshots"", y, m, d, h, image)
                            images.append(i)

    #GET keywords
    cmd_rows = []
    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']
    starttime = 0.0
    app = 0
    window = 0
    s = ''

    cur.execute(wordsSQL)
    rows = cur.fetchall()
    for row in rows:
        if 'Cmd' in row[3]:
            cmd_rows.append(row)
        else:
            text = str(row[2])
            # if its a char indicating a new word, save our text token
            if text in newWord:
                # save our data
                if len(s) > 0:
                    k = collections.OrderedDict()
                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(""%H:%M %m/%d/%y"")
                    k['text'] = s #just pass the whole string for now
                    k['app'] = app
                    k['window'] = window
                    words.append(k)

                #reset tracking time
                starttime = float(row[1])
                s = ''

            # if its a regular char on the same window, just keep building the string
            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:
                if text == 'Backspace':
                    s = s[:-1]
                else:
                    s += row[2]
            #else its a regular char but we switched windows, save the data
            else:
                if len(s) > 0:
                    k = collections.OrderedDict()
                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(""%H:%M %m/%d/%y"")
                    k['text'] = s #just pass teh whole string for now
                    k['app'] = app
                    k['window'] = window
                    words.append(k)

                #reset tracking variables
                window = int(row[5])
                app = int(row[4])
                starttime = float(row[1])

                #write the character to start the next word
                if text in newWord or text == 'Backspace':
                    s = ''
                else:
                    s = row[2]

    #ASSEMBLE apps and experince into json
    d = collections.OrderedDict()
    d['apps']=apps
    d['window']=windows
    d['url']=urls
    d['appevents']=appevents
    d['windowevents']=windowevents
    d['urlevents']=urlevents
    d['exps']=exps
    d['images']=images
    d['words']=words
    data = d

    #WRITE file
    file = 'extract.json'
    z = open(file,'w')
    z.writelines(json.dumps(data))
"
"Compose a python program to search an element in an array  [2, 3, 4, 5]","def linear_search(arr, x): 
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i+1
  
    return -1

arr = [2, 3, 4, 5] 
x = 4

print(linear_search(arr, x))"
Create a class in Python using object-oriented programming that creates instance of a book.  ,"class Book(object):
    def __init__(self, title, author, year_published):
        self.title = title
        self.author = author
        self.year_published = year_published

    def __str__(self):
        return '{0} by {1} published in {2}.'.format(
            self.title, self.author, self.year_published)"
"Write a Python script to implement an iterator that iterates over a given array.  [2, 5, 6, 8, 9]","def iterator(array):
  index = 0
  while (index < len(array)):
    yield array[index]
    index += 1

given_array = [2, 5, 6, 8, 9]
iterating = iterator(given_array)

for value in iterating:
  print(value)"
"Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.  ","students = [ 
  { 
    'name': 'John Doe', 
    'age': 18, 
    'grade': 'A'
  }, 
  { 
    'name': 'Jane Smith', 
    'age': 16, 
    'grade': 'B'
  } 
]"
"Write a python code to find the longest contiguous increasing subsequence in the following array.  [3,6,9,1,2,3,4,5]","""""""
Find the longest contiguous increasing subsequence 
""""""

def long_increasing_subsequence(arr): 
    n = len(arr) 
    dp = [1 for x in range(n)] 
   
    for i in range (1 , n): 
        for j in range(0 , i): 
            print (i,j) 
            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): 
                dp[i] = dp[j]+1
   
    maximum = 0
    for i in range(n): 
        maximum = max(maximum, dp[i])  

    return maximum 

arr =[3,6,9,1,2,3,4,5] 
longest_subsequence_length = long_increasing_subsequence(arr)
print(longest_subsequence_length) # prints 5"
"Create a Python for loop that prints out each element in a given list.  [10, 20, 30, 40]","for element in [10,20,30,40]:
    print(element)"
"Create a Python program to calculate the number of possible combinations of a given set of elements.  range = [1, 2, 3]","def calculate_combinations(range):
    count = 0

    # base case
    if len(range) == 0:
        return 0
    if len(range) == 1:
        return 1

    # recursive case
    for i in range:
        sub_set = range[:]
        sub_set.remove(i)
        count += calculate_combinations(sub_set) + 1

    return count

range = [1, 2, 3]
print(calculate_combinations(range))
# Output: 6"
"Can you write a program in Python to remove the duplicate elements in a list?  [5, 9, 2, 4, 5, 9, 2]","def remove_duplicates(arr):
    new_arr = []
    for item in arr:
        if item not in new_arr:
            new_arr.append(item)
    return new_arr

my_list = [5, 9, 2, 4, 5, 9, 2]
print(remove_duplicates(my_list))
# Output: [5, 9, 2, 4]"
"Write a Python function to remove elements from a given list of integers, if the integer is a multiple of 3  list = [3, 6, 9, 11, 12, 15]","def remove_multiple_of_three(list):
  new_list = []
  for item in list:
    if item % 3 != 0:
      new_list.append(item)
  return new_list"
"Create an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.  [(""Task A"", 2), (""Task B"", 1), (""Task C"", 3)]","def schedule_tasks(tasks):
  scheduled_tasks = []
  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline
  current_time = 0
  
  while len(tasks) > 0:
    for task in tasks:
      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline
        scheduled_tasks.append(task) # add the task to the list of scheduled tasks
        current_time += task[1] # update the current time
        tasks.remove(task) # remove the task from the list of tasks
        break # move on to the next task
  
  return scheduled_tasks

schedule_tasks([(""Task A"", 2), (""Task B"", 1), (""Task C"", 3)]); # returns [(""Task B"", 1), (""Task A"", 2)]"
You need to create a python module to explain the Canny Edge Detection algorithm.  ,"import numpy as np
 
def cannyEdgeDetector(img, sigma):
    
    # Step 1: Filter the image with a Gaussian filter to remove noise
    blurred = gaussianFilter(img, sigma)
    
    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image
    Gx, Gy = sobelFilter(blurred)
    
    # Step 3: Calculate the magnitude and angle of the gradient
    magnitude, angle = calculateGradient(Gx, Gy)
    
    # Step 4: Non-maximum suppression to thin the edges while retaining 
    # strong edge points
    thin_image = nonMaximumSuppression(magnitude, angle)
    
    # Step 5: Double threshold to classify pixels as weak or strong edge
    strong_px, weak_px = doubleThreshold(thin_image)
    
    # Step 6: Trace through the edge map and obtain the final edges
    edges = followEdge(strong_px, weak_px)
    
    return edges"
Write a Python program for predicting stock prices.  A sample dataset with historic prices for Apple Inc. (AAPL),"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Read the dataset
dataset = pd.read_csv('AAPL.csv')

# Separate the dataset into features and labels
#labels = dataset['Label']
y = np.array(dataset['Close'])
dataset.drop(""Close"", axis=1, inplace=True)
x = np.array(dataset)

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)

# Create the model
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators=100)

# Train the model
regressor.fit(x_train, y_train)

# Make predictions
y_pred = regressor.predict(x_test)

# Check the accuracy
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(""Mean squared error:"", mse)"
"Create a machine learning model in Python that will classify each sentence as Positive, Neutral or Negative sentiment.  Not applicable","import spacy
import nltk
from nltk.corpus import opinion_lexicon
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import LinearSVC

# Download and create a spaCy model
nlp = spacy.load('en_core_web_sm')

# Create a list of positive, negative and neutral words
positive_words = opinion_lexicon.positive()
negative_words = opinion_lexicon.negative()
neutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words))

# Create a Bag of Words Vectorizer
vectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words))

def create_examples(words, sentiment):
    examples = []
    # Create BOW for each example
    for w in words:
        bow = vectorizer.transform([w])
        examples.append((bow, sentiment))
    return examples

# Create training examples
positive_examples = create_examples(positive_words, 'POSITIVE')
negative_examples = create_examples(negative_words, 'NEGATIVE')
neutral_examples = create_examples(neutral_words, 'NEUTRAL')

# Create training data
train_data = positive_examples + negative_examples + neutral_examples

# Train a classifier
classifier = LinearSVC()
classifier.fit([x[0] for x in train_data], [x[1] for x in train_data])

def predict_sentiment(sentence):
    # Create BOW of sentence
    bow = vectorizer.transform([sentence])
    # Get sentiment
    sentiment = classifier.predict(bow)[0]
    return sentiment

sentence = 'I had a great time today!'
sentiment = predict_sentiment(sentence)
print('The sentiment of the sentence is:', sentiment)"
"Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.  ArmstrongNumber(371)","import math  
  
def ArmstrongNumber(num): 
  sum = 0 
  temp_num = num 
  digits_count = 0 
  
  while temp_num>0: 
    digits_count += 1  
    temp_num = math.floor(temp_num/10)  
  
  digits_sum = 0 
    
  while num > 0:  
    r = num % 10  
    sum += math.pow(r, digits_count)  
    num = math.floor(num/10)  
      
  if sum == temp_num: 
    print (f'{temp_num} is an Armstrong number') 
  else: 
    print (f'{temp_num} is not an Armstrong number ')  
  
num = int(input(""Enter a number: ""))
ArmstrongNumber(num)"
"Modify a Python program to encrypt a string using the XOR Cipher.  current program:
def xor_strings(xs, ys):
    return """".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))

password = ""TestPassword""
string = ""TopSecret""

print(xor_strings(password, string))","def xor_strings(xs, ys):
    output = """"
    for i in range(0, len(xs)):
        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()

    return output

password = ""TestPassword""
string = ""TopSecret""

print(xor_strings(password, string))"
Write a Python program to extract the first letter of each word in a sentence and print it as an acronym.  This is a sample sentence.,SIS
Design a class to convert Fahrenheit to Celsius in Python.  ,"class TempConverter:

    def __init__(self, temp_in_fahrenheit):
        self.temp_in_fahrenheit = temp_in_fahrenheit

    def convert_f_to_c(self):
        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5/9
        return temp_in_celsius"
"Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.  [1,2,3,4]","[x * 10 for x in [1,2,3,4]]"
"Create a function in Python that takes two matrices and prints the result of their subtraction.  A = [[2, 5, 3],
     [1, 4, 7],
     [5, 2, 9]]

B = [[4, 7, 0],
     [3, 2, 8],
     [1, 3, 6]]","def subtractMatrix(A, B): 
  
    rowsA = len(A) 
    colsA = len(A[0]) 
    rowsB = len(B) 
    colsB = len(B[0]) 
  
    # Checking if the given two matrix are of same size 
    if rowsB != rowsA or colsA != colsB: 
        print(""ERROR"") 
     
    # Subtracting corresponding elements 
    C = [[0 for j in range(colsA)] for i in range(rowsB)] 
    for i in range(rowsA): 
        for j in range(colsB): 
            C[i][j] = A[i][j] - B[i][j] 
    return C"
"Optimize a Python function that returns the value at the index of an array (list) of size n.  [20, 30, 50, 70, 90]","def getValueAtIndex(arr, index):
    return arr[index] if index >= 0 and index < len(arr) else 0

print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70"
Create a data structure in Python to represent a classical play.  ,"class Play(object):
    def __init__(self):
        self.characters = []
        self.scenes = []
        self.title = """"
    
    def add_character(self, character):
        self.characters.append(character)
    
    def add_scene(self, scene):
        self.scenes.append(scene)
    
    def set_title(self, title):
        self.title = title"
"Write a python program for searching for a specific product within a given list of products.  products = [""Apple"", ""Banana"", ""Cherry"", ""Grape""]

search_query = ""Grape""","# Define a search function
def search (products, query):
  # Loop through list
  for product in products:
    if product == query: 
      # Return the product index if it matches the query
      return products.index(product)

# Get the index of the item
result = search(products, search_query)

# Print the result
print(result)"
Create a Machine Learning model in Python that predicts the direction of the stock market using historical data.  Sample of 1000 days of State Street Corporation's stock prices.,"import pandas as pd 
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv('stock_prices.csv')
y = df['direction'].values
X = df.drop(['date', 'direction'], axis=1).values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

accuracy = knn.score(X_test, y_test)
print(""Model accuracy: {}%"".format(round(accuracy*100, 2)))"
In Python print out the first 10 numbers of the Fibonacci sequence.  ,"a, b = 0, 1
for i in range(10):
  print(a)
  a, b = b, a + b

# Output:
0
1
1
2
3
5
8
13
21
34"
